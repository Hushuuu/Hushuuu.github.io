<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NetCore on The Site</title>
    <link>https://hushuuu.github.io/categories/netcore/</link>
    <description>Recent content in NetCore on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 10:38:39 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/categories/netcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NetCore-專案檔設定</title>
      <link>https://hushuuu.github.io/2022/03/03/netcore-%E5%B0%88%E6%A1%88%E6%AA%94%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Thu, 03 Mar 2022 10:38:39 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/03/03/netcore-%E5%B0%88%E6%A1%88%E6%AA%94%E8%A8%AD%E5%AE%9A/</guid>
      <description>主要內容 專案下右鍵=&amp;gt;編輯專案檔
//不重新編譯webconfig &amp;lt;!--防止 Web SDK 轉換檔案 web.config--&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;IsTransformWebConfigDisabled&amp;gt;true&amp;lt;/IsTransformWebConfigDisabled&amp;gt; &amp;lt;/PropertyGroup&amp;gt; //發行不覆蓋  &amp;lt;ItemGroup&amp;gt; &amp;lt;MsDeploySkipRules Include=&amp;#34;CustomSkipFolder&amp;#34;&amp;gt; &amp;lt;!--不覆蓋此目錄下的檔案--&amp;gt; &amp;lt;ObjectName&amp;gt;dirPath&amp;lt;/ObjectName&amp;gt; &amp;lt;AbsolutePath&amp;gt;wwwroot\\test&amp;lt;/AbsolutePath&amp;gt; &amp;lt;/MsDeploySkipRules&amp;gt; &amp;lt;/ItemGroup&amp;gt; 小結 write something cool&amp;hellip;
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>NetCore使用Appsetting</title>
      <link>https://hushuuu.github.io/2022/02/17/netcore%E4%BD%BF%E7%94%A8appsetting/</link>
      <pubDate>Thu, 17 Feb 2022 09:45:19 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/17/netcore%E4%BD%BF%E7%94%A8appsetting/</guid>
      <description>主要內容 NetCore在取得
//預設Startup已有注入Configuration public IConfiguration Configuration { get; } public IWebHostEnvironment _env { get; set; } public Startup(IConfiguration configuration, IWebHostEnvironment env) { Configuration = configuration; _env = env; } //一般取值 _config.GetValue&amp;lt;string&amp;gt;(&amp;#34;AAAAA&amp;#34;); 強型別取得 AppSetting.cs建立靜態類別
public static class AppSetting { private static IConfiguration config; public static void Initialize(IConfiguration Configuration) { config = Configuration; } private static string GetAppSettings(string name) { return config.GetValue&amp;lt;string&amp;gt;(name); } #region 平台相關設定  /// &amp;lt;summary&amp;gt;  /// log 保留天數  /// &amp;lt;/summary&amp;gt;  public static int LogExistDays { get { int days = 7; int.</description>
    </item>
    
    <item>
      <title>ajax在NetCore Razor Page得到回應bad request</title>
      <link>https://hushuuu.github.io/2021/05/27/ajax%E5%9C%A8netcore-razor-page%E5%BE%97%E5%88%B0%E5%9B%9E%E6%87%89bad-request/</link>
      <pubDate>Thu, 27 May 2021 15:52:39 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/05/27/ajax%E5%9C%A8netcore-razor-page%E5%BE%97%E5%88%B0%E5%9B%9E%E6%87%89bad-request/</guid>
      <description>前言 在使用Razor Page時，想傳入post請求卻得到bad request
應該是在net core下有預設檢查ValidateAntiForgeryToken來防止跨站攻擊
故需要在POST前加上token來通過檢查
主要內容 可利用HtmlHelper直接產生出token @Html.AntiForgeryToken() 在ajax中加入token $.ajax({ type: &amp;#34;POST&amp;#34;, url: &amp;#34;&amp;#34;, data: &amp;#34;&amp;#34;, dataType: &amp;#34;json&amp;#34;, beforeSend: function (xhr) { xhr.setRequestHeader(&amp;#34;requestverificationtoken&amp;#34;, $(&amp;#39;input:hidden[name=&amp;#34;__RequestVerificationToken&amp;#34;]&amp;#39;).val()); }, success: function (response) { } }); 小結 另外Razor Pages 是透過 ?handler 決定呼叫哪一段程式
只要在 AJAX URL 加上 ?handler=MethodName
Razor Page cs檔寫 OnGetMethodName() 或 OnPostMethodName() 即可辨識要進哪個方法
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>NetCore上建立LINE BOT</title>
      <link>https://hushuuu.github.io/2021/05/27/netcore%E4%B8%8A%E5%BB%BA%E7%AB%8Bline-bot/</link>
      <pubDate>Thu, 27 May 2021 10:09:55 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/05/27/netcore%E4%B8%8A%E5%BB%BA%E7%AB%8Bline-bot/</guid>
      <description>前言 LINE官方有不同語言的API套件，C#的話則有社群提供。主要為pierre3提供的LineMessaging Api和twdeveloper提供的LineBotSDK可選用
本篇使用LineMessaging Api
初始設計 建立一個新專案，範本選.net core Web空白的專案
Nuget安裝Line.Messaging
將Linebot的Channel secret和Channel access token放在 appsettings.json
&amp;#34;LineBot&amp;#34;: { &amp;#34;channelSecret&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;accessToken&amp;#34;: &amp;#34;xxx&amp;#34; } 建立LineBotConfig.cs
public class LineBotConfig { public string channelSecret { get; set; } public string accessToken { get; set; } } 設定Startup.cs
public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container.</description>
    </item>
    
    <item>
      <title>Net Core 使用 SignalR實現即時通訊</title>
      <link>https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/</link>
      <pubDate>Thu, 29 Apr 2021 14:15:05 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/</guid>
      <description>前言 在使用SignalR之前可以先行了解WebSocket的原理
Websocket是一個持久化的協議，長期保持連線
若需要回應時再進行回應。
而除了WebSocket，也有long poll或利用AjaxLoop
的方式來實現即時通訊。但另外兩種方式相較之下較為消耗資源。
初始步驟 Nuget尋找並安裝SignalR相關套件
如Microsoft.AspNetCore.SignalR.Core
用戶端程式庫 在 [方案總管] 中，以滑鼠右鍵按一下專案，然後選取 [新增][用戶端程式庫] &amp;gt; 。
在 [新增用戶端程式庫] 對話方塊中，針對 [提供者] 選取 [unpkg]。
針對 [程式庫]，輸入 @microsoft/signalr
選取 [選擇特定檔案]、展開 [散發者/瀏覽器] 資料夾，然後選取 signalr.js 與 signalr.min.js。
將 [目標位置] 設定為 wwwroot/lib/signalr/，然後選取 [安裝]。
建立Signal Hub 建立Hubs資料夾
在 Hubs 資料夾中，建立ChatHub.cs
using Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace SignalRChat.Hubs { public class ChatHub : Hub { public async Task SendMessage(string user, string message) { await Clients.All.SendAsync(&amp;#34;ReceiveMessage&amp;#34;, user, message); } } }&amp;gt; 註冊SignalR 在Startup.</description>
    </item>
    
    <item>
      <title>NetCore 啟用Session</title>
      <link>https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/</link>
      <pubDate>Fri, 23 Apr 2021 10:39:28 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/</guid>
      <description>前言 安裝套件 Microsoft.AspNetCore.Session
Startup.cs &amp;gt; ConfigureServices中加入
// 將 Session 存在 ASP.NET Core 記憶體中 services.AddDistributedMemoryCache(); services.AddSession(options =&amp;gt; { options.Cookie.HttpOnly = true; //防止XSS攻擊者存取Cookies }); Startup &amp;gt; Configure中加入
// SessionMiddleware 加入 Pipeline app.UseSession(); 開始使用 //設定Session HttpContext.Session.SetString(&amp;#34;SessionKey&amp;#34;, &amp;#34;SessionValue&amp;#34;); //取得Session string sVal = HttpContext.Session.GetString(&amp;#34;SessionKey&amp;#34;); Session如果需要存物件進去就需要寫擴充的方法來實現 新增SessionExtensions.cs
//HttpContext.Session.GetObject&amp;lt;T&amp;gt;(&amp;#34;SessionKey&amp;#34;);  //HttpContext.Session.SetObject&amp;lt;T&amp;gt;(&amp;#34;SessionKey&amp;#34;,object);  public static class SessionExtensions { public static void SetObject&amp;lt;T&amp;gt;(this ISession session, string key, T value) { session.SetString(key, JsonConvert.SerializeObject(value)); } public static T GetObject&amp;lt;T&amp;gt;(this ISession session, string key) { var value = session.</description>
    </item>
    
    <item>
      <title>NetCore 更改預設ModelBinding ErrorMessage</title>
      <link>https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/</link>
      <pubDate>Fri, 23 Apr 2021 10:04:41 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/</guid>
      <description>前言 NetCore就算更改了Local Language若沒做多國語言資源，似乎沒有預設中文的樣板
除了可以在Attribue裡面自定義錯誤訊息來改成中文但共用屬性每個都改太麻煩了 可以使用自訂義類別實作 IValidationMetadataProvider介面來實現更改預設訊息
主要內容 建立cs檔
public void CreateValidationMetadata(ValidationMetadataProviderContext context) { if (context == null) { throw new ArgumentNullException(); } var validators = context.ValidationMetadata.ValidatorMetadata; // add [Required] for value-types (int/DateTime etc)  // to set ErrorMessage before asp.net does it  var theType = context.Key.ModelType; var underlyingType = Nullable.GetUnderlyingType(theType); if (theType.IsValueType &amp;amp;&amp;amp; underlyingType == null &amp;amp;&amp;amp; // not nullable type  validators.Where(m =&amp;gt; m.GetType() == typeof(RequiredAttribute)).Count() == 0) { validators.</description>
    </item>
    
    <item>
      <title>在Net Core 使用 ViewComponent</title>
      <link>https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/</link>
      <pubDate>Wed, 21 Apr 2021 17:50:19 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/</guid>
      <description>前言 NetCore也可以使用原本HtmlHelper的PartialView的方式或用TagHelper來呼叫
本篇介紹如何使用更豐富的ViewComponent
主要內容 1.在專案底下新增資料夾ViewComponents
2.新增一個XXXXViewComponent.cs檔案
3.檔案內容須符合相關規則(可只擇一規則)才會被辨認為ViewComponent
//規則:檔名為XXXXViewComponent [Microsoft.AspNetCore.Mvc.ViewComponent] //規則: 類別掛上[ViewComponent] Attribute public class PkindViewComponent : Microsoft.AspNetCore.Mvc.ViewComponent //規則: 類別繼承ViewComponent { public PkindViewComponent() { } public IViewComponentResult Invoke() { return View(); } } View模板預設路徑要放在 Views/Shared/Components/XXXX/Default.cshtml
就可以開始設計View
如何使用 在需要呼叫ViewComponent 的檢視下加上
@addTagHelper *, 專案名稱 再打上vc 就會自動跑出選項代表成功了 &amp;lt;div&amp;gt; &amp;lt;vc:XXXX&amp;gt;&amp;lt;/vc:XXXX&amp;gt; &amp;lt;/div&amp;gt; 應用 也有非同步調用方法InvokeAsync 和含有參數往資料庫撈資料的變化
[Microsoft.AspNetCore.Mvc.ViewComponent] public class HotSaleComponent : Microsoft.AspNetCore.Mvc.ViewComponent { private Test2021Context _context; public HotSaleComponent(Test2021Context context) { _context = context; } public async Task&amp;lt;IViewComponentResult&amp;gt; InvokeAsync(string ddd) { var list = await _context.</description>
    </item>
    
  </channel>
</rss>
