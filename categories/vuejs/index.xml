<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VueJs on The Site</title>
    <link>https://hushuuu.github.io/categories/vuejs/</link>
    <description>Recent content in VueJs on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Feb 2022 14:25:43 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/categories/vuejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue Component(datepicker)</title>
      <link>https://hushuuu.github.io/2022/02/26/vue-componentdatepicker/</link>
      <pubDate>Sat, 26 Feb 2022 14:25:43 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/26/vue-componentdatepicker/</guid>
      <description>前言 使用Vuejs 2練習模板Component
並處理jquery datepicker無法雙向綁定問題
設計 偵測datepicker的onSelect事件來觸發元素的input監聽事件
//註冊Component要在實例vue物件之前  Vue.component(&amp;#39;vue_date&amp;#39;, { template: &amp;#39;&amp;lt;input type=&amp;#34;text&amp;#34; v-datepicker class=&amp;#34;datepicker&amp;#34; :class=&amp;#34;inputclass&amp;#34; :value=&amp;#34;value&amp;#34; v-on:input=&amp;#34;update($event.target.value)&amp;#34;&amp;gt;&amp;#39;, directives: { datepicker: { inserted(el, binding, vNode) { $(el).datepicker({ autoclose: true, format: &amp;#39;yyyy-mm-dd&amp;#39;, onSelect: function (e) { //pick觸發  vNode.context.$emit(&amp;#39;input&amp;#39;, e); } }); } } }, props: { &amp;#39;value&amp;#39;: String, &amp;#34;inputclass&amp;#34;: { type: Object, default: function () { return { &amp;#34;form-control&amp;#34;: true } } }, &amp;#34;id&amp;#34;: String, }, methods: { update(v) { //input觸發  this.</description>
    </item>
    
    <item>
      <title>Vue Component(modal)</title>
      <link>https://hushuuu.github.io/2022/02/25/vue-componentmodal/</link>
      <pubDate>Fri, 25 Feb 2022 14:25:43 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/25/vue-componentmodal/</guid>
      <description>前言 使用Vuejs 2練習模板Component
假設要設計bootstrap4彈窗的模板
prop命名最好不要有大寫否則在html模板需要處理成- ex:foodSize=&amp;gt;food-size
設計 設計template html
&amp;lt;template id=&amp;#34;vue_modalTemplate&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal fade&amp;#34; tabindex=&amp;#34;-1&amp;#34; role=&amp;#34;dialog&amp;#34; aria-hidden=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-dialog&amp;#34; v-bind:class=&amp;#34;sizeClass&amp;#34; role=&amp;#34;document&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-content&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt; &amp;lt;slot name=&amp;#34;header&amp;#34;&amp;gt; &amp;lt;h5 class=&amp;#34;modal-title&amp;#34;&amp;gt;{{msg_title}}&amp;lt;/h5&amp;gt; &amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt; &amp;lt;slot name=&amp;#34;body&amp;#34;&amp;gt; {{msg_body}} &amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;btn btn-secondary&amp;#34; data-dismiss=&amp;#34;modal&amp;#34; v-on:click=&amp;#34;cancel_func&amp;#34;&amp;gt;{{cancel_text}}&amp;lt;/button&amp;gt; &amp;lt;button v-if=&amp;#34;submit_func&amp;#34; class=&amp;#34;btn btn-primary&amp;#34; type=&amp;#34;button&amp;#34; v-on:click=&amp;#34;submit_func&amp;#34;&amp;gt;{{submit_text}}&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; //註冊Component要在實例vue物件之前 Vue.component(&amp;#39;vue_modal&amp;#39;, { template: &amp;#39;#vue_modalTemplate&amp;#39;, props: { &amp;#34;submit_func&amp;#34;: Function, &amp;#34;submit_text&amp;#34;: String, &amp;#34;msg_title&amp;#34;: { type: String, default: function () { return &amp;#34;訊息&amp;#34;; } }, &amp;#34;msg_body&amp;#34;: { type: String, default: function () { return &amp;#34;訊息主體&amp;#34; } }, &amp;#34;cancel_func&amp;#34;: {type: Function,default: function () { }}, &amp;#34;cancel_text&amp;#34;: { type: String, default: function () { return &amp;#34;關閉&amp;#34;; } }, &amp;#34;sizeClass&amp;#34;: { type: Object, default: function () { return {};}}//:size-class=&amp;#34;{&amp;#39;modal-lg&amp;#39;:true}&amp;#34; 大的modal  } }); const VueMessage = new Vue({ data: function () { return { common_msg_title: &amp;#34;訊息&amp;#34;, common_msg_body: &amp;#34;&amp;#34;, } }, methods: { show(msg) { this.</description>
    </item>
    
    <item>
      <title>VueJs 處理Json格式下日期Date</title>
      <link>https://hushuuu.github.io/2021/08/26/vuejs-%E8%99%95%E7%90%86json%E6%A0%BC%E5%BC%8F%E4%B8%8B%E6%97%A5%E6%9C%9Fdate/</link>
      <pubDate>Thu, 26 Aug 2021 16:37:23 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/vuejs-%E8%99%95%E7%90%86json%E6%A0%BC%E5%BC%8F%E4%B8%8B%E6%97%A5%E6%9C%9Fdate/</guid>
      <description>前言 Json Serilize後Datetime格式被轉為/Date(1373950800000)/
轉換處理 //傳入轉換字串和是否要含時間 function FormateDate(str,withTime){ var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ? ar_date.join(`-`) + &amp;#34; &amp;#34; + ar_time.join(`: `) : ar_date.join(`-`); } function dFormat(i) { return i &amp;lt; 10 ?</description>
    </item>
    
    <item>
      <title>.Net MVC ViewModel 套上VueJs</title>
      <link>https://hushuuu.github.io/2021/08/26/.net-mvc-viewmodel-%E5%A5%97%E4%B8%8Avuejs/</link>
      <pubDate>Thu, 26 Aug 2021 14:48:29 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/.net-mvc-viewmodel-%E5%A5%97%E4%B8%8Avuejs/</guid>
      <description>前言 版本vue2.x
將ViewModel序列化後也可綁定到Vue物件上
主要內容 在cshtml內定義好model後序列化
用Json.Encode或是JsonConvert處理後
回傳MvcHtmlString類別
@{ var Datajson = new MvcHtmlString(Json.Encode(Model)); } 建立Vue實體，綁定Element
資料data定義一個dataList接收剛剛序列化的變數
var vueDiv = new Vue({ el: &amp;#34;#vueDiv&amp;#34;, data: { dataList:@Datajson, }, }); v-if 沒筆數就不顯示
v-for 迴圈印出datList每個項目
&amp;lt;table v-if=&amp;#34;dataList.count&amp;gt;0&amp;#34;&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;標題&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;名稱&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr v-for=&amp;#34;(item,index) in dataList&amp;#34; :id=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;td&amp;gt;{{item.title}}&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;{{item.name}}&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; </description>
    </item>
    
  </channel>
</rss>
