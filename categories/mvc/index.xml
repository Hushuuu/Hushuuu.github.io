<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MVC on The Site</title>
    <link>https://hushuuu.github.io/categories/mvc/</link>
    <description>Recent content in MVC on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Oct 2021 15:56:04 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/categories/mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JsonResult JsonConvert與日期Datetime</title>
      <link>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</link>
      <pubDate>Wed, 13 Oct 2021 15:56:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</guid>
      <description>前言 MVC回傳的ActionResult
可以用繼承他的JsonResult來回傳
使用return Json(obj) 會將物件序列化後回傳至前端。
但型別為Datetime會拿到Date(12347838383333)格式之資料
處理方式有三種
 JS處理轉回日期格式 自訂回傳的JsonResult 用JsonConvert並套上轉換屬性  Javascript use FormatDate(&amp;ldquo;Date(12347838383333)&amp;quot;,true) ture則顯示時間
function FormatDate (str, withTime) {//格式化後端傳回的date資料  var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ?</description>
    </item>
    
    <item>
      <title>MVC-使用AntiForgery Token防止跨網站(XSRF/CSRF)攻擊</title>
      <link>https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/</link>
      <pubDate>Mon, 29 Mar 2021 15:56:17 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/</guid>
      <description>前言 MVC本身可在Form Post前使用AntiForgeryToken
在Action上掛上[ValidateAntiForgeryToken]來檢查驗證
如果要在Ajax使用可以自行建立驗證
內建的AntiForgeryToken @using (Html.BeginForm()) { @Html.AntiForgeryToken() } 後端掛在動作上驗證
[ValidateAntiForgeryToken] public ActionResult Create(){ } Ajax套用自行建立驗證 產生AntiForgeryToken
@functions{ public static string GetAntiForgery() { string cookieToken, formToken; AntiForgery.GetTokens(null, out cookieToken, out formToken); return String.Concat(cookieToken, &amp;#34;@.@&amp;#34;, formToken); } } function deleteUser() { var token = $(&amp;#39;@Html.AntiForgeryToken()&amp;#39;).val(); //防偽標記放入headers  //也可以將防偽標記放入data  $.ajax({ type: &amp;#39;POST&amp;#39;, url: &amp;#34;/User/Delete&amp;#34;, headers: { &amp;#39;__RequestVerificationToken&amp;#39;: token }, cache: false, data: { &amp;#34;id&amp;#34;: $(&amp;#34;#delid&amp;#34;).val()}, complete: function (data) { alert(data.</description>
    </item>
    
    <item>
      <title>MVC-上傳檔案轉為Base64String</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</link>
      <pubDate>Thu, 25 Mar 2021 11:15:44 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</guid>
      <description>前言 Html的Img標籤可以將src設為轉換後的Base64 String也可以顯示出圖片
若WebApi需要交流檔案也可以將檔案轉換為Base64進行溝通
Post前轉換 建立一個按鈕事件將轉換後的base64String Post至後端
$(document).on(&amp;#39;click&amp;#39;, &amp;#39;#subBtn&amp;#39;, function () { demo().then((obj) =&amp;gt; { $.ajax({ url: &amp;#34;../&amp;#34;, // url位置  type: &amp;#34;POST&amp;#34;, contentType: &amp;#34;application/json&amp;#34;, data: JSON.stringify(obj),// 輸入的資料  success: function (response) { }//  }); }); }); 使用FileReader來讀取上傳的檔案
因為readAsDataURL是非同步讀取
若不做非同步等待處理
檔案還未處理完就會被Post出去造成傳遞不到正確資料
故需將函式套上async並await等候所有檔案都處理完
const demo = async () =&amp;gt; { var obj = {}; var filearray = []; var file_name = []; let files = $(&amp;#34;input[name=upload_file]&amp;#34;)[0].files; for (let i = 0; i &amp;lt; files.</description>
    </item>
    
    <item>
      <title>MVC-檔案上傳Post</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</link>
      <pubDate>Thu, 25 Mar 2021 10:44:23 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</guid>
      <description>FormPost 如果要用FormPost的方式上傳檔案
注意將Form的Content-Type 設定為enctype=&amp;quot;multipart/form-data&amp;quot;
&amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;.png, .jpg, .jpeg&amp;quot; name=&amp;quot;Filedata&amp;quot; class=&amp;quot;btn btn-default&amp;quot; /&amp;gt;
FormDataPost到後端後可以這樣來接收
public ActionResult Create(HttpPostedFileBase Filedata) { //可利用正則式過濾副檔名 if (Filedata != null &amp;amp;&amp;amp; Regex.IsMatch(Path.GetExtension(Filedata.FileName), &amp;#34;^[.](jpg|png|jpeg|gif|bmp)$&amp;#34;, RegexOptions.IgnoreCase)) { //存到資料夾  string tmpPath1 = Server.MapPath(&amp;#34;~/Images/&amp;#34;); if (!Directory.Exists(tmpPath1)) Directory.CreateDirectory(tmpPath1); var FileName = Path.GetFileName(Filedata.FileName); var FilePath = Path.Combine(Server.MapPath(&amp;#34;~/Images/&amp;#34;), FileName); Filedata.SaveAs(FilePath); string save_path = &amp;#34;/Images/&amp;#34; + FileName; pcm.pic_path = save_path; } } XMLHttpRequest上傳 建立FormData利用XMLHttpRequest發出請求
監聽上傳事件可顯示出上傳進度
//上傳檔案 var file = null; $(&amp;#39;#Filedata1&amp;#39;)[0].addEventListener(&amp;#39;change&amp;#39;, readFile, false); function readFile() { file = this.</description>
    </item>
    
    <item>
      <title>MVC-包含明細的儲存</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</link>
      <pubDate>Tue, 16 Mar 2021 15:50:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</guid>
      <description>前言 在一對多的資料表下，一個表頭會對應好幾筆的明細
開發儲存明細時，該如何實現。
主要內容 若要新增資料要包含新增多筆明細。
可以在新增頁上建立一個Table
並進行新增一筆及刪除一筆的行為
最後儲存時在將table進行post回去的處理
一種方法是在畫面上讓使用者挑選輸入明細
輸入完畢塞一筆進html的table
&amp;lt;p&amp;gt;&amp;lt;h4&amp;gt;訂單明細&amp;lt;/h4&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;div class=&amp;#34;choseProd&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; &amp;lt;h5&amp;gt;選擇商品至明細&amp;lt;/h5&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; @Html.DropDownList(&amp;#34;ChoseProd&amp;#34;, Model.AllProducts, new { @class = &amp;#34;form-control&amp;#34; }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt; @Html.EditorFor(m =&amp;gt; m.QtyForSel, new { htmlAttributes = new { @class = &amp;#34;form-control&amp;#34;, @Min = &amp;#34;0&amp;#34; } }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;button class=&amp;#34;btn btn-default&amp;#34; id=&amp;#34;addBtn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;新增&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 新增按鈕呼叫applist()AJAX POST查詢商品價格後回傳
串接HTML(顯示欄位+隱藏的Input欄位)
Append到明細Table
function applist() { var chosepod = $(&amp;#34;#ChoseProd&amp;#34;).</description>
    </item>
    
    <item>
      <title>MVC-Table排序與分頁</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</link>
      <pubDate>Tue, 16 Mar 2021 14:43:46 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</guid>
      <description>前言 前端有很多實用的table套件如DataTable.js可以直接實現排序換頁搜尋
本篇主要練習如何手動刻出類似的功能。
分頁 分頁的概念為設定一頁需顯示幾筆，再將資料分為幾等分來決定
要顯示第幾頁的資料，根據資料庫的種類用 Rownum Limit等
還可以用LinQ Skip() Take()
var list = query.Skip(startIndex).Take(pageSize).toList(); //舉例一頁顯示10筆，要顯示第3頁的資料  //Skip前兩頁的資料 =&amp;gt; 10*2  //Skip 20筆 Take 10筆 分頁導覽列 傳回前端的資料除了這十筆，也需要將分頁的資訊傳入進行判斷
page當前頁數 EndPage最後頁 TotalItemCount總筆數等
建立導覽列
if (page == 1) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;last_btn&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } else { int nextnum = page - 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;last_btn&amp;#34; href=&amp;#34;@url?page=@nextnum&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } if (page == Endpage) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;next_btn&amp;#34;&amp;gt;下頁&amp;lt;/a&amp;gt; } else { int nextnum = page + 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;next_btn&amp;#34; href=&amp;#34;@url?</description>
    </item>
    
    <item>
      <title>MVC-頁面及權限管理</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 16 Mar 2021 08:49:37 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <description>前言 此篇根據頁面資料表間的父子關係，利用遞迴來產生Menu的選單
並透過群組來進行頁面權限的管控
主要內容 基本的頁面資料表結構，重要的是parent_id代表此頁面父階層頁面的page_id
public class PageModel { [Display(Name = &amp;#34;頁號&amp;#34;)] public string page_id { get; set; } [Display(Name = &amp;#34;頁面名稱&amp;#34;)] public string page_name { get; set; } [Display(Name = &amp;#34;Controller&amp;#34;)] public string controller { get; set; } [Display(Name = &amp;#34;Action&amp;#34;)] public string action { get; set; } [Display(Name = &amp;#34;父頁面&amp;#34;)] public string parent_id { get; set; } } 產生選單的部分使用bootstrap的navbar
並透過Partial View的方式來載入管控的頁面
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;navbar-header&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;navbar-toggle&amp;#34; data-toggle=&amp;#34;collapse&amp;#34; data-target=&amp;#34;.</description>
    </item>
    
    <item>
      <title>MVC-產出Excel</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</link>
      <pubDate>Mon, 15 Mar 2021 17:15:18 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</guid>
      <description>前言 介紹NPOI及EPPlus套件來將資料產出成Excel。
主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls
public ActionResult getExcel() { var result = List&amp;lt;Data&amp;gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(&amp;#34;sheet&amp;#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = &amp;#34;微軟正黑體&amp;#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(&amp;#34;商品清單&amp;#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.</description>
    </item>
    
    <item>
      <title>MVC-資料存取(DataAccess)</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</link>
      <pubDate>Mon, 15 Mar 2021 11:32:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</guid>
      <description>前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET
使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作
第一步 直接連線並查詢出結果的範例
string connStr = &amp;#34;連線字串&amp;#34;; string sql = &amp;#34;SELECT * FROM Product Where id=@id&amp;#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(&amp;#34;id&amp;#34;,&amp;#34;1&amp;#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護
這時候就可以利用封裝的概念將code包起來
先建立一個新類別檔DataAccess.cs
public class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.</description>
    </item>
    
    <item>
      <title>MVC 登入驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:26:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</guid>
      <description>前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。
可透過放在不同週期階段的過濾器來達成不同的需求。
有關生命週期相關可參考此連結
本文主要介紹Action Filter
主要內容 我們可在專案底下新增一個ActionFilters的資料夾
在裡面新增一個LoginFilter.cs檔
裡面就可以寫自定義的Filter
繼承ActionFilterAttribute並複寫OnActionExecuting方法
這邊條件我拿一個登入後設定的Seesion來做判斷。
不通過則filterContext.Result設定導向回登入頁
public class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[&amp;#34;Login_id&amp;#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = &amp;#34;Home&amp;#34;, action = &amp;#34;Login&amp;#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。
可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action</description>
    </item>
    
    <item>
      <title>asp.net MVC 後端Model欄位驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:03:12 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</guid>
      <description>前言 說明幾種Model Binding驗證欄位的方法。
包含正則式，長度限制，必填，自訂驗證。
主要內容 以下面例子 account 的欄位的驗證
StringLength() 長度限制
RegularExpression() 利用正則式
Required 必要欄位
CheckAccount 則為自訂的驗證
[Display(Name = &amp;#34;帳號&amp;#34;)] [StringLength(20)] [RegularExpression(@&amp;#34;[a-zA-Z0-9]*$&amp;#34;, ErrorMessage = &amp;#34;帳號僅能有英文或數字&amp;#34;)] [Required] [CheckAccount(ErrorMessage = &amp;#34;重複&amp;#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法
public class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.</description>
    </item>
    
  </channel>
</rss>
