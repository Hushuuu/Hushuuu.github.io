<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MVC on The Site</title>
    <link>https://hushuuu.github.io/categories/mvc/</link>
    <description>Recent content in MVC on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Mar 2021 17:15:18 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/categories/mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVC-產出Excel</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</link>
      <pubDate>Mon, 15 Mar 2021 17:15:18 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</guid>
      <description>前言 介紹NPOI及EPPlus套件來將資料產出成Excel。
主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls
public ActionResult getExcel() { var result = List&amp;lt;Data&amp;gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(&amp;#34;sheet&amp;#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = &amp;#34;微軟正黑體&amp;#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(&amp;#34;商品清單&amp;#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.</description>
    </item>
    
    <item>
      <title>MVC-資料存取(DataAccess)</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</link>
      <pubDate>Mon, 15 Mar 2021 11:32:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</guid>
      <description>前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET
使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作
第一步 直接連線並查詢出結果的範例
string connStr = &amp;#34;連線字串&amp;#34;; string sql = &amp;#34;SELECT * FROM Product Where id=@id&amp;#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(&amp;#34;id&amp;#34;,&amp;#34;1&amp;#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護
這時候就可以利用封裝的概念將code包起來
先建立一個新類別檔DataAccess.cs
public class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.</description>
    </item>
    
    <item>
      <title>MVC 登入驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:26:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</guid>
      <description>前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。
可透過放在不同週期階段的過濾器來達成不同的需求。
有關生命週期相關可參考此連結
本文主要介紹Action Filter
主要內容 我們可在專案底下新增一個ActionFilters的資料夾
在裡面新增一個LoginFilter.cs檔
裡面就可以寫自定義的Filter
繼承ActionFilterAttribute並複寫OnActionExecuting方法
這邊條件我拿一個登入後設定的Seesion來做判斷。
不通過則filterContext.Result設定導向回登入頁
public class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[&amp;#34;Login_id&amp;#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = &amp;#34;Home&amp;#34;, action = &amp;#34;Login&amp;#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。
可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action</description>
    </item>
    
    <item>
      <title>asp.net MVC 後端Model欄位驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:03:12 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</guid>
      <description>前言 說明幾種Model Binding驗證欄位的方法。
包含正則式，長度限制，必填，自訂驗證。
主要內容 以下面例子 account 的欄位的驗證
StringLength() 長度限制
RegularExpression() 利用正則式
Required 必要欄位
CheckAccount 則為自訂的驗證
[Display(Name = &amp;#34;帳號&amp;#34;)] [StringLength(20)] [RegularExpression(@&amp;#34;[a-zA-Z0-9]*$&amp;#34;, ErrorMessage = &amp;#34;帳號僅能有英文或數字&amp;#34;)] [Required] [CheckAccount(ErrorMessage = &amp;#34;重複&amp;#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法
public class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.</description>
    </item>
    
  </channel>
</rss>
