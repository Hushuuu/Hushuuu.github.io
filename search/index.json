[{"content":"前言 介紹NPOI及EPPlus套件來將資料產出成Excel。\n主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls\npublic ActionResult getExcel() { var result = List\u0026lt;Data\u0026gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(\u0026#34;sheet\u0026#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = \u0026#34;微軟正黑體\u0026#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(\u0026#34;商品清單\u0026#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.CreateRow(1).CreateCell(0).SetCellValue(\u0026#34;商品編號\u0026#34;); sheet.GetRow(1).CreateCell(1).SetCellValue(\u0026#34;商品名\u0026#34;); sheet.GetRow(1).CreateCell(2).SetCellValue(\u0026#34;單價\u0026#34;); sheet.GetRow(1).CreateCell(3).SetCellValue(\u0026#34;庫存\u0026#34;); //填入資料  int rowIndex = 2; for (int row = 0; row \u0026lt; result.Count(); row++) { sheet.CreateRow(rowIndex).CreateCell(0).SetCellValue(result[row].pro_id); sheet.GetRow(rowIndex).CreateCell(1).SetCellValue(result[row].pro_name); sheet.GetRow(rowIndex).CreateCell(2).SetCellValue(Convert.ToDouble(result[row].price)); sheet.GetRow(rowIndex).CreateCell(3).SetCellValue(Convert.ToDouble(result[row].qty)); rowIndex++; } System.IO.MemoryStream ms = new System.IO.MemoryStream(); xssfworkbook.Write(ms); string handle = Guid.NewGuid().ToString(); TempData[handle] = ms.ToArray(); return Json(data: new { FileGuid = handle, FileName = \u0026#34;商品清單.xlsx\u0026#34; }) ; } 因為是透過AJAX方式進後端，回傳這部分將檔案的MemoryStream Array利用TempData傳回\n並取得一個Guid來當這資料的KEY，回傳KEY和檔案名稱回View。\nAjax回傳至前端後，利用iframe的方式實現下載(打下載的Action)\nAjax完成回傳的ata var response = data; //iframe  $(\u0026#34;#ifrm\u0026#34;).remove(); var ifrm = document.createElement(\u0026#34;iframe\u0026#34;); ifrm.setAttribute(\u0026#34;src\u0026#34;, \u0026#39;/Product/Download?fileGuid=\u0026#39; + response.FileGuid + \u0026#39;\u0026amp;filename=\u0026#39; + response.FileName); ifrm.style.display = \u0026#34;none\u0026#34;; ifrm.id = \u0026#34;ifrm\u0026#34;; let dv = $(\u0026#34;\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;).html(ifrm); $(\u0026#39;body\u0026#39;).append(dv); 下載部分 [HttpGet] public virtual ActionResult Download(string fileGuid, string fileName) { if (TempData[fileGuid] != null) { byte[] data = TempData[fileGuid] as byte[]; return File(data, \u0026#34;application/vnd.ms-excel\u0026#34;, fileName); } else { return new EmptyResult(); } } 不過有另一種更簡明易懂的方式\nAction可以直接回傳File Result就可以實現下載\n使用Form Post的方法並開新頁target=\u0026quot;_blank\u0026quot; 直接回傳檔案型別\npublic ActionResult getExcel2(IWorkbook workbook) { System.IO.MemoryStream ms = new System.IO.MemoryStream(); workbook.Write(ms); return File(ms.ToArray(), \u0026#34;application/vnd.ms-excel\u0026#34;, string.Format($\u0026#34;商品清單.xlsx\u0026#34;)); } 小結 產生Excel之後，也可以選擇先產生存在Server端，Client端再去取得Server端檔案路徑進行下載。\n本文的方式都不會在Server端產生檔案。可以節省Server端空間也不用有清除歷史檔案的需求。\n不過也有需在Server端產檔的可能，再另外做調整。\n參考連結   url1 url2   ","date":"2021-03-15T17:15:18+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/","title":"MVC-產出Excel"},{"content":"前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET\n使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作\n第一步 直接連線並查詢出結果的範例\nstring connStr = \u0026#34;連線字串\u0026#34;; string sql = \u0026#34;SELECT * FROM Product Where id=@id\u0026#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(\u0026#34;id\u0026#34;,\u0026#34;1\u0026#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護\n這時候就可以利用封裝的概念將code包起來\n先建立一個新類別檔DataAccess.cs\npublic class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.ConnectionString; InitCmd(); } protected void InitCmd(){ if(Cmd == null){ Cmd = new SqlCommand(); Cmd.Connection = Conn; } } protected void OpenConnIfClosed(){ if(Conn.State == ConnectionState.Closed){ Conn.Open(); } } protected void CloseConn(){ Conn.Close(); } } 將對資料庫的Connection及Command初始化行為建立在類別中。\n可以根據Transaction需求及Query再擴展\nprotected SqlTransaction Transaction { get; set; } private bool UseTransaction { get; set; } //SQL查詢  protected T SqlQuery_result\u0026lt;T\u0026gt;(string strSql, Dictionary\u0026lt;string, object\u0026gt; parameters=null,CommandType cmdType = CommandType.Text ) { T tobj = default(T); try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSql; Cmd.Parameters.Clear(); if (parameters != null \u0026amp;\u0026amp; parameters.Count \u0026gt; 0) { foreach (var item in parameters) { if (item.Value == null) Cmd.Parameters.AddWithValue(item.Key, DBNull.Value); else Cmd.Parameters.AddWithValue(item.Key, item.Value); } } using (SqlDataReader odr = Cmd.ExecuteReader()) { if (odr.HasRows) { odr.Read(); Type y = odr[0].GetType(); if (typeof(T) == y) { tobj = (T)Convert.ChangeType(odr[0],typeof(T)); } else { tobj = default; } } } Cmd.Parameters.Clear(); if (!UseTransaction) { CloseConn(); } return tobj; } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } } SqlQuery_result有使用泛型T，可不事先決定這Function回傳的資料型態。\n但此方法只可以查詢單筆單個欄位，如果想要查詢Select * from Product這種結果的話就要再調整。 可以利用Reflection反射，來對應泛型的屬性。此篇先不多提。\n除了Query之外還有執行的需求，也一樣擴充我們的類別\nprotected int ExecuteSqlCommand(string strSQL, Dictionary\u0026lt;string, object\u0026gt; parameters = null, CommandType cmdType = CommandType.Text ) { int effectRows = -1; try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSQL; Cmd.Parameters.Clear(); if (parameters != null) { foreach (var item in parameters) { Cmd.Parameters.AddWithValue(item.Key, item.Value == null ? DBNull.Value : item.Value); } } effectRows = Cmd.ExecuteNonQuery(); if (!UseTransaction) { CloseConn(); } } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } return effectRows; } 再簡化 到這裡已經把初始化連線、建立Command、查詢及執行都封裝成一個類別了！\n但方法的存取修飾詞為什麼是protected?\n使用DataAccess類別時，需要在Controller中new連線物件並寫增刪修查語法後Call物件的方法。\n如果要更加的簡化Controller裡的Code，可以再將增刪修查的動作提取出來，使得Controller結構一目了然\n舉例資料表User，建立一個類別檔UserDB.cs\n繼承DataAccess類別來建立增刪修查的方法\n*父類別protected的屬性或方法為了限制給繼承DataAcess的類別可使用\npublic class UserDB : DataAccess { public UserDB(SqlConnection Conn) : base(Conn) { } public List\u0026lt;User\u0026gt; ListUser(string Qid = null, string Qname = null, string Qaccount = null) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = \u0026#34;select * from [User] where 1=1 \u0026#34;; if (Qid != null) { sql += \u0026#34; and id=@qid \u0026#34;; parameters.Add(\u0026#34;qid\u0026#34;, Qid); } if (Qname != null) { sql += \u0026#34; and name=@qname \u0026#34;; parameters.Add(\u0026#34;qname\u0026#34;, Qname); } if (Qaccount != null) { sql += \u0026#34; and account=@qaccount \u0026#34;; parameters.Add(\u0026#34;qaccount\u0026#34;, Qaccount); } List\u0026lt;User\u0026gt; list = SqlQuery\u0026lt;User\u0026gt;(sql,parameters); return list; } public void CreateUser(string id,string name,string account) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = @\u0026#34; insert into [User] (id,name,account) values(@id,@name,@account) \u0026#34;; parameters.Add(\u0026#34;id\u0026#34;, id); parameters.Add(\u0026#34;name\u0026#34;, name); parameters.Add(\u0026#34;account\u0026#34;, account); int x = ExecuteSqlCommand(sql, parameters); } } 實際使用 這樣就把List和Create的部分也包起來了。\n實際在Controller使用只要數行就可以解決\nstring connString = \u0026#34;\u0026#34;; UserDB _UserDB = new UserDB(connString); List\u0026lt;User\u0026gt; users = _UserDB.ListUser(); //Create _UserDB.CreateUser(id,name,account); 小結 感謝同事大神提供非常大的協助。一開始對物件及封裝的概念非常不清楚，對於資料的存取也只會傻傻地硬拚。\n多次的摸索後，看同樣的東西每一次都能有不太一樣的理解跟體悟。\n若使用EF的方式來存取，可節省掉寫Sql語句的部分可以說是方便很多。\n但EF在使用上會有些看不見的地雷或不方便。得實際遇到不同情況再想辦法解決了。\n","date":"2021-03-15T11:32:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/","title":"MVC-資料存取(DataAccess)"},{"content":"前言 較舊之Winfrom專案，有些報表是用SAP的CrystalReport來產生報表。\n若使用VS2019的環境必須先至SAP下載安裝相關之Runtime或是專門給開發人員的CRforVisualStudio\n安裝完畢後可能還會遇到套件版本不相容之問題需另解決。\n主要內容 若是在產生報表時出現錯誤訊息的話，試試在Webconfig/Appconfig 下增加此段\n並調整 oldVersion 和 newVersion 之版本號多嘗試幾次\n\u0026lt;runtime\u0026gt; \u0026lt;assemblyBinding xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v1\u0026#34;\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.CrystalReports.Engine\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportSource\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Shared\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Web\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Windows.Forms\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ClientDoc\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonControls\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonObjectModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Controllers\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CubeDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataSetConversion\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ObjectFactory\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Prompting\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ReportDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.XmlSerialize\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;/assemblyBinding\u0026gt; \u0026lt;/runtime\u0026gt; 小結 組件版本號若沒有對上，在建置前可能就會報錯\n若建置有成功，也可能到產生報表前才報錯。\n這問題一步步去試，多嘗試幾次調整版本或安裝\n參考連結   SAP   ","date":"2021-03-15T10:58:27+08:00","permalink":"https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/","title":"無法轉換類型為CrystalDecisions.ReportAppServer.Controllers.ReportSourceClass"},{"content":"前言 以DatabaseFirst來說不管是查詢還是更改的動作都是和資料庫綁定的實體資料模型Model進行交流\n查詢的結果會是模型的類別，如果結果要為DataTable，EF也可以使用Command的方式。\n主要內容 查詢結果回傳DataSet方法\n傳入sql CommandText 以及數組KeyValuePair參數\npublic DataSet EF_SQL_DS(string sql,Dictionary\u0026lt;string,object\u0026gt; parameters) { XXXXEntities Db = new XXXXEntities();//更改為自己的Entities  DataSet ds = new DataSet(); DbCommand cmd = Db.Database.Connection.CreateCommand(); cmd.CommandText = sql; foreach(KeyValuePair\u0026lt;string,object\u0026gt; p in parameters) { DbParameter dbp = cmd.CreateParameter(); dbp.ParameterName = p.Key; if (p.Value != null) { dbp.Value = p.Value; } else { dbp.Value = DBNull.Value; } cmd.Parameters.Add(dbp); } Db.Database.Connection.Open(); var reader = cmd.ExecuteReader(); var tb = new DataTable(); tb.Load(reader); ds.Tables.Add(tb); reader.Close(); Db.Database.Connection.Close(); return ds; } 小結 利用LinQ Select出自訂類別應較為方便泛用。\n若利用EF的Command須注意是否會和Entities的方式混用導致非預期的資料不正確或錯誤。\n","date":"2021-03-15T09:55:01+08:00","permalink":"https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/","title":"EntityFramework查詢結果回傳DataTable"},{"content":"前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。\n可透過放在不同週期階段的過濾器來達成不同的需求。\n有關生命週期相關可參考此連結\n本文主要介紹Action Filter\n主要內容 我們可在專案底下新增一個ActionFilters的資料夾\n在裡面新增一個LoginFilter.cs檔\n裡面就可以寫自定義的Filter\n繼承ActionFilterAttribute並複寫OnActionExecuting方法\n這邊條件我拿一個登入後設定的Seesion來做判斷。\n不通過則filterContext.Result設定導向回登入頁\npublic class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[\u0026#34;Login_id\u0026#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = \u0026#34;Home\u0026#34;, action = \u0026#34;Login\u0026#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。\n可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action\n","date":"2021-03-15T09:26:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/","title":"MVC 登入驗證"},{"content":"前言 說明幾種Model Binding驗證欄位的方法。\n包含正則式，長度限制，必填，自訂驗證。\n主要內容 以下面例子 account 的欄位的驗證\nStringLength() 長度限制\nRegularExpression() 利用正則式\nRequired 必要欄位\nCheckAccount 則為自訂的驗證\n[Display(Name = \u0026#34;帳號\u0026#34;)] [StringLength(20)] [RegularExpression(@\u0026#34;[a-zA-Z0-9]*$\u0026#34;, ErrorMessage = \u0026#34;帳號僅能有英文或數字\u0026#34;)] [Required] [CheckAccount(ErrorMessage = \u0026#34;重複\u0026#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法\npublic class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.Success; } } return null; } } 驗證結果 在後端接收到資料後可使用Model.State來判斷Model欄位驗證是否通過。\nif(ModelState.IsValid){ //驗證通過  } ","date":"2021-03-15T09:03:12+08:00","permalink":"https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/","title":"asp.net MVC 後端Model欄位驗證"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://hushuuu.github.io/2019/03/08/math-typesetting/","title":"Math Typesetting"}]