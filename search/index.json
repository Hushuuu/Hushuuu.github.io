[{"content":"前言 在使用SignalR之前可以先行了解WebSocket的原理\nWebsocket是一個持久化的協議，長期保持連線\n若需要回應時再進行回應。\n而除了WebSocket，也有long poll或利用AjaxLoop\n的方式來實現即時通訊。但另外兩種方式相較之下較為消耗資源。\n初始步驟 Nuget尋找並安裝SignalR相關套件\n如Microsoft.AspNetCore.SignalR.Core\n用戶端程式庫 在 [方案總管] 中，以滑鼠右鍵按一下專案，然後選取 [新增][用戶端程式庫] \u0026gt; 。\n在 [新增用戶端程式庫] 對話方塊中，針對 [提供者] 選取 [unpkg]。\n針對 [程式庫]，輸入 @microsoft/signalr\n選取 [選擇特定檔案]、展開 [散發者/瀏覽器] 資料夾，然後選取 signalr.js 與 signalr.min.js。\n將 [目標位置] 設定為 wwwroot/lib/signalr/，然後選取 [安裝]。\n建立Signal Hub 建立Hubs資料夾\n在 Hubs 資料夾中，建立ChatHub.cs\nusing Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace SignalRChat.Hubs { public class ChatHub : Hub { public async Task SendMessage(string user, string message) { await Clients.All.SendAsync(\u0026#34;ReceiveMessage\u0026#34;, user, message); } } }\u0026gt; 註冊SignalR 在Startup.cs \u0026gt; ConfigureServices方法中加上\nservices.AddSignalR(); 在Startup.cs \u0026gt; Configure中加上\napp.UseSignalR(routes =\u0026gt; { routes.MapHub\u0026lt;ChatHub\u0026gt;(\u0026#34;/chathub\u0026#34;); }); 用戶端Html \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-2\u0026#34;\u0026gt;User\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;userInput\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-2\u0026#34;\u0026gt;Message\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;messageInput\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; id=\u0026#34;sendButton\u0026#34; value=\u0026#34;Send Message\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt; \u0026lt;ul id=\u0026#34;messagesList\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; id=\u0026#34;btn2\u0026#34; value=\u0026#34;btn2 Message\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;~/lib/jquery/dist/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;~/js/signalr/dist/browser/signalr.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; //chatHub是建立的Hub類別名稱第一個字母要小寫 var connection = new signalR.HubConnectionBuilder().withUrl(\u0026#34;/chatHub\u0026#34;).build(); //Disable send button until connection is established if (document.getElementById(\u0026#39;sendButton\u0026#39;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).disabled = true; } //後端指定特定對象或全部send connection.on(\u0026#34;ReceiveMessage\u0026#34;, function (user, message) { var msg = message.replace(/\u0026amp;/g, \u0026#34;\u0026amp;amp;\u0026#34;).replace(/\u0026lt;/g, \u0026#34;\u0026amp;lt;\u0026#34;).replace(/\u0026gt;/g, \u0026#34;\u0026amp;gt;\u0026#34;); var encodedMsg = user + \u0026#34; says \u0026#34; + msg; var li = document.createElement(\u0026#34;li\u0026#34;); li.textContent = encodedMsg; document.getElementById(\u0026#34;messagesList\u0026#34;).appendChild(li); }); connection.start().then(function () { if (document.getElementById(\u0026#34;sendButton\u0026#34;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).disabled = false; } }).catch(function (err) { return console.error(err.toString()); }); if (document.getElementById(\u0026#39;sendButton\u0026#39;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function (event) { var user = document.getElementById(\u0026#34;userInput\u0026#34;).value; var message = document.getElementById(\u0026#34;messageInput\u0026#34;).value; //將訊息傳至後端  connection.invoke(\u0026#34;SendMessage\u0026#34;, user, message).catch(function (err) { return console.error(err.toString()); }); event.preventDefault(); }); } \u0026lt;/script\u0026gt; 在網頁上開啟開發人員工具F12\n查看Console有無錯誤訊息及正常連線\n參考連結   url1 url2   ","date":"2021-04-29T14:15:05+08:00","permalink":"https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/","title":"Net Core 使用 SignalR實現即時通訊"},{"content":"前言 安裝套件 Microsoft.AspNetCore.Session\nStartup.cs \u0026gt; ConfigureServices中加入\n// 將 Session 存在 ASP.NET Core 記憶體中 services.AddDistributedMemoryCache(); services.AddSession(options =\u0026gt; { options.Cookie.HttpOnly = true; //防止XSS攻擊者存取Cookies }); Startup \u0026gt; Configure中加入\n// SessionMiddleware 加入 Pipeline app.UseSession(); 開始使用 //設定Session HttpContext.Session.SetString(\u0026#34;SessionKey\u0026#34;, \u0026#34;SessionValue\u0026#34;); //取得Session string sVal = HttpContext.Session.GetString(\u0026#34;SessionKey\u0026#34;); Session如果需要存物件進去就需要寫擴充的方法來實現 新增SessionExtensions.cs\n//HttpContext.Session.GetObject\u0026lt;T\u0026gt;(\u0026#34;SessionKey\u0026#34;);  //HttpContext.Session.SetObject\u0026lt;T\u0026gt;(\u0026#34;SessionKey\u0026#34;,object);  public static class SessionExtensions { public static void SetObject\u0026lt;T\u0026gt;(this ISession session, string key, T value) { session.SetString(key, JsonConvert.SerializeObject(value)); } public static T GetObject\u0026lt;T\u0026gt;(this ISession session, string key) { var value = session.GetString(key); return value == null ? default(T) : JsonConvert.DeserializeObject\u0026lt;T\u0026gt;(value); } } Razor Page 中使用 兩種方法都可以取到值\n@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor @{ string vall = HttpContextAccessor.HttpContext.Session.GetString(\u0026#34;SessionKey\u0026#34;); } @using Microsoft.AspNetCore.Http string vall = Context.Session.GetString(\u0026#34;SessionKey\u0026#34;); 參考連結   url1 url2   ","date":"2021-04-23T10:39:28+08:00","permalink":"https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/","title":"NetCore 啟用Session"},{"content":"前言 NetCore就算更改了Local Language若沒做多國語言資源，似乎沒有預設中文的樣板\n除了可以在Attribue裡面自定義錯誤訊息來改成中文但共用屬性每個都改太麻煩了 可以使用自訂義類別實作 IValidationMetadataProvider介面來實現更改預設訊息\n主要內容 建立cs檔\npublic void CreateValidationMetadata(ValidationMetadataProviderContext context) { if (context == null) { throw new ArgumentNullException(); } var validators = context.ValidationMetadata.ValidatorMetadata; // add [Required] for value-types (int/DateTime etc)  // to set ErrorMessage before asp.net does it  var theType = context.Key.ModelType; var underlyingType = Nullable.GetUnderlyingType(theType); if (theType.IsValueType \u0026amp;\u0026amp; underlyingType == null \u0026amp;\u0026amp; // not nullable type  validators.Where(m =\u0026gt; m.GetType() == typeof(RequiredAttribute)).Count() == 0) { validators.Add(new RequiredAttribute()); } foreach (var obj in validators) { if (!(obj is ValidationAttribute attribute)) { continue; } fillErrorMessage\u0026lt;RequiredAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39;是必填欄位.\u0026#34;); fillErrorMessage\u0026lt;MinLengthAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39; 的最小長度是 {1}.\u0026#34;); fillErrorMessage\u0026lt;MaxLengthAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39; 的最大長度是 {1}.\u0026#34;); fillErrorMessage\u0026lt;EmailAddressAttribute\u0026gt;(attribute, \u0026#34;非合法格式的電子信箱.\u0026#34;, true); // other attributes like RangeAttribute, CompareAttribute, etc  } } 在Startup.cs中的ConfigureServices裡加上\nservices.AddControllersWithViews() .AddMvcOptions(m =\u0026gt; { m.ModelMetadataDetailsProviders.Add(new MyModelMetadataProvider()); }); 小結 若要將ErrorMessage顯示多種語言的話。就需要用資源檔來做localization\n只有需要顯示中文的話此篇方法比較簡潔。\n參考連結   url1 url2   ","date":"2021-04-23T10:04:41+08:00","permalink":"https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/","title":"NetCore 更改預設ModelBinding ErrorMessage"},{"content":"前言 NetCore也可以使用原本HtmlHelper的PartialView的方式或用TagHelper來呼叫\n本篇介紹如何使用更豐富的ViewComponent\n主要內容 1.在專案底下新增資料夾ViewComponents\n2.新增一個XXXXViewComponent.cs檔案\n3.檔案內容須符合相關規則(可只擇一規則)才會被辨認為ViewComponent\n//規則:檔名為XXXXViewComponent [Microsoft.AspNetCore.Mvc.ViewComponent] //規則: 類別掛上[ViewComponent] Attribute public class PkindViewComponent : Microsoft.AspNetCore.Mvc.ViewComponent //規則: 類別繼承ViewComponent { public PkindViewComponent() { } public IViewComponentResult Invoke() { return View(); } } View模板預設路徑要放在 Views/Shared/Components/XXXX/Default.cshtml\n就可以開始設計View\n如何使用 在需要呼叫ViewComponent 的檢視下加上\n@addTagHelper *, 專案名稱 再打上vc 就會自動跑出選項代表成功了 \u0026lt;div\u0026gt; \u0026lt;vc:XXXX\u0026gt;\u0026lt;/vc:XXXX\u0026gt; \u0026lt;/div\u0026gt; 應用 也有非同步調用方法InvokeAsync 和含有參數往資料庫撈資料的變化\n[Microsoft.AspNetCore.Mvc.ViewComponent] public class HotSaleComponent : Microsoft.AspNetCore.Mvc.ViewComponent { private Test2021Context _context; public HotSaleComponent(Test2021Context context) { _context = context; } public async Task\u0026lt;IViewComponentResult\u0026gt; InvokeAsync(string ddd) { var list = await _context.PRODUCT //向資料庫拿資料並將list或模型傳回檢視  .ToListAsync(); return View(list)); } } 參考連結   url1 url2 url3   ","date":"2021-04-21T17:50:19+08:00","permalink":"https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/","title":"在Net Core 使用 ViewComponent"},{"content":"前言 EF Core5.0之後增加 LogTo 可使用StramWriter的方式寫在DBContext.cs裡\n但沒試出寫在Startup.cs ConfigureServices\nprivate readonly StreamWriter _logStream = new StreamWriter(\u0026#34;mylog.txt\u0026#34;, append: true); protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) =\u0026gt; optionsBuilder.LogTo(_logStream.WriteLine); public override void Dispose() { base.Dispose(); _logStream.Dispose(); } public override async ValueTask DisposeAsync() { await base.DisposeAsync(); await _logStream.DisposeAsync(); } 普通的Console.Write方法\nservices.AddDbContext\u0026lt;YourContext\u0026gt;(options =\u0026gt; { options.UseSqlServer(Configuration.GetConnectionString(\u0026#34;DefaultConnection\u0026#34;)) .EnableSensitiveDataLogging(); //顯示敏感資料(參數)  options.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information); }); NLog來記錄 先打開Nuget安裝 NLog NLog.Web.AspNetCore\nProgram.cs\npublic static void Main(string[] args) { var logger = NLogBuilder.ConfigureNLog(\u0026#34;NLog.config\u0026#34;).GetCurrentClassLogger(); try { CreateHostBuilder(args).Build().Run(); } catch (Exception ex) { logger.Error(ex, \u0026#34;Get Error.\u0026#34;); throw; } finally { NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) =\u0026gt; Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder =\u0026gt; { webBuilder.UseStartup\u0026lt;Startup\u0026gt;() .UseNLog(); }); 設定appsettings.Development.json的LogLevel\n{ \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Microsoft.EntityFrameworkCore.Database.Command\u0026#34;: \u0026#34;Debug\u0026#34; } } } 產生NLog.config\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt; \u0026lt;nlog xmlns=\u0026#34;http://www.nlog-project.org/schemas/NLog.xsd\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; autoReload=\u0026#34;true\u0026#34; internalLogLevel=\u0026#34;Info\u0026#34; internalLogFile=\u0026#34;c:\\temp\\internal-nlog.txt\u0026#34;\u0026gt; \u0026lt;!-- enable asp.net core layout renderers --\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;add assembly=\u0026#34;NLog.Web.AspNetCore\u0026#34;/\u0026gt; \u0026lt;/extensions\u0026gt; \u0026lt;!-- the targets to write to --\u0026gt; \u0026lt;targets\u0026gt; \u0026lt;!-- write logs to file --\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;allfile\u0026#34; fileName=\u0026#34;D:\\nlog-all-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}\u0026#34; /\u0026gt; \u0026lt;!-- another file log, only own logs. Uses some ASP.NET core renderers --\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;sql-file\u0026#34; fileName=\u0026#34;D:\\nlog-Sql-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}\u0026#34; /\u0026gt; \u0026lt;/targets\u0026gt; \u0026lt;!-- rules to map from logger name to target --\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;!--All logs, including from Microsoft--\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; minlevel=\u0026#34;Trace\u0026#34; writeTo=\u0026#34;allfile\u0026#34; /\u0026gt; \u0026lt;!-- BlackHole without writeTo --\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; maxlevel=\u0026#34;Debug\u0026#34; minlevel=\u0026#34;Debug\u0026#34; writeTo=\u0026#34;sql-file\u0026#34; /\u0026gt; \u0026lt;!--Skip non-critical Microsoft logs and so log only own logs--\u0026gt; \u0026lt;logger name=\u0026#34;Microsoft.*\u0026#34; maxlevel=\u0026#34;Info\u0026#34; final=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;/nlog\u0026gt; 小結 使用NLog要注意的是設定的LogLevel層級\nEFCore LogTo若有試出方法再更新\n參考連結   url1 url2 url3   ","date":"2021-04-12T15:00:25+08:00","permalink":"https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/","title":"EntityFramework Core使用NLlog紀錄Sql"},{"content":"前言 .NetCore(net5)\nEntity Framework Core\n紀錄如何初始化\n主要內容 使用PackageManager安裝\nEntityFrameworkCore.SqlServer EntityFrameworkCore.Design EntityFrameworkCore EntityFrameworkCore.SqlServer.Tools 建立 DB模型cs\npublic class Blog { public int Id { get; set; } public string Name { get; set; } } 建立DbContext.cs\npublic partial class Test2021Context : DbContext { public Test2021Context() { } public Test2021Context(DbContextOptions\u0026lt;Test2021Context\u0026gt; options) : base(options) { } public virtual DbSet\u0026lt;Blog\u0026gt; Blogs { get; set; } //相依注入後此方法可註解掉  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { if (!optionsBuilder.IsConfigured) { optionsBuilder.UseSqlServer(\u0026#34;Server=.\\\\sqlexpress;Database=Test2021;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#34;); } } } 進行Mirgration及同步資料庫\nPM\u0026gt; Add-Migration InitialCreate PM\u0026gt; Update-Database -V //若不要直接更新要產出SQL PM\u0026gt; Migration-Script //可手動調整Migration出來的cs檔再做Update DbContext和模型也可以透過逆向工程來產生\n-force覆寫現有的檔案\n-outputdir產出資料夾 -context名稱預設為dbnameContext.cs\nScaffold-DbContext \u0026#39;Server=.\\sqlexpress;Database=Test1202;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#39; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force 將連線字串放進appsettings.json\n\u0026#34;ConnectionStrings\u0026#34;: { \u0026#34;DefaultConnection\u0026#34;: \u0026#34;Server=localhost\\\\SQLEXPRESS;Database=Test2021;Trusted_Connection=True\u0026#34; } 相依注入 Startup.cs\npublic void ConfigureServices(IServiceCollection services) { services.AddControllersWithViews(); services.AddDbContext\u0026lt;Test2021Context\u0026gt;(options =\u0026gt; { //啟用 Logging 觀察 SQL 指令  //連參數一起顯示  options.UseSqlServer(Configuration.GetConnectionString(\u0026#34;DefaultConnection\u0026#34;)) .UseLoggerFactory(LoggerFactory.Create(builder =\u0026gt; builder.AddConsole() .AddDebug() .AddFilter(level=\u0026gt;level==LogLevel.Information))); //LoggerFactory方式  .LogTo(Console.Write, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information) //LogTo的方式  .EnableSensitiveDataLogging(); }); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env,Test2021Context dbContext) { // 建立資料庫  dbContext.Database.EnsureCreated(); //略 } Controller可以套用範本直接產生出CRUD再微調，效率好很多\n範本也會幫忙建立建構子及注入\npublic class BlogController : Controller { private readonly Test2021Context _context; public BlogController(Test2021Context context) { _context = context; } } 小結 紀錄指令\n//逆向工程產生DbContext及模型 Scaffold-DbContext \u0026#39;Server=.\\sqlexpress;Database=Test1202;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#39; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force //CodeFirst Add-Migration InitialCreate Update-Database -V //若不要直接更新要產出SQL Script-Migration //可手動調整Migration出來的cs檔再做Update 參考連結   url1 url2 url3   ","date":"2021-04-09T10:17:00+08:00","permalink":"https://hushuuu.github.io/2021/04/09/entityframework-core%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8/","title":"EntityFramework Core開始使用"},{"content":"前言 MVC本身可在Form Post前使用AntiForgeryToken\n在Action上掛上[ValidateAntiForgeryToken]來檢查驗證\n如果要在Ajax使用可以自行建立驗證\n內建的AntiForgeryToken @using (Html.BeginForm()) { @Html.AntiForgeryToken() } 後端掛在動作上驗證\n[ValidateAntiForgeryToken] public ActionResult Create(){ } Ajax套用自行建立驗證 產生AntiForgeryToken\n@functions{ public static string GetAntiForgery() { string cookieToken, formToken; AntiForgery.GetTokens(null, out cookieToken, out formToken); return String.Concat(cookieToken, \u0026#34;@.@\u0026#34;, formToken); } } function deleteUser() { var token = $(\u0026#39;@Html.AntiForgeryToken()\u0026#39;).val(); //防偽標記放入headers  //也可以將防偽標記放入data  $.ajax({ type: \u0026#39;POST\u0026#39;, url: \u0026#34;/User/Delete\u0026#34;, headers: { \u0026#39;__RequestVerificationToken\u0026#39;: token }, cache: false, data: { \u0026#34;id\u0026#34;: $(\u0026#34;#delid\u0026#34;).val()}, complete: function (data) { alert(data.responseJSON[\u0026#34;Data\u0026#34;]); document.location.href = \u0026#34;/User/Index\u0026#34;; } }); } 後端自行建立Attribute驗證\npublic class MyValidateAntiForgeryToken : AuthorizeAttribute { public override void OnAuthorization(AuthorizationContext filterContext) { var request = filterContext.HttpContext.Request; if (request.HttpMethod == WebRequestMethods.Http.Post) { if (request.IsAjaxRequest()) { var antiForgeryCookie = request.Cookies[AntiForgeryConfig.CookieName]; var cookieValue = antiForgeryCookie != null ? antiForgeryCookie.Value : null; //從cookies 和 Headers 中 驗證防偽標記  //這裡可以加try-catch  AntiForgery.Validate(cookieValue, request.Headers[\u0026#34;__RequestVerificationToken\u0026#34;]); } else { new ValidateAntiForgeryTokenAttribute() .OnAuthorization(filterContext); } } } } [MyValidateAntiForgeryToken] public ActionResult Delete(string id){} 參考連結   url1   ","date":"2021-03-29T15:56:17+08:00","permalink":"https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/","title":"MVC-使用AntiForgery Token防止跨網站(XSRF/CSRF)攻擊"},{"content":"前言 Html的Img標籤可以將src設為轉換後的Base64 String也可以顯示出圖片\n若WebApi需要交流檔案也可以將檔案轉換為Base64進行溝通\nPost前轉換 建立一個按鈕事件將轉換後的base64String Post至後端\n$(document).on(\u0026#39;click\u0026#39;, \u0026#39;#subBtn\u0026#39;, function () { demo().then((obj) =\u0026gt; { $.ajax({ url: \u0026#34;../\u0026#34;, // url位置  type: \u0026#34;POST\u0026#34;, contentType: \u0026#34;application/json\u0026#34;, data: JSON.stringify(obj),// 輸入的資料  success: function (response) { }//  }); }); }); 使用FileReader來讀取上傳的檔案\n因為readAsDataURL是非同步讀取\n若不做非同步等待處理\n檔案還未處理完就會被Post出去造成傳遞不到正確資料\n故需將函式套上async並await等候所有檔案都處理完\nconst demo = async () =\u0026gt; { var obj = {}; var filearray = []; var file_name = []; let files = $(\u0026#34;input[name=upload_file]\u0026#34;)[0].files; for (let i = 0; i \u0026lt; files.length; i++) { var reader = new FileReader(); reader.readAsDataURL(files[i]); //data url  const result = await new Promise((resolve, reject) =\u0026gt; { reader.onload = function (e) { var buffer = e.target.result; //是data url  const base64String = buffer //只取得base64 string  .replace(\u0026#34;data:\u0026#34;, \u0026#34;\u0026#34;) .replace(/^.+,/, \u0026#34;\u0026#34;); resolve(base64String); } }); filearray.push(result); file_name.push(files[i].name); } obj = { file_byte: filearray, file_name: file_name }; return obj; }; Post後轉換 上傳至後端才做轉換的處理相較之下就簡單許多\nfor (int i = 0; i \u0026lt; Request.Files.Count; i++) { HttpPostedFileBase file = Request.Files[i]; MemoryStream ms = new MemoryStream(); file.InputStream.CopyTo(ms); byte[] btarr = ms.ToArray(); string basestr = Convert.ToBase64String(btarr); } 小結 async await Promise這些非同步相關的使用上需要花點時間理解\n主要目的為實現等待：檔案非同步讀取完全做完才上傳出去\n參考連結   url1 url2   ","date":"2021-03-25T11:15:44+08:00","permalink":"https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/","title":"MVC-上傳檔案轉為Base64String"},{"content":"FormPost 如果要用FormPost的方式上傳檔案\n注意將Form的Content-Type 設定為enctype=\u0026quot;multipart/form-data\u0026quot;\n\u0026lt;input type=\u0026quot;file\u0026quot; accept=\u0026quot;.png, .jpg, .jpeg\u0026quot; name=\u0026quot;Filedata\u0026quot; class=\u0026quot;btn btn-default\u0026quot; /\u0026gt;\nFormDataPost到後端後可以這樣來接收\npublic ActionResult Create(HttpPostedFileBase Filedata) { //可利用正則式過濾副檔名 if (Filedata != null \u0026amp;\u0026amp; Regex.IsMatch(Path.GetExtension(Filedata.FileName), \u0026#34;^[.](jpg|png|jpeg|gif|bmp)$\u0026#34;, RegexOptions.IgnoreCase)) { //存到資料夾  string tmpPath1 = Server.MapPath(\u0026#34;~/Images/\u0026#34;); if (!Directory.Exists(tmpPath1)) Directory.CreateDirectory(tmpPath1); var FileName = Path.GetFileName(Filedata.FileName); var FilePath = Path.Combine(Server.MapPath(\u0026#34;~/Images/\u0026#34;), FileName); Filedata.SaveAs(FilePath); string save_path = \u0026#34;/Images/\u0026#34; + FileName; pcm.pic_path = save_path; } } XMLHttpRequest上傳 建立FormData利用XMLHttpRequest發出請求\n監聽上傳事件可顯示出上傳進度\n//上傳檔案 var file = null; $(\u0026#39;#Filedata1\u0026#39;)[0].addEventListener(\u0026#39;change\u0026#39;, readFile, false); function readFile() { file = this.files[0]; } function upload() { let xhr = new XMLHttpRequest(); let fd = new FormData(); fd.append(\u0026#34;fileName\u0026#34;, file); //監聽事件  xhr.upload.addEventListener(\u0026#34;progress\u0026#34;, uploadProgress, false); //傳送檔案和表單自定義引數  xhr.overrideMimeType(\u0026#34;application/json\u0026#34;); xhr.open(\u0026#34;POST\u0026#34;, \u0026#34;@Url.Action(\u0026#34;XHR_UPLOAD\u0026#34;,\u0026#34;HOME\u0026#34;)\u0026#34;, true); xhr.send(fd); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { let response = JSON.parse(xhr.responseText); let pic_path = response[\u0026#34;imgSrc\u0026#34;]; $(\u0026#34;#pic_path\u0026#34;).val(pic_path); $(\u0026#34;#uploadModal\u0026#34;).modal(\u0026#34;hide\u0026#34;); $(\u0026#34;#img1\u0026#34;).show(); $(\u0026#34;#img1\u0026#34;).attr(\u0026#39;src\u0026#39;, pic_path); } }; } function uploadProgress(evt) { if (evt.lengthComputable) { //evt.loaded：檔案上傳的大小 evt.total：檔案總的大小  var percentComplete = Math.round((evt.loaded) * 100 / evt.total); //載入進度條，同時顯示資訊  $(\u0026#34;#percent\u0026#34;).html(percentComplete + \u0026#39;%\u0026#39;); $(\u0026#34;#progressNumber\u0026#34;).css(\u0026#34;width\u0026#34;, percentComplete + \u0026#34;px\u0026#34;); } } 進度條顯示\n\u0026lt;div style=\u0026#34;background:#848484;width:100px;height:10px;margin-top:5px\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;progressNumber\u0026#34; style=\u0026#34;background:#428bca;width:0px;height:10px\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;font id=\u0026#34;percent\u0026#34;\u0026gt;0%\u0026lt;/font\u0026gt; 後端\npublic ActionResult XHR_UPLOAD() { //Request取得上傳的File  //回傳上傳後檔案路徑及資訊JsonString  string str = \u0026#34;\u0026#34;; if (Request.Files.Count \u0026gt; 0) { str = \u0026#34;{\u0026#34;; //當資料夾不存在時，建立此資料夾  if (!Directory.Exists(Server.MapPath(\u0026#34;~/Images/\u0026#34;))) Directory.CreateDirectory(Server.MapPath(\u0026#34;~/Images/\u0026#34;)); HttpPostedFileBase f = Request.Files[0]; string file_name = f.FileName; string file_path = Server.MapPath(\u0026#34;~/Images/\u0026#34;) + file_name; string save_path = \u0026#34;/Images/\u0026#34; + file_name; f.SaveAs(file_path); str += \u0026#34;\\\u0026#34;imgSrc\\\u0026#34;:\\\u0026#34;\u0026#34; + save_path + \u0026#34;\\\u0026#34;,\u0026#34;; str += \u0026#34;\\\u0026#34;imgName\\\u0026#34;:\\\u0026#34;\u0026#34; + file_name + \u0026#34;\\\u0026#34;\u0026#34;; str += \u0026#34;}\u0026#34;; } return Content(str); } 小結 也可以試試Ajax的方式上傳檔案\n要注意就是後端能不能接到File\n接不到就需調整參數如Post的Content-type\n","date":"2021-03-25T10:44:23+08:00","permalink":"https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/","title":"MVC-檔案上傳Post"},{"content":"前言 LINQ在資料的過濾以及查詢方面非常方便，不只可以在EF中轉為SQL語句\n也能對平常的List型別進行過濾查詢。\n主要內容 Linq有兩種表示式，有一種是使用Lambda表示式\nvar p = from t in products where t.Name == \u0026#34;牙膏\u0026#34; select t; //Lambda var p2 = products.Where(t =\u0026gt; t.Name == \u0026#34;牙膏\u0026#34;); JOIN //left join linq var q = from e in Db.Page_M orderby e.page_stack join s in ( from s in Db.Group_D where s.group_id==group_id select s) on new { page_id = e.page_id } equals new { page_id = s.page_id } into subGrp from s in subGrp.DefaultIfEmpty() select new GroupDModel { page_id = e.page_id, page_name = e.page_name, controller = e.controller, action = e.action, can_enter = s.can_enter ?? false, can_see = s.can_see ?? false, page_stack = e.page_stack }; //left join lambda var qq = Db.Page_M.OrderBy(x=\u0026gt;x.page_stack) .GroupJoin(Db.Group_D.Where(x=\u0026gt;x.group_id==group_id), e =\u0026gt; e.page_id, s =\u0026gt; s.page_id, (e, s) =\u0026gt; new { page = e, group = s }) .SelectMany(s =\u0026gt; s.group.DefaultIfEmpty(), (e, s) =\u0026gt; new GroupDModel { page_id = e.page.page_id, page_name = e.page.page_name, controller = e.page.controller, action = e.page.action, can_enter = s.can_enter ?? false, can_see = s.can_see ?? false, page_stack = e.page.page_stack }); 比較複雜的語法得仔細檢查是否結果無誤\nList\u0026lt;BuyDtl\u0026gt; all_list = query.ToList(); all_list.GroupBy(x =\u0026gt; x.pro_id).Select(x =\u0026gt; x.Key) .ToList() .ForEach(z =\u0026gt; { all_list.Where(x =\u0026gt; x.pro_id == z) //groupBy日期  .GroupBy(x =\u0026gt; new { pro_id = x.pro_id, doc_date = x.BuyMst.doc_date }) .Select(x =\u0026gt; new { doc_date = x.Key.doc_date, s_qty = x.Sum(y =\u0026gt; y.qty) }) .ToList() .ForEach(c =\u0026gt; { ChartPointData\u0026lt;DateTime, decimal?\u0026gt; cpd = new ChartPointData\u0026lt;DateTime, decimal?\u0026gt; { x = c.doc_date.Value, y = c.s_qty }; }); }); IQueryable\u0026lt;BuyDtl\u0026gt; query = Db.BuyDtl.Where(x =\u0026gt; x.BuyMst.doc_date == today); //當天全部  ChartDatasets\u0026lt;string, decimal?\u0026gt; chart_ds = new ChartDatasets\u0026lt;string, decimal?\u0026gt;(); List\u0026lt;ChartPointData\u0026lt;string, decimal?\u0026gt;\u0026gt; lst_p = new List\u0026lt;ChartPointData\u0026lt;string, decimal?\u0026gt;\u0026gt;(); query.GroupBy(y =\u0026gt; new { pro_id = y.pro_id }) .Select(z =\u0026gt; new { pro_id = z.Key.pro_id, s_qty = z.Sum(c =\u0026gt; c.qty) }) .ToList() .ForEach(v =\u0026gt; { string proname = Db.Product.Where(y =\u0026gt; y.pro_id == v.pro_id).Select(y =\u0026gt; y.pro_name).FirstOrDefault(); }); 小結 linq is good\n參考連結   url1   ","date":"2021-03-16T16:46:20+08:00","permalink":"https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/","title":"Linq常用的語法與基本介紹"},{"content":"前言 在一對多的資料表下，一個表頭會對應好幾筆的明細\n開發儲存明細時，該如何實現。\n主要內容 若要新增資料要包含新增多筆明細。\n可以在新增頁上建立一個Table\n並進行新增一筆及刪除一筆的行為\n最後儲存時在將table進行post回去的處理\n一種方法是在畫面上讓使用者挑選輸入明細\n輸入完畢塞一筆進html的table\n\u0026lt;p\u0026gt;\u0026lt;h4\u0026gt;訂單明細\u0026lt;/h4\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;choseProd\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-12\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-2\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;選擇商品至明細\u0026lt;/h5\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-2\u0026#34;\u0026gt; @Html.DropDownList(\u0026#34;ChoseProd\u0026#34;, Model.AllProducts, new { @class = \u0026#34;form-control\u0026#34; }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt; @Html.EditorFor(m =\u0026gt; m.QtyForSel, new { htmlAttributes = new { @class = \u0026#34;form-control\u0026#34;, @Min = \u0026#34;0\u0026#34; } }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-default\u0026#34; id=\u0026#34;addBtn\u0026#34; type=\u0026#34;button\u0026#34;\u0026gt;新增\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 新增按鈕呼叫applist()AJAX POST查詢商品價格後回傳\n串接HTML(顯示欄位+隱藏的Input欄位)\nAppend到明細Table\nfunction applist() { var chosepod = $(\u0026#34;#ChoseProd\u0026#34;).val(); var qtyforsel = $(\u0026#34;#QtyForSel\u0026#34;).val(); var price = 0; $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;@Url.Action(\u0026#34;GetProdPrice\u0026#34;, \u0026#34;Order\u0026#34;)\u0026#34;, data: { prod_id: chosepod }, success: function (data) { var jo = JSON.parse(data); price = jo.price; var chosepod = $(\u0026#34;#ChoseProd\u0026#34;).val(); var chosepod_text = $(\u0026#34;#ChoseProd option:selected\u0026#34;).text(); var qtyforsel = $(\u0026#34;#QtyForSel\u0026#34;).val(); var tb_append = \u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td name=\u0026#34;pro_name\u0026#34;\u0026gt;\u0026#39; + chosepod_text + \u0026#39;\u0026lt;input name=\u0026#34;pro_name\u0026#34; value=\u0026#34;\u0026#39; + chosepod_text + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026#39; + \u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;price\u0026#34;\u0026gt;\u0026#39; + price + \u0026#39;\u0026lt;input name=\u0026#34;pirce\u0026#34; value=\u0026#34;\u0026#39; + price + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;qty\u0026#34;\u0026gt;\u0026#39; + qtyforsel + \u0026#39;\u0026lt;input name=\u0026#34;qty\u0026#34; value=\u0026#34;\u0026#39; + qtyforsel + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;pro_id\u0026#34; hidden\u0026gt;\u0026#39; + chosepod + \u0026#39;\u0026lt;input name=\u0026#34;pro_id\u0026#34; value=\u0026#34;\u0026#39; + chosepod + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026#39; + \u0026#39;\u0026lt;td\u0026gt;\u0026lt;a class=\u0026#34;btn btn-danger btn-sm deltr\u0026#34; onclick=\u0026#34;\u0026#34;\u0026gt;X\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39; $(\u0026#39;#tb1\u0026#39;).append(tb_append); } }); } 後端Action\npublic ActionResult GetProdPrice(string prod_id) { var prod = Db.Product.Where(x=\u0026gt;x.pro_id==prod_id).Select(x=\u0026gt;new { pro_id=x.pro_id,pro_name=x.pro_name,price=x.price}).Single(); string result = JsonConvert.SerializeObject(prod); return Json(result); } 儲存行為處理 後端接收明細的參數資料型態應為List\u0026lt;\u0026gt;\n故在POST之前需每一筆的input欄位要做name的調整\nArray的話需要改成arr[0] arr[1]後端才辨識的出來\n$(this).find(\u0026#34;input\u0026#34;).eq(3).attr(\u0026#34;name\u0026#34;, \u0026#34;orderdtllist[\u0026#34; + j + \u0026#34;].pro_id\u0026#34;); 小結 一對多的儲存上較為複雜一些\n也可以在明細增加編輯功能來修改單筆就好\n要注意的是明細與表頭的關聯\n還有後端Binding參數的正確於否\n","date":"2021-03-16T15:50:53+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/","title":"MVC-包含明細的儲存"},{"content":"前言 前端有很多實用的table套件如DataTable.js可以直接實現排序換頁搜尋\n本篇主要練習如何手動刻出類似的功能。\n分頁 分頁的概念為設定一頁需顯示幾筆，再將資料分為幾等分來決定\n要顯示第幾頁的資料，根據資料庫的種類用 Rownum Limit等\n還可以用LinQ Skip() Take()\nvar list = query.Skip(startIndex).Take(pageSize).toList(); //舉例一頁顯示10筆，要顯示第3頁的資料  //Skip前兩頁的資料 =\u0026gt; 10*2  //Skip 20筆 Take 10筆 分頁導覽列 傳回前端的資料除了這十筆，也需要將分頁的資訊傳入進行判斷\npage當前頁數 EndPage最後頁 TotalItemCount總筆數等\n建立導覽列\nif (page == 1) { \u0026lt;a class=\u0026#34;btn-default btn-sm disabled\u0026#34; id=\u0026#34;last_btn\u0026#34;\u0026gt;上頁\u0026lt;/a\u0026gt; } else { int nextnum = page - 1; \u0026lt;a class=\u0026#34;btn-default btn-sm\u0026#34; id=\u0026#34;last_btn\u0026#34; href=\u0026#34;@url?page=@nextnum\u0026#34;\u0026gt;上頁\u0026lt;/a\u0026gt; } if (page == Endpage) { \u0026lt;a class=\u0026#34;btn-default btn-sm disabled\u0026#34; id=\u0026#34;next_btn\u0026#34;\u0026gt;下頁\u0026lt;/a\u0026gt; } else { int nextnum = page + 1; \u0026lt;a class=\u0026#34;btn-default btn-sm\u0026#34; id=\u0026#34;next_btn\u0026#34; href=\u0026#34;@url?page=@nextnum\u0026#34;\u0026gt;下頁\u0026lt;/a\u0026gt; } 概念為按下換頁將頁數傳至後端再進行資料過濾\n接著再加上排序的功能\n點擊標頭來排序並標記上顏色\n將排序的欄位和順序及頁數資訊 AJAX post進後端查詢\n傳回html TABLE直接取代\nvar ordering_field = Session[\u0026#34;ordering_field\u0026#34;] ?? \u0026#34;\u0026#34;; var ordering_kind = Session[\u0026#34;ordering_kind\u0026#34;] ?? \u0026#34;\u0026#34;; $(document).on(\u0026#39;click\u0026#39;, \u0026#39;#tb1 thead tr th\u0026#39;, function () { //去除顏色  $(this).closest(\u0026#39;tr\u0026#39;).find(\u0026#39;th\u0026#39;).each(function (index) { $(this).removeAttr(\u0026#39;style\u0026#39;); }); let order_field = $(this).attr(\u0026#39;name\u0026#39;); let order_kind = \u0026#34;Desc\u0026#34;; if (ordering_field == order_field \u0026amp;\u0026amp; ordering_kind == \u0026#34;Desc\u0026#34;) { order_kind = \u0026#34;Asc\u0026#34;; $(this).css(\u0026#39;background-color\u0026#39;, \u0026#39;yellow\u0026#39;); } else { $(this).css(\u0026#39;background-color\u0026#39;, \u0026#39;pink\u0026#39;); } let Lvm = { page:@Model.page, EndPage:@Model.EndPage, pageSize:@Model.pageSize, TotalItemCount:@Model.TotalItemCount, OrderField: order_field, OrderKind: order_kind }; let obj = { Lvm: Lvm } $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;@Url.Action(\u0026#34;OrderByField\u0026#34;,\u0026#34;Order\u0026#34;)\u0026#34;, data: obj, success: function (data) { $(\u0026#39;#tb1 tbody\u0026#39;).html(data); ordering_field = order_field; ordering_kind = order_kind; } }); }); AJAX回傳PartialView結果，Partial產出Table直接取代原先Html\nSession可以記住排序的欄位順序甚至查詢條件\n再切換頁面或其他動作時可恢復原本過濾後的結果\nreturn PartialView(\u0026#34;_SortOrderView\u0026#34;, Lvm); 小結 若沒有特別的要求，其實使用前端套件來的更方便快速\n但在刻畫功能過程中確實也能收穫不少！\n*在使用LinQ排序時可引用一個套件方便做欄位的DESC及ASC Using Linq.Dynamic;\n","date":"2021-03-16T14:43:46+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/","title":"MVC-Table排序與分頁"},{"content":"前言 此篇根據頁面資料表間的父子關係，利用遞迴來產生Menu的選單\n並透過群組來進行頁面權限的管控\n主要內容 基本的頁面資料表結構，重要的是parent_id代表此頁面父階層頁面的page_id\npublic class PageModel { [Display(Name = \u0026#34;頁號\u0026#34;)] public string page_id { get; set; } [Display(Name = \u0026#34;頁面名稱\u0026#34;)] public string page_name { get; set; } [Display(Name = \u0026#34;Controller\u0026#34;)] public string controller { get; set; } [Display(Name = \u0026#34;Action\u0026#34;)] public string action { get; set; } [Display(Name = \u0026#34;父頁面\u0026#34;)] public string parent_id { get; set; } } 產生選單的部分使用bootstrap的navbar\n並透過Partial View的方式來載入管控的頁面\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;navbar-toggle\u0026#34; data-toggle=\u0026#34;collapse\u0026#34; data-target=\u0026#34;.navbar-collapse\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; @Html.ActionLink(\u0026#34;Home\u0026#34;, \u0026#34;Index\u0026#34;, \u0026#34;Home\u0026#34;, new { area = \u0026#34;\u0026#34; }, new { @class = \u0026#34;navbar-brand\u0026#34; }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;navbar-collapse collapse\u0026#34;\u0026gt; @Html.Partial(\u0026#34;_MenuPart\u0026#34;) \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 需先在登入後產生Menu前將Page的資料List放進Session\nPartial View使用遞迴尋找父子關係來產生節點\n@{ List\u0026lt;PageModel\u0026gt; nodeList = Session[\u0026#34;page_list\u0026#34;] as List\u0026lt;PageModel\u0026gt;; if(nodeList == null) { nodeList = new List\u0026lt;PageModel\u0026gt;(); } } @TopMenu(nodeList) @helper TopMenu(List\u0026lt;PageModel\u0026gt; nodeList) { //沒有父節點代表最上方MENU  var NoParentList = nodeList.Where(x =\u0026gt; x.parent_id == null ).ToList(); \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; @foreach (GroupLoginDtl node in NoParentList) { //此節點沒有孩子代表自身為連結  if (!nodeList.Any(z =\u0026gt; z.parent_id == node.page_id )) { string url = \u0026#34;https://\u0026#34; + Request.Url.Authority + \u0026#34;/\u0026#34; + node.controller + \u0026#34;/\u0026#34; + node.action; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;@url\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; } else { //找到所有孩子產生一個dropdown以自身為觸發點  var childrenList = nodeList.Where(x =\u0026gt; x.parent_id == node.page_id ).ToList(); \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;dropdown-toggle\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;@node.page_name \u0026lt;b class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;@DropDownMenu(childrenList, nodeList)\u0026lt;/li\u0026gt; } } \u0026lt;/ul\u0026gt; } @helper DropDownMenu(List\u0026lt;GroupLoginDtl\u0026gt; childrenList, List\u0026lt;GroupLoginDtl\u0026gt; nodeList) { \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; @foreach (var node in childrenList) { //孩子若沒有孩子就是連結  string url = \u0026#34;https://\u0026#34; + Request.Url.Authority+\u0026#34;/\u0026#34;+node.controller + \u0026#34;/\u0026#34; + node.action; if (!nodeList.Any(x =\u0026gt; x.parent_id == node.page_id )) { \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;@url\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; } else { //找到孩子的孩子們以自身為觸發點產生submenu並遞迴產生ul dropdown-menu  var childrenList2 = nodeList.Where(x =\u0026gt; x.parent_id == node.page_id ).ToList(); \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;@DropDownMenu(childrenList2, nodeList)\u0026lt;/li\u0026gt; } } \u0026lt;/ul\u0026gt; } 因此篇為引入bootstrap3 多層選單子節點的部分需要做css的調整\n\u0026lt;style\u0026gt; /*多層下拉選單設定*/ .dropdown-submenu { position: relative; } .dropdown-submenu \u0026gt; .dropdown-menu { top: 0; left: 100%; margin-top: -6px; margin-left: -1px; -webkit-border-radius: 0 6px 6px 6px; -moz-border-radius: 0 6px 6px 6px; border-radius: 0 6px 6px 6px; } .dropdown-submenu:hover \u0026gt; .dropdown-menu { display: block; } .dropdown-submenu \u0026gt; a:after { display: block; content: \u0026#34; \u0026#34;; float: right; width: 0; height: 0; border-color: transparent; border-style: solid; border-width: 5px 0 5px 5px; border-left-color: #cccccc; margin-top: 5px; margin-right: -10px; } .dropdown-submenu:hover \u0026gt; a:after { border-left-color: #ffffff; } .dropdown-submenu.pull-left { float: none; } \u0026lt;/style\u0026gt; 權限群組 做好頁面管理後，可以建立群組資料表來將每個群組賦予不同的權限\n每個群組的明細為所有頁面，調整此頁是否可進入/可出現在Menu\n做好群組後，只需要調整Session為該登入者群組明細\n並在Partial View增加判斷是否需產生此節點。\npublic class GroupM { [Display(Name = \u0026#34;群組編號\u0026#34;)] public string group_id { get; set; } [Display(Name = \u0026#34;群組名稱\u0026#34;)] public string group_name { get; set; } } public class GroupD { [Display(Name = \u0026#34;可看\u0026#34;)] public bool can_see { get; set; } [Display(Name = \u0026#34;可進入\u0026#34;)] public bool can_enter { get; set; } [Display(Name = \u0026#34;頁號\u0026#34;)] public string page_id { get; set; } [Display(Name = \u0026#34;頁面名稱\u0026#34;)] public string page_name { get; set; } [Display(Name = \u0026#34;Controller\u0026#34;)] public string controller { get; set; } [Display(Name = \u0026#34;Action\u0026#34;)] public string action { get; set; } [Display(Name = \u0026#34;父頁面\u0026#34;)] public string parent_id { get; set; } } 訪問權限 雖然在Menu上是看不到不被允許的頁面節點\n但仍可以透過網址來訪問該頁\n所以當做好群組權限設定後，在進Action之前就檔掉不被允許的訪問\n利用此篇介紹的Filter來達成\npublic override void OnActionExecuting(ActionExecutingContext filterContext) { string controller = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName; string action = filterContext.ActionDescriptor.ActionName; List\u0026lt;PageModel\u0026gt; groupList = HttpContext.Current.Session[\u0026#34;PageModel\u0026#34;] as List\u0026lt;PageModel\u0026gt;; if(!groupList.Any(z=\u0026gt;z.can_enter==true \u0026amp;\u0026amp; z.controller==controller \u0026amp;\u0026amp; z.action == action)) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = \u0026#34;Home\u0026#34;, action = \u0026#34;Index\u0026#34; })); } } 小結 頁面權限的管控有很多種方式，也可以透過不同權限載入不同Layout的方式\n子選單顯示的部分，bootstrap較新版本或是其他方式應也可達成需求\n總結在有父子關聯的處理上，使用遞迴的概念是非常實用的。\n參考連結   url1   ","date":"2021-03-16T08:49:37+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/","title":"MVC-頁面及權限管理"},{"content":"前言 介紹NPOI及EPPlus套件來將資料產出成Excel。\n主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls\npublic ActionResult getExcel() { var result = List\u0026lt;Data\u0026gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(\u0026#34;sheet\u0026#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = \u0026#34;微軟正黑體\u0026#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(\u0026#34;商品清單\u0026#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.CreateRow(1).CreateCell(0).SetCellValue(\u0026#34;商品編號\u0026#34;); sheet.GetRow(1).CreateCell(1).SetCellValue(\u0026#34;商品名\u0026#34;); sheet.GetRow(1).CreateCell(2).SetCellValue(\u0026#34;單價\u0026#34;); sheet.GetRow(1).CreateCell(3).SetCellValue(\u0026#34;庫存\u0026#34;); //填入資料  int rowIndex = 2; for (int row = 0; row \u0026lt; result.Count(); row++) { sheet.CreateRow(rowIndex).CreateCell(0).SetCellValue(result[row].pro_id); sheet.GetRow(rowIndex).CreateCell(1).SetCellValue(result[row].pro_name); sheet.GetRow(rowIndex).CreateCell(2).SetCellValue(Convert.ToDouble(result[row].price)); sheet.GetRow(rowIndex).CreateCell(3).SetCellValue(Convert.ToDouble(result[row].qty)); rowIndex++; } System.IO.MemoryStream ms = new System.IO.MemoryStream(); xssfworkbook.Write(ms); string handle = Guid.NewGuid().ToString(); TempData[handle] = ms.ToArray(); return Json(data: new { FileGuid = handle, FileName = \u0026#34;商品清單.xlsx\u0026#34; }) ; } 因為是透過AJAX方式進後端，回傳這部分將檔案的MemoryStream Array利用TempData傳回\n並取得一個Guid來當這資料的KEY，回傳KEY和檔案名稱回View。\nAjax回傳至前端後，利用iframe的方式實現下載(打下載的Action)\nAjax完成回傳的ata var response = data; //iframe  $(\u0026#34;#ifrm\u0026#34;).remove(); var ifrm = document.createElement(\u0026#34;iframe\u0026#34;); ifrm.setAttribute(\u0026#34;src\u0026#34;, \u0026#39;/Product/Download?fileGuid=\u0026#39; + response.FileGuid + \u0026#39;\u0026amp;filename=\u0026#39; + response.FileName); ifrm.style.display = \u0026#34;none\u0026#34;; ifrm.id = \u0026#34;ifrm\u0026#34;; let dv = $(\u0026#34;\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;).html(ifrm); $(\u0026#39;body\u0026#39;).append(dv); 下載部分 [HttpGet] public virtual ActionResult Download(string fileGuid, string fileName) { if (TempData[fileGuid] != null) { byte[] data = TempData[fileGuid] as byte[]; return File(data, \u0026#34;application/vnd.ms-excel\u0026#34;, fileName); } else { return new EmptyResult(); } } 不過有另一種更簡明易懂的方式\nAction可以直接回傳File Result就可以實現下載\n使用Form Post的方法並開新頁target=\u0026quot;_blank\u0026quot; 直接回傳檔案型別\npublic ActionResult getExcel2(IWorkbook workbook) { System.IO.MemoryStream ms = new System.IO.MemoryStream(); workbook.Write(ms); return File(ms.ToArray(), \u0026#34;application/vnd.ms-excel\u0026#34;, string.Format($\u0026#34;商品清單.xlsx\u0026#34;)); } 小結 產生Excel之後，也可以選擇先產生存在Server端，Client端再去取得Server端檔案路徑進行下載。\n本文的方式都不會在Server端產生檔案。可以節省Server端空間也不用有清除歷史檔案的需求。\n不過也有需在Server端產檔的可能，再另外做調整。\n參考連結   url1 url2   ","date":"2021-03-15T17:15:18+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/","title":"MVC-產出Excel"},{"content":"前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET\n使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作\n第一步 直接連線並查詢出結果的範例\nstring connStr = \u0026#34;連線字串\u0026#34;; string sql = \u0026#34;SELECT * FROM Product Where id=@id\u0026#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(\u0026#34;id\u0026#34;,\u0026#34;1\u0026#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護\n這時候就可以利用封裝的概念將code包起來\n先建立一個新類別檔DataAccess.cs\npublic class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.ConnectionString; InitCmd(); } protected void InitCmd(){ if(Cmd == null){ Cmd = new SqlCommand(); Cmd.Connection = Conn; } } protected void OpenConnIfClosed(){ if(Conn.State == ConnectionState.Closed){ Conn.Open(); } } protected void CloseConn(){ Conn.Close(); } } 將對資料庫的Connection及Command初始化行為建立在類別中。\n可以根據Transaction需求及Query再擴展\nprotected SqlTransaction Transaction { get; set; } private bool UseTransaction { get; set; } //SQL查詢  protected T SqlQuery_result\u0026lt;T\u0026gt;(string strSql, Dictionary\u0026lt;string, object\u0026gt; parameters=null,CommandType cmdType = CommandType.Text ) { T tobj = default(T); try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSql; Cmd.Parameters.Clear(); if (parameters != null \u0026amp;\u0026amp; parameters.Count \u0026gt; 0) { foreach (var item in parameters) { if (item.Value == null) Cmd.Parameters.AddWithValue(item.Key, DBNull.Value); else Cmd.Parameters.AddWithValue(item.Key, item.Value); } } using (SqlDataReader odr = Cmd.ExecuteReader()) { if (odr.HasRows) { odr.Read(); Type y = odr[0].GetType(); if (typeof(T) == y) { tobj = (T)Convert.ChangeType(odr[0],typeof(T)); } else { tobj = default; } } } Cmd.Parameters.Clear(); if (!UseTransaction) { CloseConn(); } return tobj; } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } } SqlQuery_result有使用泛型T，可不事先決定這Function回傳的資料型態。\n但此方法只可以查詢單筆單個欄位，如果想要查詢Select * from Product這種結果的話就要再調整。 可以利用Reflection反射，來對應泛型的屬性。此篇先不多提。\n除了Query之外還有執行的需求，也一樣擴充我們的類別\nprotected int ExecuteSqlCommand(string strSQL, Dictionary\u0026lt;string, object\u0026gt; parameters = null, CommandType cmdType = CommandType.Text ) { int effectRows = -1; try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSQL; Cmd.Parameters.Clear(); if (parameters != null) { foreach (var item in parameters) { Cmd.Parameters.AddWithValue(item.Key, item.Value == null ? DBNull.Value : item.Value); } } effectRows = Cmd.ExecuteNonQuery(); if (!UseTransaction) { CloseConn(); } } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } return effectRows; } 再簡化 到這裡已經把初始化連線、建立Command、查詢及執行都封裝成一個類別了！\n但方法的存取修飾詞為什麼是protected?\n使用DataAccess類別時，需要在Controller中new連線物件並寫增刪修查語法後Call物件的方法。\n如果要更加的簡化Controller裡的Code，可以再將增刪修查的動作提取出來，使得Controller結構一目了然\n舉例資料表User，建立一個類別檔UserDB.cs\n繼承DataAccess類別來建立增刪修查的方法\n*父類別protected的屬性或方法為了限制給繼承DataAcess的類別可使用\npublic class UserDB : DataAccess { public UserDB(SqlConnection Conn) : base(Conn) { } public List\u0026lt;User\u0026gt; ListUser(string Qid = null, string Qname = null, string Qaccount = null) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = \u0026#34;select * from [User] where 1=1 \u0026#34;; if (Qid != null) { sql += \u0026#34; and id=@qid \u0026#34;; parameters.Add(\u0026#34;qid\u0026#34;, Qid); } if (Qname != null) { sql += \u0026#34; and name=@qname \u0026#34;; parameters.Add(\u0026#34;qname\u0026#34;, Qname); } if (Qaccount != null) { sql += \u0026#34; and account=@qaccount \u0026#34;; parameters.Add(\u0026#34;qaccount\u0026#34;, Qaccount); } List\u0026lt;User\u0026gt; list = SqlQuery\u0026lt;User\u0026gt;(sql,parameters); return list; } public void CreateUser(string id,string name,string account) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = @\u0026#34; insert into [User] (id,name,account) values(@id,@name,@account) \u0026#34;; parameters.Add(\u0026#34;id\u0026#34;, id); parameters.Add(\u0026#34;name\u0026#34;, name); parameters.Add(\u0026#34;account\u0026#34;, account); int x = ExecuteSqlCommand(sql, parameters); } } 實際使用 這樣就把List和Create的部分也包起來了。\n實際在Controller使用只要數行就可以解決\nstring connString = \u0026#34;\u0026#34;; UserDB _UserDB = new UserDB(connString); List\u0026lt;User\u0026gt; users = _UserDB.ListUser(); //Create _UserDB.CreateUser(id,name,account); 小結 感謝同事大神提供非常大的協助。一開始對物件及封裝的概念非常不清楚，對於資料的存取也只會傻傻地硬拚。\n多次的摸索後，看同樣的東西每一次都能有不太一樣的理解跟體悟。\n若使用EF的方式來存取，可節省掉寫Sql語句的部分可以說是方便很多。\n但EF在使用上會有些看不見的地雷或不方便。得實際遇到不同情況再想辦法解決了。\n","date":"2021-03-15T11:32:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/","title":"MVC-資料存取(DataAccess)"},{"content":"前言 較舊之Winfrom專案，有些報表是用SAP的CrystalReport來產生報表。\n若使用VS2019的環境必須先至SAP下載安裝相關之Runtime或是專門給開發人員的CRforVisualStudio\n安裝完畢後可能還會遇到套件版本不相容之問題需另解決。\n主要內容 若是在產生報表時出現錯誤訊息的話，試試在Webconfig/Appconfig 下增加此段\n並調整 oldVersion 和 newVersion 之版本號多嘗試幾次\n\u0026lt;runtime\u0026gt; \u0026lt;assemblyBinding xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v1\u0026#34;\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.CrystalReports.Engine\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportSource\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Shared\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Web\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Windows.Forms\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ClientDoc\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonControls\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonObjectModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Controllers\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CubeDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataSetConversion\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ObjectFactory\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Prompting\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ReportDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.XmlSerialize\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;/assemblyBinding\u0026gt; \u0026lt;/runtime\u0026gt; 小結 組件版本號若沒有對上，在建置前可能就會報錯\n若建置有成功，也可能到產生報表前才報錯。\n這問題一步步去試，多嘗試幾次調整版本或安裝\n參考連結   SAP   ","date":"2021-03-15T10:58:27+08:00","permalink":"https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/","title":"無法轉換類型為CrystalDecisions.ReportAppServer.Controllers.ReportSourceClass"},{"content":"前言 以DatabaseFirst來說不管是查詢還是更改的動作都是和資料庫綁定的實體資料模型Model進行交流\n查詢的結果會是模型的類別，如果結果要為DataTable，EF也可以使用Command的方式。\n主要內容 查詢結果回傳DataSet方法\n傳入sql CommandText 以及數組KeyValuePair參數\npublic DataSet EF_SQL_DS(string sql,Dictionary\u0026lt;string,object\u0026gt; parameters) { XXXXEntities Db = new XXXXEntities();//更改為自己的Entities  DataSet ds = new DataSet(); DbCommand cmd = Db.Database.Connection.CreateCommand(); cmd.CommandText = sql; foreach(KeyValuePair\u0026lt;string,object\u0026gt; p in parameters) { DbParameter dbp = cmd.CreateParameter(); dbp.ParameterName = p.Key; if (p.Value != null) { dbp.Value = p.Value; } else { dbp.Value = DBNull.Value; } cmd.Parameters.Add(dbp); } Db.Database.Connection.Open(); var reader = cmd.ExecuteReader(); var tb = new DataTable(); tb.Load(reader); ds.Tables.Add(tb); reader.Close(); Db.Database.Connection.Close(); return ds; } 小結 利用LinQ Select出自訂類別應較為方便泛用。\n若利用EF的Command須注意是否會和Entities的方式混用導致非預期的資料不正確或錯誤。\n","date":"2021-03-15T09:55:01+08:00","permalink":"https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/","title":"EntityFramework查詢結果回傳DataTable"},{"content":"前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。\n可透過放在不同週期階段的過濾器來達成不同的需求。\n有關生命週期相關可參考此連結\n本文主要介紹Action Filter\n主要內容 我們可在專案底下新增一個ActionFilters的資料夾\n在裡面新增一個LoginFilter.cs檔\n裡面就可以寫自定義的Filter\n繼承ActionFilterAttribute並複寫OnActionExecuting方法\n這邊條件我拿一個登入後設定的Seesion來做判斷。\n不通過則filterContext.Result設定導向回登入頁\npublic class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[\u0026#34;Login_id\u0026#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = \u0026#34;Home\u0026#34;, action = \u0026#34;Login\u0026#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。\n可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action\n","date":"2021-03-15T09:26:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/","title":"MVC 登入驗證"},{"content":"前言 說明幾種Model Binding驗證欄位的方法。\n包含正則式，長度限制，必填，自訂驗證。\n主要內容 以下面例子 account 的欄位的驗證\nStringLength() 長度限制\nRegularExpression() 利用正則式\nRequired 必要欄位\nCheckAccount 則為自訂的驗證\n[Display(Name = \u0026#34;帳號\u0026#34;)] [StringLength(20)] [RegularExpression(@\u0026#34;[a-zA-Z0-9]*$\u0026#34;, ErrorMessage = \u0026#34;帳號僅能有英文或數字\u0026#34;)] [Required] [CheckAccount(ErrorMessage = \u0026#34;重複\u0026#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法\npublic class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.Success; } } return null; } } 驗證結果 在後端接收到資料後可使用Model.State來判斷Model欄位驗證是否通過。\nif(ModelState.IsValid){ //驗證通過  } ","date":"2021-03-15T09:03:12+08:00","permalink":"https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/","title":"asp.net MVC 後端Model欄位驗證"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://hushuuu.github.io/2019/03/08/math-typesetting/","title":"Math Typesetting"}]