[{"content":"指令 開啟程式點擊nginx.exe\n或$ start nginx\n重載 Nginx 設定檔\u0026amp;啟動\n$ nginx -s reload\n停止 Nginx\n$ nginx -s stop\n測試 Nginx 的設定檔並顯示狀態\n$ nginx -t\n設定檔 Nginx預設設定檔位置在\\conf\\nginx.conf\nserver{\rlisten\t8100; #監聽port\rserver_name\tlocalhost; #server網址\rlocation / { #網址判讀 / or xxx/\rroot D:\\MVC\\2023\\MyVueTest1\\vueapp\\dist; #根目錄位址\rindex index.html index.htm; #頁面\rtry_files $uri $uri/ /index.html; #vue spa使用這行來處理頁面導回index\r}\r}\r平衡附載 在config設定\nupstream ServiceInstance{ #透過upstream 節點定義多個server來使用，實現平衡負載\r#可設定權重weight/ip_hash等參數\rserver localhost:9529; server localhost:9530; } server{\rlisten\t8099; #監聽port\rserver_name\tlocalhost; #server網址\rlocation / { #網址判讀 / or xxx/\rproxy_pass http://ServiceInstance/ ; #proxy代理轉處理\r}\r}\r常見錯誤 啟動錯誤An attempt was made to access a socket in a way forbidden by its access permissions\n可以先排查哪個process占用了要監聽的port\n$ netstat -aon | findstr \u0026quot;1234\u0026quot;\n若找不清楚可以試重啟 WinNAT 服務\nnet stop winnat net start winnat\n參考連結   url1   ","date":"2023-07-11T08:42:15+08:00","permalink":"https://hushuuu.github.io/2023/07/11/nginx%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8/","title":"Nginx開始使用"},{"content":"前言 Blazor在使用EF Context要特別注意生命週期\n一般的注入方式services.AddDbContext\n預設的生命週期是Scoped\n在每個客戶端請求連線時，建立一個新的實例\n但是在Blazor中即使換頁，並不會重新請求重載頁面\n代表兩個畫面之間注入的DbContext是同一個\n與一般開發MVC時每個Action都會建立新的實體不同\n如有嚴謹的DbContext的追蹤與變更則不太會有問題\n但避免有例外情況，例如在不同頁面的存檔卻導致改到了非預期的資料表\n當下就很難找出問題點了!!!\nSolution1 Transient 在注入DbContext時選擇生命週期Transient 每次要求元件時就建立一個新的\n缺點並未實測。\n//program.cs { services.AddDbContext\u0026lt;TpmcDbContext\u0026gt;(options =\u0026gt; options.UseOracle() ,contextLifetime: ServiceLifetime.Transient); } Solution2 DbContextFactory 注入ContextFactory，在Action中使用再建立Context\n//program.cs //lifeTime預設是singleton永久共用 { builder.Services.AddDbContextFactory\u0026lt;\u0026gt;(); } //XXXX.razor [Inject] public IDbContextFactory\u0026lt;TpmcDbContext\u0026gt; _contextFactory { get; set; } async Task RefreshData() { using var db = _contextFactory.CreateDbContext(); var list = db.TableA.ToList(); } 參考連結   url1 url2   ","date":"2023-06-20T16:21:12+08:00","permalink":"https://hushuuu.github.io/2023/06/20/blazor%E6%AD%A3%E7%A2%BA%E4%BD%BF%E7%94%A8efcontext/","title":"Blazor正確使用EFContext"},{"content":"前言 使用Oracle Data Pump來匯入匯出資料庫\nimpdp/expdp只能在Server端執行，Client端不可用\n匯出Impdp 登入sqlplus建立目錄並授權\nSQL: sqlplus /nolog : connect sys/password@localhost/xxx as sysdba : create directory 資料夾定義名稱 as \u0026#39;資料夾路徑\u0026#39; \u0026gt;\u0026gt;\u0026gt;建立目錄 \u0026gt;\u0026gt;\u0026gt;查詢目錄 : select * from dba_directories \u0026gt;\u0026gt;\u0026gt;授權 : GRANT READ,WRITE ON DIRECTORY 資料夾定義名稱 TO 使用者; \u0026gt;\u0026gt;\u0026gt;匯出 : expdp sys/password SCHEMAS=使用者 DIRECTORY=資料夾定義名稱 DUMPFILE=oooooo.dmp : : : LOGFILE=oooo.log 匯入impdp SQL: impdp 帳號/密碼 DIRECTORY=資料夾定義名稱 DUMPFILE=dmp檔案 : content=data_only只匯資料 : remap_schema=A:B 從A schema改到B : table_exists_action=table存在的處置 小結 實際在操作中會有不同情況需要調整指令\n本次只嘗試data_only的方式，把資料匯進不同db\n參考連結   url1   ","date":"2023-06-20T15:47:46+08:00","permalink":"https://hushuuu.github.io/2023/06/20/oracle%E4%BD%BF%E7%94%A8impdp/expdp%E4%BE%86%E5%82%99%E4%BB%BD/","title":"Oracle使用impdp/expdp來備份"},{"content":"前言 如果部屬使用網站的方式，網站路徑不會帶有應用程式別名\nlocalhost:0000/ 但如果要掛在網站下的應用程式部屬，網站根路徑就會帶有應用程式名稱\nlocalhost:7128/MyBlazorApp 部屬後，原先開發時的導向亂掉了，連靜態檔案/js/css載入也失敗\n因為部屬環境與開發環境差了一層應用程式名的關係\n專案設定 步驟1 : _Layout.cshtml\n找到 \u0026lt;base href=\u0026#34;~/\u0026#34;/\u0026gt; 改為 \u0026lt;base href=\u0026#34;/MyBlazorApp/\u0026#34;/\u0026gt; 步驟2 : Program.cs\napp.UsePathBase(\u0026#34;/MyBlazorApp\u0026#34;); //UseStaticFiles在上面加上 UseStaticFiles() 步驟3 : 開發環境預設啟動URL Properties/launchSettings.json\n\u0026#34;profiles\u0026#34;: { \u0026#34;MyBlazorApp\u0026#34;: { \u0026#34;commandName\u0026#34;: \u0026#34;Project\u0026#34;, \u0026#34;dotnetRunMessages\u0026#34;: true, \u0026#34;launchBrowser\u0026#34;: true, \u0026#34;applicationUrl\u0026#34;: \u0026#34;https://localhost:7128;http://localhost:5258\u0026#34;, \u0026#34;launchUrl\u0026#34;: \u0026#34;https://localhost:7128/MyBlazorApp\u0026#34;, //加上這行 \u0026#34;environmentVariables\u0026#34;: { \u0026#34;ASPNETCORE_ENVIRONMENT\u0026#34;: \u0026#34;Development\u0026#34; } } } IIS部屬設定 IIS部屬的名稱大小寫要一致，否則也會請求失敗\n其他  引入css script的相對路徑 開頭不加任何~/\nex: \u0026lt;script src=\u0026quot;js/jquery-3.6.3.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n \u0026lt;link href=\u0026quot;css/site.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; /\u0026gt; Razor Page 導向NavigateTo直接打元件名稱，不加/\nex:NavigationManager.NavigateTo(\u0026quot;Login\u0026quot;,true); 使用LocalRedirect 帶 ~/\nex: return LocalRedirect(\u0026quot;~/Login\u0026quot;); 若有另外建立Api要呼叫時\nURL= NavigationManager.BaseUri + \u0026quot;api/User/GetName\u0026quot;;  小結 要注意的點還蠻多的，可能有更好的辦法一勞永逸但還沒找到\n總而言之要注意開發環境與部屬環境的相對路徑關係\n參考連結   url1   ","date":"2023-04-20T15:19:02+08:00","permalink":"https://hushuuu.github.io/2023/04/20/blazor-server-iis%E9%83%A8%E5%B1%AC/","title":"Blazor Server Iis部屬"},{"content":"主要內容 建立文章範本指令\nhugo new post/XXX/XXX.md 編譯建置\nhugo server hugo server -D hugo -D 參考連結   url1   ","date":"2023-04-19T16:01:04+08:00","permalink":"https://hushuuu.github.io/2023/04/19/hugo%E7%99%BC%E6%96%87/","title":"Hugo發文"},{"content":"前言 在使用jquery datepicker的時候遇到了日期選單沒出現沒反應的問題\n原本以為是瀏覽器的關係。後來找到原因是選單產生的位置不對\n可能是瀏覽器的文字縮放比例或是系統的縮放造成\n主要內容 根據參考資料，只要在beforeShow加上自訂的判斷來計算偏移的offset\n即可解決此問題\nfunction setDatepickerPos(input, inst) { var rect = input.getBoundingClientRect(); // use \u0026#39;setTimeout\u0026#39; to prevent effect overridden by other scripts  setTimeout(function () { var scrollTop = $(\u0026#34;body\u0026#34;).scrollTop(); inst.dpDiv.css({ top: rect.top + input.offsetHeight + scrollTop }); }, 0); } $(\u0026#39;#MyDatepicker\u0026#39;).datepicker({ dateFormat: \u0026#34;yy-mm-dd\u0026#34;, changeMonth: true, changeYear: true, defaultDate: +0, inline: true, beforeShow: function (input, inst) { setDatepickerPos(input, inst) }, }); 小結 之後再另外整併將jquery datepicker包進vue的conpoment版本\n參考連結   url1   ","date":"2022-12-28T00:00:00Z","permalink":"https://hushuuu.github.io/2022/12/28/jquery-datepicker%E6%97%A5%E6%9C%9F%E9%81%B8%E5%96%AE%E6%B2%92%E5%87%BA%E7%8F%BE%E6%88%96%E6%B2%92%E5%8F%8D%E6%87%89/","title":"Jquery Datepicker日期選單沒出現或沒反應"},{"content":"前言 設定web.config允許站台訪問靜態檔案類型apk\n主要內容 在web.config底下找到此段增加或更新\n\u0026lt;system.webServer\u0026gt; \u0026lt;staticContent\u0026gt; \u0026lt;mimeMap fileExtension=\u0026#34;.apk\u0026#34; mimeType=\u0026#34;application / vnd.android.package-archive\u0026#34;/\u0026gt; \u0026lt;/staticContent\u0026gt; \u0026lt;/system.webServer\u0026gt; 參考連結   url1   ","date":"2022-12-19T16:01:15+08:00","permalink":"https://hushuuu.github.io/2022/12/19/iis-allow-download-apk/","title":"IIS Allow Download Apk"},{"content":"前言 使用Oracle function的時候，使用的方式的效能差異，先說結論是子查詢會快上許多。\n直接call function 舉例有一個function funcA傳入tableA表的col1,col2欄位比大小，左邊大回傳1否則2，找col2\u0026gt;col1的結果集\nselect * from tableA where funcA(col1,col2)=2 子查詢 select * from tableA where (select funcA(col1,col2) from dual)=2 效能 根據參考文章，可以加快效能的原因是，Oracle 會為 SELECT 出現的 Scalar Subquery (只傳回單一值的子查詢) 在記憶體建立一個 Hashtable，整理不同參數與查詢結果的對應表。若參數欄位值先前出現過，即可直接由 Hashtable 取值不用重新計算。\n參考連結   url1   ","date":"2022-12-18T17:50:19+08:00","permalink":"https://hushuuu.github.io/2022/12/18/oracle-function-select%E6%95%88%E8%83%BD/","title":"Oracle function select效能"},{"content":"主要內容 可將欲列印之內容，使用PrintDocument類別來列印出來\n需用繪圖的方式來繪製出結果\n建立Panel元件和PrintDocument 設定好Panel的畫面及內容後，也建立Bitmap物件並將Panel繪製為Bitmap\nvar tempPanel = panel1; var _NewBitmap = new Bitmap(tempPanel.Width, tempPanel.Height); tempPanel.DrawToBitmap(_NewBitmap, new Rectangle(0, 0, _NewBitmap.Width, _NewBitmap.Height)); //可設定使用的印表機名稱  //printDocument1.PrinterSettings.PrinterName = \u0026#34;\u0026#34;;  StandardPrintController spc = new StandardPrintController();//初始化列印控制器不跳列印中  printDocument1.PrintController = spc; this.printDocument1.Print();//  PrintDocument的PrintPage事件中繪製結果\nprivate void printDocument1_PrintPage(object sender, PrintPageEventArgs e) { e.Graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighSpeed;//品質  e.Graphics.DrawImage(_NewBitmap , 0, 0, _NewBitmap.Width , _NewBitmap.Height ); } 參考連結   url1   ","date":"2022-04-12T08:42:19+08:00","permalink":"https://hushuuu.github.io/2022/04/12/winform%E5%88%97%E5%8D%B0printdocument/","title":"WinForm列印PrintDocument"},{"content":"主要內容 專案下右鍵=\u0026gt;編輯專案檔\n//不重新編譯webconfig \u0026lt;!--防止 Web SDK 轉換檔案 web.config--\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;IsTransformWebConfigDisabled\u0026gt;true\u0026lt;/IsTransformWebConfigDisabled\u0026gt; \u0026lt;/PropertyGroup\u0026gt; //發行不覆蓋  \u0026lt;ItemGroup\u0026gt; \u0026lt;MsDeploySkipRules Include=\u0026#34;CustomSkipFolder\u0026#34;\u0026gt; \u0026lt;!--不覆蓋此目錄下的檔案--\u0026gt; \u0026lt;ObjectName\u0026gt;dirPath\u0026lt;/ObjectName\u0026gt; \u0026lt;AbsolutePath\u0026gt;wwwroot\\\\test\u0026lt;/AbsolutePath\u0026gt; \u0026lt;/MsDeploySkipRules\u0026gt; \u0026lt;/ItemGroup\u0026gt; ","date":"2022-03-03T10:38:39+08:00","permalink":"https://hushuuu.github.io/2022/03/03/netcore-%E5%B0%88%E6%A1%88%E6%AA%94%E8%A8%AD%E5%AE%9A/","title":"NetCore-專案檔設定"},{"content":"主要內容 一般不允許跨域的請求，若有前後端放在不同網域或特殊用途可用\n//startup.cs public void ConfigureServices(IServiceCollection services) { //Cors允許跨域原則  services.AddCors(options =\u0026gt; { options.AddPolicy(name: \u0026#34;CustomPolicy1\u0026#34;, //規則名稱  builder =\u0026gt; { builder //.AllowAnyOrigin()  .WithOrigins(\u0026#34;https://abc.com\u0026#34;)//不可有尾巴斜線  .AllowAnyHeader() //或特定header  .AllowAnyMethod(); }); }); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseRouting(); app.UseCors();//一定要在userouting和useendpoing之間 app.UseEndpoints(endpoints =\u0026gt; { endpoints.MapControllerRoute( name: \u0026#34;default\u0026#34;, pattern: \u0026#34;{controller=Home}/{action=Index}/{id?}\u0026#34;); }); } 掛載至Action\n////使用時只要掛Action上或Controller...等 [EnableCors(\u0026#34;CustomPolicy1\u0026#34;)] public ActionResult Post(){ } 小結 跨域請求測試用PostMan是測不出來的\n正確跨域請求回傳的header應會有Access-Control-Allow-Origin Access-Control-Allow-Origin: *則為全部\n","date":"2022-03-01T08:40:41+08:00","permalink":"https://hushuuu.github.io/2022/03/01/netcore%E8%99%95%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AB%8B%E6%B1%82/","title":"Netcore處理跨域請求"},{"content":"前言 使用Vuejs 2練習模板Component\n並處理jquery datepicker無法雙向綁定問題\n設計 偵測datepicker的onSelect事件來觸發元素的input監聽事件\n//註冊Component要在實例vue物件之前  Vue.component(\u0026#39;vue_date\u0026#39;, { template: \u0026#39;\u0026lt;input type=\u0026#34;text\u0026#34; v-datepicker class=\u0026#34;datepicker\u0026#34; :class=\u0026#34;inputclass\u0026#34; :value=\u0026#34;value\u0026#34; v-on:input=\u0026#34;update($event.target.value)\u0026#34;\u0026gt;\u0026#39;, directives: { datepicker: { inserted(el, binding, vNode) { $(el).datepicker({ autoclose: true, format: \u0026#39;yyyy-mm-dd\u0026#39;, onSelect: function (e) { //pick觸發  vNode.context.$emit(\u0026#39;input\u0026#39;, e); } }); } } }, props: { \u0026#39;value\u0026#39;: String, \u0026#34;inputclass\u0026#34;: { type: Object, default: function () { return { \u0026#34;form-control\u0026#34;: true } } }, \u0026#34;id\u0026#34;: String, }, methods: { update(v) { //input觸發  this.$emit(\u0026#39;input\u0026#39;, v); } } }) //vue instant  const vm = new Vue({ data() { return { mydate: \u0026#34;\u0026#34; } } }).$mount(\u0026#39;#vueDiv\u0026#39;);//掛載 實際在Html使用\n\u0026lt;vue_date v-model=\u0026#34;mydate\u0026#34;\u0026gt;\u0026lt;/vue_date\u0026gt; 參考連結   url1   ","date":"2022-02-26T14:25:43+08:00","permalink":"https://hushuuu.github.io/2022/02/26/vue-componentdatepicker/","title":"Vue Component(datepicker)"},{"content":"前言 使用Vuejs 2練習模板Component\n假設要設計bootstrap4彈窗的模板\nprop命名最好不要有大寫否則在html模板需要處理成- ex:foodSize=\u0026gt;food-size\n設計 設計template html\n\u0026lt;template id=\u0026#34;vue_modalTemplate\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal fade\u0026#34; tabindex=\u0026#34;-1\u0026#34; role=\u0026#34;dialog\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal-dialog\u0026#34; v-bind:class=\u0026#34;sizeClass\u0026#34; role=\u0026#34;document\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal-content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal-header\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;modal-title\u0026#34;\u0026gt;{{msg_title}}\u0026lt;/h5\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;modal-body\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;body\u0026#34;\u0026gt; {{msg_body}} \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-secondary\u0026#34; data-dismiss=\u0026#34;modal\u0026#34; v-on:click=\u0026#34;cancel_func\u0026#34;\u0026gt;{{cancel_text}}\u0026lt;/button\u0026gt; \u0026lt;button v-if=\u0026#34;submit_func\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; v-on:click=\u0026#34;submit_func\u0026#34;\u0026gt;{{submit_text}}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; //註冊Component要在實例vue物件之前 Vue.component(\u0026#39;vue_modal\u0026#39;, { template: \u0026#39;#vue_modalTemplate\u0026#39;, props: { \u0026#34;submit_func\u0026#34;: Function, \u0026#34;submit_text\u0026#34;: String, \u0026#34;msg_title\u0026#34;: { type: String, default: function () { return \u0026#34;訊息\u0026#34;; } }, \u0026#34;msg_body\u0026#34;: { type: String, default: function () { return \u0026#34;訊息主體\u0026#34; } }, \u0026#34;cancel_func\u0026#34;: {type: Function,default: function () { }}, \u0026#34;cancel_text\u0026#34;: { type: String, default: function () { return \u0026#34;關閉\u0026#34;; } }, \u0026#34;sizeClass\u0026#34;: { type: Object, default: function () { return {};}}//:size-class=\u0026#34;{\u0026#39;modal-lg\u0026#39;:true}\u0026#34; 大的modal  } }); const VueMessage = new Vue({ data: function () { return { common_msg_title: \u0026#34;訊息\u0026#34;, common_msg_body: \u0026#34;\u0026#34;, } }, methods: { show(msg) { this.common_msg_body = msg; $(\u0026#34;#common_msg_modal\u0026#34;).modal(\u0026#39;show\u0026#39;); } } }).$mount(\u0026#34;#msgVueDiv\u0026#34;) 實際在Html使用\n\u0026lt;vue_modal id=\u0026#34;common_msg_modal\u0026#34; :msg_title=\u0026#34;common_msg_title\u0026#34; :msg_body=\u0026#34;common_msg_body\u0026#34;\u0026gt; \u0026lt;/vue_modal\u0026gt; 只要在js呼叫vue實例中的showMsg方法就能叫出訊息視窗\nVueMessage.showMsg(\u0026#39;標題\u0026#39;,\u0026#39;訊息內容\u0026#39;); 傳遞進子元件 若將input tag也包成子元件(尚未修正完成)\n//Component Vue.component(\u0026#39;inputcomponent\u0026#39;, { template: \u0026#39;#inputTemplate\u0026#39;, props: { \u0026#34;fieldobj\u0026#34;: Array, //定義輸入欄位的名稱類型甚至對應下拉來源  \u0026#34;childobj\u0026#34;: { //子元件綁定  type: Object, default: function () { return {} } } }, watch: { childobj: { //監聽這屬性有異動  deep: true, //若是監聽物件這種call by ref的要設定深層  handler(val) { //(newValue,oldValue)  this.$emit(\u0026#39;update\u0026#39;, val); //從下要呼叫上的事件用emit  //此處呼叫inputcomponent綁定的update事件  } } } }); //Vue 實例 const vm = new Vue({ data() { return { fieldObj: [ //假設三個input欄位屬性有一個下拉式 來源也定義好  { fieldname: \u0026#34;contact_addr\u0026#34;, fieldtype: \u0026#34;text\u0026#34;, }, { fieldname: \u0026#34;contact_tel\u0026#34;, fieldtype: \u0026#34;number\u0026#34;, }, { fieldname: \u0026#34;take_kind\u0026#34;, fieldtype: \u0026#34;select\u0026#34;, optionlist: [{ \u0026#34;Text\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;Value\u0026#34;: 0 }, { \u0026#34;Text\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;Value\u0026#34;: 1 } ] } ], childobj: { }, //  objFromChild: {}, //從子元件傳過來的  common_msg_title: \u0026#34;\u0026#34;, common_msg_body:\u0026#34;\u0026#34;, } }, methods: { submitEdit: function () { console.log(\u0026#34;\u0026#34;); }, updateInfo(val) { //this.$set(this.objFromChild, idx, val);  this.objFromChild = val; }, } }).$mount(\u0026#39;#vueDiv\u0026#39;); \u0026lt;template id=\u0026#34;inputTemplate\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div v-for=\u0026#34;obj in fieldobj\u0026#34; class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group-prepend\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-text\u0026#34;\u0026gt;{{obj.fieldname}}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input v-if=\u0026#34;obj.fieldtype!=\u0026#39;select\u0026#39;\u0026#34; v-bind:type=\u0026#34;obj.fieldtype\u0026#34; class=\u0026#34;form-control\u0026#34; :name=\u0026#34;obj.fieldname\u0026#34; v-model=\u0026#34;childobj[obj.fieldname]\u0026#34;\u0026gt; \u0026lt;select v-if=\u0026#34;obj.fieldtype==\u0026#39;select\u0026#39;\u0026#34; class=\u0026#34;form-control\u0026#34; v-model=\u0026#34;childobj[obj.fieldname]\u0026#34;\u0026gt; \u0026lt;option v-for=\u0026#34;item in obj.optionlist\u0026#34; v-bind:value=\u0026#34;item.Value\u0026#34;\u0026gt; {{item.Text}} \u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;vue_modal id=\u0026#34;log-2\u0026#34; :submit_func=\u0026#34;submitEdit\u0026#34; :submit_text=\u0026#34;\u0026#39;提交\u0026#39;\u0026#34; :msg_title=\u0026#34;\u0026#39;提交資料\u0026#39;\u0026#34;\u0026gt; \u0026lt;span slot=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;div slot=\u0026#34;body\u0026#34;\u0026gt; \u0026lt;inputcomponent :fieldobj=\u0026#34;fieldObj\u0026#34; v-bind=\u0026#34;childobj\u0026#34; @@update=\u0026#34;updateInfo\u0026#34;\u0026gt; \u0026lt;/inputcomponent\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/vue_modal\u0026gt; \u0026lt;component v-bind=\u0026quot;childobj\u0026quot;\u0026gt;\u0026lt;/component\u0026gt;可綁定並解構 vm的fieldObj被綁進子元件的fieldobj prop\n小結 slot 若在呼叫component沒有特別寫則會帶預設的 slot 寫的變數都為父的變數，子元件不牽涉進slot區塊 注意子元件和父元件最好不要雙向綁定，多個子元件改到同一個父實例物件可能會錯亂\n利用prop傳入元件 emit事件傳出來個別處理\n參考連結   url1 url2   ","date":"2022-02-25T14:25:43+08:00","permalink":"https://hushuuu.github.io/2022/02/25/vue-componentmodal/","title":"Vue Component(modal)"},{"content":"主要內容 NetCore在取得\n//預設Startup已有注入Configuration public IConfiguration Configuration { get; } public IWebHostEnvironment _env { get; set; } public Startup(IConfiguration configuration, IWebHostEnvironment env) { Configuration = configuration; _env = env; } //一般取值 _config.GetValue\u0026lt;string\u0026gt;(\u0026#34;AAAAA\u0026#34;); 強型別取得 AppSetting.cs建立靜態類別\npublic static class AppSetting { private static IConfiguration config; public static void Initialize(IConfiguration Configuration) { config = Configuration; } private static string GetAppSettings(string name) { return config.GetValue\u0026lt;string\u0026gt;(name); } #region 平台相關設定  /// \u0026lt;summary\u0026gt;  /// log 保留天數  /// \u0026lt;/summary\u0026gt;  public static int LogExistDays { get { int days = 7; int.TryParse(GetAppSettings(\u0026#34;LogExistDays\u0026#34;), out days); return days; } } /// \u0026lt;summary\u0026gt;  /// 是否啟用web request log  /// \u0026lt;/summary\u0026gt;  public static bool IsRequestLog_ForWeb { get { bool enable = false; string tmp = GetAppSettings(\u0026#34;IsRequestLog_WEB\u0026#34;); if (!string.IsNullOrEmpty(tmp) \u0026amp;\u0026amp; !bool.TryParse(tmp, out enable)) { enable = tmp == \u0026#34;Y\u0026#34; ? true : false; } return enable; } } #endregion  } 在Startup裡面注入\npublic void ConfigureServices(IServiceCollection services) { AppSetting.Initialize(Configuration); } ","date":"2022-02-17T09:45:19+08:00","permalink":"https://hushuuu.github.io/2022/02/17/netcore%E4%BD%BF%E7%94%A8appsetting/","title":"NetCore使用Appsetting"},{"content":"主要內容 建立類別繼承JsonConverter來掛在要轉換的屬性上\npublic class OnlyDateConverter : JsonConverter\u0026lt;DateTime\u0026gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { //Debug.Assert(typeToConvert == typeof(DateTime));  return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(\u0026#34;yyyy-MM-dd\u0026#34;)); } } public class DateWithTimeConverter : JsonConverter\u0026lt;DateTime\u0026gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;)); } } 掛載至屬性\n////使用時只要掛在想要轉換的屬性上 /// \u0026lt;summary\u0026gt; /// 日期 /// \u0026lt;/summary\u0026gt; [JsonConverter(typeof(OnlyDateConverter))] public DateTime? date { get; set; } [JsonConverter(typeof(DateWithTimeConverter))] public DateTime? date2 { get; set; } 轉換時設定\nJsonSerializerOptions options = new JsonSerializerOptions(); options.Converters.Add(new OnlyDateConverter()); return Json(obj2, options); startup設定 注意這設定只會影響到Controller.Json retrun 除了日期轉換，順便處理會被轉小寫+中文字被編碼的問題\n//JSON預設修改 services.AddMvc() .AddJsonOptions(options =\u0026gt; { //原本是 JsonNamingPolicy.CamelCase，強制頭文字轉小寫，我偏好維持原樣，設為null  options.JsonSerializerOptions.PropertyNamingPolicy = null; //允許基本拉丁英文及中日韓文字維持原字元  options.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.BasicLatin, UnicodeRanges.CjkUnifiedIdeographs); //datetime 預設處理只有日期  options.JsonSerializerOptions.Converters.Add(new OnlyDateConverter()); }); 掛載轉換器的優先順序\n1.[JsonConverter] 套用至屬性。\n2.加入至集合的轉換器 Converters 。\n3.[JsonConverter] 套用至自訂實數值型別或 POCO。\n4.如果在集合中註冊了某個類型的多個自訂轉換器 Converters ，則會使用第一個傳回 true 的轉換器 CanConvert 。\n小結 net core預設使用的Text.Json據說比較輕量但使用上起來得設定一些設定才能用的順手\n若是手動呼叫JsonSerializer不會吃到startup的設定，必須自行給option或擴充共用\n參考連結   url1 url2 url3   ","date":"2022-02-17T08:40:41+08:00","permalink":"https://hushuuu.github.io/2022/02/17/text.json-%E5%AE%A2%E8%A3%BDjsonconverter/","title":"Text.Json 客製JsonConverter"},{"content":"前言 設定Richmenu的API網址有換過。紀錄一下操作流程\n增加圖文選單 POST https://api.line.me/v2/bot/richmenu Authorization: Bearer {channel access token} Content-Type: application/json 成功結果回傳\u0026#34;richMenuId\u0026#34;: \u0026#34;{rich menu id}\u0026#34; Json Content Example\n{ \u0026#34;size\u0026#34;: { \u0026#34;width\u0026#34;: 2500, \u0026#34;height\u0026#34;: 843 }, \u0026#34;selected\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;richmenu-tsai\u0026#34;, \u0026#34;chatBarText\u0026#34;: \u0026#34;選單1\u0026#34;, \u0026#34;areas\u0026#34;: [ { \u0026#34;bounds\u0026#34;: { \u0026#34;x\u0026#34;: 0, \u0026#34;y\u0026#34;: 0, \u0026#34;width\u0026#34;: 833, \u0026#34;height\u0026#34;: 843 }, \u0026#34;action\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;message\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;指令\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;指令\u0026#34; } }, { \u0026#34;bounds\u0026#34;: { \u0026#34;x\u0026#34;: 833, \u0026#34;y\u0026#34;: 0, \u0026#34;width\u0026#34;: 833, \u0026#34;height\u0026#34;: 843 }, \u0026#34;action\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;uri\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;google\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;www.google.com\u0026#34; } }, { \u0026#34;bounds\u0026#34;: { \u0026#34;x\u0026#34;: 1666, \u0026#34;y\u0026#34;: 0, \u0026#34;width\u0026#34;: 833, \u0026#34;height\u0026#34;: 843 }, \u0026#34;action\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;uri\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;yahoo\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;www.yahoo.com.tw\u0026#34; } } ] } 設定圖文選單的圖片 POST https://api-data.line.me/v2/bot/richmenu/{rich menu id}/content Authorization: Bearer {channel access token} 設定預設的圖文選單 POST https://api.line.me/v2/bot/user/all/richmenu/{rich menu id}\n刪除圖文選單 DELETE https://api.line.me/v2/bot/richmenu/{rich menu id}\n參考連結   url1   ","date":"2022-02-11T16:49:51+08:00","permalink":"https://hushuuu.github.io/2022/02/11/linebot-api-%E8%A8%AD%E5%AE%9A%E5%9C%96%E6%96%87%E9%81%B8%E5%96%AE/","title":"Linebot Api 設定圖文選單"},{"content":"前言 找出每個Input元素並串好值可以拿來提交表單或是ajax post\n主要內容 常用input tag \u0026lt;form method=\u0026#34;post\u0026#34; id=\u0026#34;queryForm\u0026#34; action=\u0026#34;\u0026#34;\u0026gt; @Html.AntiForgeryToken() \u0026lt;input type=\u0026#34;color\u0026#34; name=\u0026#34;color\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;1\u0026#34; name=\u0026#34;chks[0]\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;2\u0026#34; name=\u0026#34;chks[1]\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; name=\u0026#34;rng\u0026#34; /\u0026gt; \u0026lt;select multiple name=\u0026#34;selects\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;A\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;B\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;3\u0026#34;\u0026gt;C\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;rdo\u0026#34; value=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;rdo\u0026#34; value=\u0026#34;20\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;rdo\u0026#34; value=\u0026#34;30\u0026#34; /\u0026gt; \u0026lt;textarea name=\u0026#34;textarea\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;ppTobk();\u0026#34;\u0026gt;submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; 共用method /** * 將值集合轉成物件 * @@param paras 值集合 */ function paras_to_object(paras) { let obj = {}; for (let i = 0; i \u0026lt; paras.length; i++) { json_data[paras[i].name] = paras[i].val; } return obj; } /** * 將input值串好form接的格式 * @@param jqselector jq選擇器字串 */ function form_get_paras(jqselector) { let paras = []; $(jqselector).each(function () { $(this).find(\u0026#39;input,textarea\u0026#39;).each(function () { let typ = $(this).attr(\u0026#39;type\u0026#39;); if (typ == \u0026#34;checkbox\u0026#34; || typ == \u0026#34;radio\u0026#34;) { if ($(this).prop(\u0026#39;checked\u0026#39;)) { let p = { name: $(this).attr(\u0026#39;name\u0026#39;), val: $(this).val() }; if (p.name) { paras.push(p); } } } else if (typ == \u0026#34;file\u0026#34; || typ == \u0026#34;image\u0026#34;) { } else { if ($(this).val() \u0026amp;\u0026amp; $(this).attr(\u0026#39;name\u0026#39;)) { let p = { name: $(this).attr(\u0026#39;name\u0026#39;), val: $(this).val() }; paras.push(p); } } }); $(this).find(\u0026#39;select\u0026#39;).each(function () { if ($(this).attr(\u0026#39;multiple\u0026#39;) == \u0026#34;multiple\u0026#34;) { let valarr = $(this).val(); for (let i = 0; i \u0026lt; valarr.length; i++) { let p = { name: $(this).attr(\u0026#39;name\u0026#39;) + \u0026#34;[\u0026#34; + i + \u0026#34;]\u0026#34;, val: valarr[i] }; if (p.name) { paras.push(p); } } } else { let p = { name: $(this).attr(\u0026#39;name\u0026#39;), val: $(this).val() }; if (p.name) { paras.push(p); } } }) }); return paras; } /** * insert hidden inputs to form * @@param tmpform 傳入Form * @@param paras 參數array */ function form_ins_inputs(tmpform, paras) { for (let i = 0; i \u0026lt; paras.length; i++) { let hideInput = document.createElement(\u0026#34;input\u0026#34;); hideInput.type = \u0026#34;hidden\u0026#34;; hideInput.name = paras[i].name;//傳入引數名  hideInput.value = paras[i].val;//傳入資料  tmpform.appendChild(hideInput); } } /** * 開新窗POST * @@param url 網址 * @@param name 自定義一個name * @@param jqselector 抓參數的jq選擇 */ function openPostWindow(url, name, jqselector) { var tempForm = document.createElement(\u0026#34;form\u0026#34;); tempForm.id = \u0026#34;tempForm1\u0026#34;; tempForm.method = \u0026#34;post\u0026#34;; tempForm.action = url; //url  tempForm.target = name; let paras = form_get_paras(jqselector); form_ins_inputs(tempForm, paras); tempForm.addEventListener(\u0026#39;onsubmit\u0026#39;, function () { openWindow(name); }) document.body.appendChild(tempForm); //手動submit form  tempForm.submit(); document.body.removeChild(tempForm); function openWindow(name) { window.open(\u0026#39;about:blank\u0026#39;, name); } } 提交 Sumbit\nlet $form = $(\u0026#39;#queryForm\u0026#39;); $form.attr(\u0026#39;action\u0026#39;, \u0026#34;\u0026#34;); //$form.attr(\u0026#39;action\u0026#39;, url).attr(\u0026#39;target\u0026#39;, \u0026#39;_blank\u0026#39;); //new window $form.submit(); Open Window Submit\nfunction ppTobk() { openPostWindow(\u0026#39;@Url.Action(\u0026#34;TestPost\u0026#34;)\u0026#39;, \u0026#39;pppp\u0026#39;, \u0026#39;#queryForm\u0026#39;); } Ajax Post\n\u0026lt;form id=\u0026#34;__AjaxAntiForgeryForm\u0026#34; action=\u0026#34;#\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt;@Html.AntiForgeryToken()\u0026lt;/form\u0026gt; var AddAntiForgeryToken = function (data) { data.__RequestVerificationToken = $(\u0026#39;#__AjaxAntiForgeryForm input[name=__RequestVerificationToken]\u0026#39;).val(); return data; //CSRF }; function ppTobk() { let paras_data = paras_to_object(form_get_paras(\u0026#34;#queryForm\u0026#34;)); $.ajax({ type: \u0026#34;post\u0026#34;, url: \u0026#39;\u0026#39;, data: AddAntiForgeryToken(paras_data), success: function (response) { // ....  console.log(\u0026#34;OK\u0026#34;); } }); } 小結 ","date":"2022-01-26T16:49:44+08:00","permalink":"https://hushuuu.github.io/2022/01/26/%E6%89%BE%E5%87%BAform-input%E5%85%83%E7%B4%A0%E4%B8%A6%E8%99%95%E7%90%86%E5%80%BC%E9%9B%86%E5%90%88/","title":"找出form input元素並處理值集合"},{"content":"前言 為了防止CSRF攻擊，再提交表單時通常會使用AntiForgeryToken\n但在使用Ajax Post時也要注意\n主要內容 可以在頁面上藏一個有token的form\n\u0026lt;form id=\u0026#34;__AjaxAntiForgeryForm\u0026#34; action=\u0026#34;#\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt;@Html.AntiForgeryToken()\u0026lt;/form\u0026gt; 再post之前將token塞進去。\nvar AddAntiForgeryToken = function (data) { data.__RequestVerificationToken = $(\u0026#39;#__AjaxAntiForgeryForm input[name=__RequestVerificationToken]\u0026#39;).val(); return data; }; $.ajax({ type: \u0026#34;post\u0026#34;, url: \u0026#39;\u0026#39;, data: AddAntiForgeryToken({id:\u0026#34;1\u0026#34;}), success: function (response) { // ....  } }); 參考連結   url1   ","date":"2022-01-26T16:39:45+08:00","permalink":"https://hushuuu.github.io/2022/01/26/csrf-antiforgerytokenajax/","title":"CSRF-AntiForgeryToken(ajax)"},{"content":"前言 包含環境參數，Regedit內機碼，一併刪除。\n版本為19c\n關閉服務 Services 和Oracle相關服務都關閉\nUniversal Installer解除安裝或是在19cs內deinstall \negedit刪除Oracle開頭的項目 HKEY_LOCAL_MACHINE\\SOFTWARE\\ HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services \nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\ HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Oracle*\n刪除環境變數 ORACLE_HOME，TNS_ADMIN，NLS_LANG\n刪除C槽Oracle相關目錄 Program Files\\，Program Files(x86)\\，ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\ \n重新開機 重新開機\n參考連結   url1 url2   ","date":"2021-11-23T15:07:03+08:00","permalink":"https://hushuuu.github.io/2021/11/23/%E5%AE%8C%E6%95%B4%E5%88%AA%E9%99%A4oracle/","title":"完整刪除Oracle"},{"content":"主要內容 using System.Drawing; using System.Drawing.Imaging; using ZXing; // for BarcodeWriter using ZXing.QrCode; // for QRCode Engine using System.IO; //////圖片用ViewBag傳回base64格式 var writer = new BarcodeWriter //dll裡面可以看到屬性 { Format = BarcodeFormat.QR_CODE, Options = new QrCodeEncodingOptions //設定大小  { Height = 200, Width = 200, } }; //產生QRcode var img = writer.Write(\u0026#34;www.google.com\u0026#34;); Bitmap myBitmap = new Bitmap(img); MemoryStream ms = new MemoryStream(); myBitmap.Save(ms, ImageFormat.Jpeg); byte[] arr = new byte[ms.Length]; ms.Position = 0; ms.Read(arr, 0, (int)ms.Length); ms.Close(); string base64str = Convert.ToBase64String(arr); ViewBag.IMG = base64str; ","date":"2021-10-21T14:57:01+08:00","permalink":"https://hushuuu.github.io/2021/10/21/%E7%94%A2%E7%94%9Fqr-code/","title":"產生QR Code"},{"content":"前言 MVC回傳的ActionResult\n可以用繼承他的JsonResult來回傳\n使用return Json(obj) 會將物件序列化後回傳至前端。\n但型別為Datetime會拿到Date(12347838383333)格式之資料\n處理方式有三種\n JS處理轉回日期格式 自訂回傳的JsonResult 用JsonConvert並套上轉換屬性  Javascript use FormatDate(\u0026ldquo;Date(12347838383333)\u0026quot;,true) ture則顯示時間\nfunction FormatDate (str, withTime) {//格式化後端傳回的date資料  var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i \u0026lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i \u0026lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ? ar_date.join(`-`) + \u0026#34; \u0026#34; + ar_time.join(`: `) : ar_date.join(`-`); function dFormat(i) { return i \u0026lt; 10 ? \u0026#34;0\u0026#34; + i.toString() : i; } } 自訂JsonResult public class CustomJsonResult : JsonResult { public CustomJsonResult(bool hasTime=false) { _hasTime = hasTime; if (_hasTime) { _dateFormat = \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;; } else { _dateFormat = \u0026#34;yyyy-MM-dd\u0026#34;; } } private bool _hasTime; private string _dateFormat; public override void ExecuteResult(ControllerContext context) { if (context == null) { throw new ArgumentNullException(\u0026#34;context\u0026#34;); } HttpResponseBase response = context.HttpContext.Response; if (!String.IsNullOrEmpty(ContentType)) { response.ContentType = ContentType; } else { response.ContentType = \u0026#34;application/json\u0026#34;; } if (ContentEncoding != null) { response.ContentEncoding = ContentEncoding; } if (Data != null) { // Using Json.NET serializer  var isoConvert = new IsoDateTimeConverter(); isoConvert.DateTimeFormat = _dateFormat; response.Write(JsonConvert.SerializeObject(Data, isoConvert)); } } } //使用時傳入true則表示顯示時間 return new CustomJsonResult(false)) { Data = list }; 定義模型中套上JsonConvert轉換 若用JsonConvert來序列化日期原本是會得到2009-02-15T00:00:00Z之格式\n可自定義轉換格式。\npublic class DateConverter : IsoDateTimeConverter { public DateConverter() { base.DateTimeFormat = \u0026#34;yyyy-MM-dd\u0026#34;; } } public class XXX { public string Id { get; set; } [Newtonsoft.Json.JsonConverter(typeof(DateConverter))] public DateTime doc_date { get; set; } } 將物件序列化時，套上DateConvert的屬性會根據設定的格式轉換。\n回傳Content並設定Content-type為json\nstring jsonstr = JsonConvert.SerializeObject(list); return Content(jsonstr, \u0026#34;application/json\u0026#34;); 參考連結   url1 url2   ","date":"2021-10-13T15:56:04+08:00","permalink":"https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/","title":"JsonResult JsonConvert與日期Datetime"},{"content":"Closure 閉包 和作用域有關係，可用來避免變數汙染\n或讓變數不被隨意存取改變\n用jQuery可簡易達成\n$(function(){ //do your coding }); $(document).ready(function(){ }); 轉千分位 /** * 轉千分位 * @param {any} num */ function toCurrency(num) { var parts = num.toString().split(\u0026#39;.\u0026#39;); parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \u0026#39;,\u0026#39;); return parts.join(\u0026#39;.\u0026#39;); } Date擴充 //增加日期 Date.prototype.addDays = function (days) { var date = new Date(this.valueOf()); date.setDate(date.getDate() + days); return date; } //轉為yyyy-MM-dd Date.prototype.toInputString = function () { let date = new Date(this.valueOf()); return date.toISOString().split(\u0026#39;T\u0026#39;)[0]; } ","date":"2021-10-13T14:53:29+08:00","permalink":"https://hushuuu.github.io/2021/10/13/js-note/","title":"Js Note"},{"content":"v3版本 增加一個li後atag觸發子選單ul submenu\n\u0026lt;div class=\u0026#34;navbar-collapse collapse\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;選單2\u0026lt;b class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;次選單2\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34;\u0026gt;次次選單3\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;次次次選單1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; /*多層下拉選單設定*/ .dropdown-submenu { position: relative; } .dropdown-submenu \u0026gt; .dropdown-menu { top: 0; left: 100%; margin-top: -6px; margin-left: -1px; -webkit-border-radius: 0 6px 6px 6px; -moz-border-radius: 0 6px 6px 6px; border-radius: 0 6px 6px 6px; } .dropdown-submenu:hover \u0026gt; .dropdown-menu { display: block; } .dropdown-submenu \u0026gt; a:after { display: block; content: \u0026#34; \u0026#34;; float: right; width: 0; height: 0; border-color: transparent; border-style: solid; border-width: 5px 0 5px 5px; border-left-color: #cccccc; margin-top: 5px; margin-right: -10px; } .dropdown-submenu:hover \u0026gt; a:after { border-left-color: #ffffff; } .dropdown-submenu.pull-left { float: none; } v4版本 \u0026lt;nav class=\u0026#34;navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-collapse collapse d-sm-inline-flex justify-content-between\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav flex-grow-1\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34; dropdown-toggle nav-link text-dark\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;menu\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Submenu\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Submenu0\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;dropdown-item dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Submenu 1\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Subsubmenu1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Subsubmenu1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;dropdown-item dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Submenu 2\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Subsubmenu2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Subsubmenu2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; .navbar-nav li:hover \u0026gt; ul.dropdown-menu { display: block; } .dropdown-submenu { position: relative; } .dropdown-submenu \u0026gt; .dropdown-menu { top: 0; left: -97%; /*從左邊展出*/ margin-top: -6px; } /* rotate caret on hover */ .dropdown-menu \u0026gt; li \u0026gt; a:hover:after { text-decoration: underline; transform: rotate(-90deg); } .dropdown-submenu \u0026gt; a { color: #212529; text-decoration: none; } ","date":"2021-10-13T09:32:14+08:00","permalink":"https://hushuuu.github.io/2021/10/13/bootstrap-navbar-menu/","title":"Bootstrap Navbar Menu"},{"content":"前言 Webservice有點像是Web API的前身\n如果了解Web API的原理很快就能上手\n建立 VisualStudio開新專案-\u0026gt;web應用程式-\u0026gt;空的專案\n加入-\u0026gt;新增項目-\u0026gt;Web服務-\u0026gt;.asmx檔案\n建立的檔案會預設給一個HelloWorld的Method\n/// \u0026lt;summary\u0026gt;  ///WebService1 的摘要描述  /// \u0026lt;/summary\u0026gt; [WebService(Namespace = \u0026#34;http://tempuri.org/\u0026#34;)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] // 若要允許使用 ASP.NET AJAX 從指令碼呼叫此 Web 服務，請取消註解下列一行。  // [System.Web.Script.Services.ScriptService]  public class WebService1 : System.Web.Services.WebService { [WebMethod] public string HelloWorld(string name) { return \u0026#34;Hello World \u0026#34; + name; } } 專案建置起來並到此asmx頁面\n可見到此Webservice的資訊\n點進HelloWorld Method後可見呼叫的格式\n其中的\u0026lt;name\u0026gt;\u0026lt;/name\u0026gt;就是我們要傳入的參數\nPOST /WebService1.asmx HTTP/1.1 Host: localhost Content-Type: text/xml; charset=utf-8 Content-Length: length SOAPAction: \u0026#34;http://tempuri.org/HelloWorld\u0026#34; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;soap:Envelope xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; xmlns:soap=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt; \u0026lt;soap:Body\u0026gt; \u0026lt;HelloWorld xmlns=\u0026#34;http://tempuri.org/\u0026#34;\u0026gt; \u0026lt;name\u0026gt;string\u0026lt;/name\u0026gt; \u0026lt;/HelloWorld\u0026gt; \u0026lt;/soap:Body\u0026gt; \u0026lt;/soap:Envelope\u0026gt; PostMan 首先介紹如何用PostMan來呼叫剛剛建立的WebService\n1.Post的Url是建置運行後的asmx網址https://localhost:44370/WebService1.asmx\n2.Header的設定照著asmx頁的資訊設定如Content-Type:text/xml; charset=utf-8，Host: localhost，SOAPAction: \u0026quot;http://tempuri.org/HelloWorld\u0026quot;\n3.Body貼上整段xml範本並填上參數的部分，格式選XML\n4.Send Request後成功後正常也會得到XML格式的回應\n加入服務參考 另一個方式為在需要Call web service的專案下加入服務參考\n1.專案加入-\u0026gt;服務參考\n2.位址填入asmx網址https://localhost:44370/WebService1.asmx\n3.命名空間ServiceReference1可修改\n4.確定加入後專案的Connected Services就會增加\nServiceReference1.WebService1SoapClient client = new ServiceReference1.WebService1SoapClient(); string rs = client.HelloWorld(\u0026#34;kevin\u0026#34;); //rs = Hello World kevin ","date":"2021-10-04T17:09:11+08:00","permalink":"https://hushuuu.github.io/2021/10/04/webservice-%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%91%BC%E5%8F%AB/","title":"WebService 建立和呼叫"},{"content":"主要內容 建立DynamicInvokeWebservice.cs\npublic class DynamicInvokeWebservice { public DynamicInvokeWebservice() { //  // TODO: 在此加入建構函式的程式碼  //  } static SortedList\u0026lt;string, Type\u0026gt; _typeList = new SortedList\u0026lt;string, Type\u0026gt;(); #region InvokeWebService  static string GetCacheKey(string url, string className) { return url.ToLower() + className; } static Type GetTypeFromCache(string url, string className) { string key = GetCacheKey(url, className); foreach (KeyValuePair\u0026lt;string, Type\u0026gt; pair in _typeList) { if (key == pair.Key) { return pair.Value; } } return null; } static Type GetTypeFromWebService(string url, string className) { string @namespace = \u0026#34;EnterpriseServerBase.WebService.DynamicWebCalling\u0026#34;; if ((className == null) || (className == \u0026#34;\u0026#34;)) { className = GetWsClassName(url); } //获取WSDL  WebClient wc = new WebClient(); Stream stream = wc.OpenRead(url + \u0026#34;?WSDL\u0026#34;); ServiceDescription sd = ServiceDescription.Read(stream); ServiceDescriptionImporter sdi = new ServiceDescriptionImporter(); sdi.AddServiceDescription(sd, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;); CodeNamespace cn = new CodeNamespace(@namespace); //生成客户端代理类代码  CodeCompileUnit ccu = new CodeCompileUnit(); ccu.Namespaces.Add(cn); sdi.Import(cn, ccu); //CSharpCodeProvider csc = new CSharpCodeProvider();  //ICodeCompiler icc = 因; -\u0026gt; 已過時  CodeDomProvider provider = CodeDomProvider.CreateProvider(\u0026#34;CSharp\u0026#34;); //设定编译参数  CompilerParameters cplist = new CompilerParameters(); cplist.GenerateExecutable = false; cplist.GenerateInMemory = true; cplist.ReferencedAssemblies.Add(\u0026#34;System.dll\u0026#34;); cplist.ReferencedAssemblies.Add(\u0026#34;System.XML.dll\u0026#34;); cplist.ReferencedAssemblies.Add(\u0026#34;System.Web.Services.dll\u0026#34;); cplist.ReferencedAssemblies.Add(\u0026#34;System.Data.dll\u0026#34;); //编译代理类  //CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu); -\u0026gt; 因為csc.CreateCompiler()已過時  CompilerResults cr = provider.CompileAssemblyFromDom(cplist, ccu); if (true == cr.Errors.HasErrors) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors) { sb.Append(ce.ToString()); sb.Append(System.Environment.NewLine); } throw new Exception(sb.ToString()); } //生成代理实例，并调用方法  System.Reflection.Assembly assembly = cr.CompiledAssembly; Type t = assembly.GetType(@namespace + \u0026#34;.\u0026#34; + className, true, true); return t; } /// \u0026lt;summary\u0026gt;  /// 动态调用web服务  /// timeout: 5分鐘  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;methodName\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;args\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  public static object InvokeWebService(string url, string methodName, object[] args) { return InvokeWebService(url, null, methodName, args, 300000); } /// \u0026lt;summary\u0026gt;  /// 动态调用web服务  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;methodName\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;args\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;timeout\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  public static object InvokeWebService(string url, string methodName, object[] args, int? timeout) { return InvokeWebService(url, null, methodName, args, timeout); } public static object InvokeWebService(string url, string className, string methodName, object[] args, int? timeout) { try { Type t = GetTypeFromCache(url, className); if (t == null) { t = GetTypeFromWebService(url, className); //添加到缓冲中  string key = GetCacheKey(url, className); _typeList.Add(key, t); } object obj = Activator.CreateInstance(t); MethodInfo mi = t.GetMethod(methodName); if (mi == null) { throw new Exception(\u0026#34;沒有WS:\u0026#34; + methodName); } if (timeout.HasValue) { //增加以下設定timeout時間  PropertyInfo propInfo = obj.GetType().GetProperty(\u0026#34;Timeout\u0026#34;); propInfo.SetValue(obj, timeout, null); } return mi.Invoke(obj, args); } catch (Exception ex) { //throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace));  throw ex; } } private static string GetWsClassName(string wsUrl) { string[] parts = wsUrl.Split(\u0026#39;/\u0026#39;); string[] pps = parts[parts.Length - 1].Split(\u0026#39;.\u0026#39;); return pps[0]; } #endregion  } 使用 基本上直接調用InvokeWebService方法即可\nvar url = \u0026#34;Webservice的網址\u0026#34;; var methodName = \u0026#34;HellWorld\u0026#34;; //參數照定義的method順序傳入 List\u0026lt;string\u0026gt; args = new List\u0026lt;string\u0026gt;(); args.Add(\u0026#34;123456\u0026#34;); args.Add(\u0026#34;asdfg\u0026#34;); var obj = DynamicInvokeWebservice.InvokeWebService(url, methodName, args.ToArray()); ","date":"2021-10-04T14:38:32+08:00","permalink":"https://hushuuu.github.io/2021/10/04/%E5%8B%95%E6%85%8B%E8%AA%BF%E7%94%A8webservice/","title":"動態調用Webservice"},{"content":"前言 一般用window.open開窗傳遞參數常用get方式在url後方串接參數\n若想用post方式，則在開窗前模擬form submit post\n並在onsubmit前open。\n主要內容 function openPostWindow(url, name, val1, val2) { var tempForm = document.createElement(\u0026#34;form\u0026#34;); tempForm.id = \u0026#34;tempForm1\u0026#34;; tempForm.method = \u0026#34;post\u0026#34;; tempForm.action = url; //url  tempForm.target = name; let hideInput = document.createElement(\u0026#34;input\u0026#34;); hideInput.type = \u0026#34;hidden\u0026#34;; hideInput.name = \u0026#34;val1\u0026#34;;//傳入引數名  hideInput.value = val1;//傳入資料  tempForm.appendChild(hideInput); let hideInput2 = document.createElement(\u0026#34;input\u0026#34;); hideInput2.type = \u0026#34;hidden\u0026#34;; hideInput2.name = \u0026#34;val2\u0026#34;; hideInput2.value = val2; tempForm.appendChild(hideInput2); tempForm.addEventListener(\u0026#39;onsubmit\u0026#39;, function () { openWindow(name);}) document.body.appendChild(tempForm); //手動submit form  tempForm.submit(); document.body.removeChild(tempForm); } function openWindow(name) { window.open(\u0026#39;about:blank\u0026#39;, name); //window.open(strUrl, strWindowName, [strWindowFeatures]); strWindowName 和 form 的 target相對應  //open 還可設定視窗參數如height=400, width=400, top=0, left=0, toolbar=yes, menubar=yes, scrollbars=yes, resizable=yes,location=yes, status=yes } 參考連結   url1   ","date":"2021-10-04T14:19:59+08:00","permalink":"https://hushuuu.github.io/2021/10/04/windowopen%E9%96%8B%E6%96%B0%E8%A6%96%E7%AA%97%E4%B8%A6post%E8%B3%87%E6%96%99/","title":"Windowopen開新視窗並Post資料"},{"content":"前言 IOS使用APNS server要額外使用組件HttpTwo HttpTwo.HPack jose-jwt\n主要內容 首先要先拿到Apple Developer的apns key .p8檔\n建立HttpClient物件使用HTTP/2\n讀取.p8檔並使用jose-jwt來產出authorization token\n類別建立 //回傳結果+狀態碼 public class AppleSendResult { public bool isSuccess { get; set; } public string message { get; set; } public Guid? apns_id { get; set; } public HttpStatusCode httpStatusCode { get; set; } public string reason { get; set; } //記著request的device token送完可判斷狀態碼來得知是否token還有效  public string token { get; set; } } //Request 模型 public class APNAps { //alert 可為object or string直接當訊息body  public string alert { get; set; } } //Request public class APNSendRequest { //aps的物件結構可參照官方文件增加其他屬性  public APNAps aps { get; set; } } //推送的種類(一般為alert) public enum ApplePushTypeKind { alert, background, voip, complication, fileprovider, mdm, } private string auth_kid { get; set; } //apns auth key keyID private string auth_iss { get; set; } //開發者帳號TeamID private string apns_topic { get; set; } //開發專案名稱 private string accessToken { get; set; } //token private DateTime? accessTokenValidTime { get; set; } //token合法時間 讀取.p8檔產出Token /// \u0026lt;summary\u0026gt; /// 重新產生access token /// \u0026lt;/summary\u0026gt; public virtual void ReNewAccessToken() { //取得產生Token的時間(UTC)秒為單位  var expiration = DateTime.Now.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc); var expirationSeconds = (long)expiration.TotalSeconds; var header = new Dictionary\u0026lt;string, object\u0026gt;(); header.Add(\u0026#34;alg\u0026#34;, \u0026#34;ES256\u0026#34;); //加密演算法  header.Add(\u0026#34;kid\u0026#34;, auth_kid); string payload = \u0026#34;{\\\u0026#34;iss\\\u0026#34;:\\\u0026#34;\u0026#34; + auth_iss + \u0026#34;\\\u0026#34;,\\\u0026#34;iat\\\u0026#34;:\\\u0026#34;\u0026#34; + expirationSeconds + \u0026#34;\\\u0026#34;}\u0026#34;; accessToken = Jose.JWT.Encode(payload, scrt, Jose.JwsAlgorithm.ES256, header); accessTokenValidTime = DateTime.Now.AddMinutes(60); } /// \u0026lt;summary\u0026gt; /// 使用認證令牌 /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;p8FilePath\u0026#34;\u0026gt;p8檔案路徑\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;apns_topic\u0026#34;\u0026gt;bundle id\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;auth_kid\u0026#34;\u0026gt;kid\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;auth_iss\u0026#34;\u0026gt;iss\u0026lt;/param\u0026gt; public virtual void UseAuthorization(string p8FilePath, string apns_topic, string auth_kid, string auth_iss) { var text = File.ReadAllText(p8FilePath); List\u0026lt;string\u0026gt; split = text.Split(\u0026#39;\\n\u0026#39;).ToList(); split.RemoveAt(split.Count - 1); split.RemoveAt(0); var k = string.Join(\u0026#34;\u0026#34;, split); var bytes = Convert.FromBase64String(k); var secrt = CngKey.Import(bytes, CngKeyBlobFormat.Pkcs8PrivateBlob); this.scrt = secrt; this.auth_kid = auth_kid; this.auth_iss = auth_iss; this.apns_topic = apns_topic; ReNewAccessToken(); } Http/2處理 public class Http2CustomHandler : WinHttpHandler { protected override Task\u0026lt;HttpResponseMessage\u0026gt; SendAsync(HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { request.Version = new Version(\u0026#34;2.0\u0026#34;); return base.SendAsync(request, cancellationToken); } } 推送方法 public virtual AppleSendResult Send\u0026lt;T\u0026gt;(string token, T postdataModel , ApplePushTypeKind pushTypeKind = ApplePushTypeKind.alert, int apns_expiration = 0, int apns_priority = 10) where T : APNSendRequest { httpClient = new HttpClient(new Http2CustomHandler()); if (DateTime.Now \u0026gt;= accessTokenValidTime) { ReNewAccessToken(); } AppleSendResult result = new AppleSendResult() { token = token, }; //若是正式環境要將網址的sandbox拿掉  string url = $\u0026#34;https://api.sandbox.push.apple.com/3/device/{token}\u0026#34;; var uri = new Uri(url); string postdata_json = JsonConvert.SerializeObject(postdataModel); byte[] byteArray = Encoding.UTF8.GetBytes(postdata_json); var httpRequestMessage = new HttpRequestMessage(); httpRequestMessage.RequestUri = uri; httpRequestMessage.Method = HttpMethod.Post; httpRequestMessage.Headers.Add(\u0026#34;apns-push-type\u0026#34;, pushTypeKind.ToString()); httpRequestMessage.Headers.Add(\u0026#34;apns-expiration\u0026#34;, apns_expiration.ToString()); httpRequestMessage.Headers.Add(\u0026#34;apns-priority\u0026#34;, apns_priority.ToString()); httpRequestMessage.Headers.Add(\u0026#34;authorization\u0026#34;, $\u0026#34;bearer {accessToken}\u0026#34;); httpRequestMessage.Headers.Add(\u0026#34;apns-topic\u0026#34;, this.apns_topic); httpRequestMessage.Headers.Add(\u0026#34;apns-id\u0026#34;, Guid.NewGuid().ToString()); httpRequestMessage.Content = new ByteArrayContent(byteArray); var responseMessage = httpClient.SendAsync(httpRequestMessage).Result; var responseBody = responseMessage.Content.ReadAsStringAsync().Result; HttpStatusCode responseCode = responseMessage.StatusCode; result.httpStatusCode = responseCode; string tmp_apns_id = responseMessage.Headers.GetValues(\u0026#34;apns-id\u0026#34;).First(); if(Guid.TryParse(tmp_apns_id, out Guid res_apns_id)) { result.apns_id = res_apns_id; } if (responseCode != HttpStatusCode.OK) { var responseObj = JsonConvert.DeserializeObject\u0026lt;APNSendResult\u0026gt;(responseBody); result.reason = responseObj.reason; result.isSuccess = false; result.message = \u0026#34;失敗。\u0026#34; + responseObj.reason; } else { result.isSuccess = true; result.message = \u0026#34;成功。\u0026#34;; } return result; } 小結 當通知傳到裝置後，根據Response可以知道是否成功及DeviceToken有效性\nRequest的模型還有更多參數可以設定\n較詳細的處理就需要看官方文件慢慢調整了。\n參考連結   url1 url2 url3   ","date":"2021-09-09T10:51:04+08:00","permalink":"https://hushuuu.github.io/2021/09/09/notification-ios%E7%AF%87/","title":"Notification - IOS篇"},{"content":"前言 Android用FCM傳送通知步驟較IOS Apns為簡易。\nRequest加ApiKey驗證傳給FCM Server即可\n主要內容 須先取得Firebase Android開發的api key\n詳閱Firebase Cloud Messaging(FCM) 官方文件後，建立傳入傳出的類別\nrequest較重要的欄位為registration_ids代表欲傳送的device id\n傳送訊息FCM有定義兩種type，notification message 和data message \n根據使用的種類，App接收端的處理也稍有不同，接收到並解析來顯示通知\n此篇不多介紹App端的處理\n定義類別\n//回傳結果  public class FCMResultData { public string error { get; set; } public string message_id { get; set; } public string registration_id { get; set; } } //FCM回傳結果 public class FCMSendResult { public string multicast_id { get; set; } public int? success { get; set; } public int? failure { get; set; } public int? canonical_ids { get; set; } public string message { get; set; } public List\u0026lt;FCMResultData\u0026gt; results { get; set; } } //紀錄結果+狀態碼 public class AndroidSendResult : FCMSendResult { public bool isSuccess { get; set; } public string resultMessage { get; set; } public HttpStatusCode httpStatusCode { get; set; } } //Request public class FCMSendData { public string tickerText { get; set; } public string contentTitle { get; set; } public string message { get; set; } } public class FCMSendRequest\u0026lt;T\u0026gt; where T : FCMSendData { public List\u0026lt;string\u0026gt; registration_ids { get; set; } public T data { get; set; } //data message } public virtual AndroidSendResult SendList\u0026lt;T\u0026gt;(List\u0026lt;string\u0026gt; registration_ids, T send_data) where T : FCMSendData { AndroidSendResult result; //fcm推播網址  var uri = new Uri(\u0026#34;https://fcm.googleapis.com/fcm/send\u0026#34;); FCMSendRequest\u0026lt;T\u0026gt; post_data = new FCMSendRequest\u0026lt;T\u0026gt;() { registration_ids = registration_ids,//裝置id清單  data = send_data, //推播訊息模型  }; string postdata_json = JsonConvert.SerializeObject(post_data); var httpRequestMessage = new HttpRequestMessage(); httpRequestMessage.RequestUri = uri; httpRequestMessage.Method = HttpMethod.Post; httpRequestMessage.Headers.Add(\u0026#34;Authorization\u0026#34;, $\u0026#34;key ={api_key}\u0026#34;);//fcm token key  httpRequestMessage.Content = new StringContent(postdata_json, Encoding.UTF8, \u0026#34;application/json\u0026#34;); httpClient = new HttpClient(); httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\u0026#34;application/json\u0026#34;)); var responseMessage = httpClient.SendAsync(httpRequestMessage).Result; var responseBody = responseMessage.Content.ReadAsStringAsync().Result; //推送結果  result = JsonConvert.DeserializeObject\u0026lt;AndroidSendResult\u0026gt;(responseBody); HttpStatusCode responseCode = responseMessage.StatusCode; result.httpStatusCode = responseCode; if (result.success.HasValue) { if(result.success \u0026gt;= 1) { result.isSuccess = true; result.resultMessage = \u0026#34;OK\u0026#34;; } else { result.isSuccess = false; result.resultMessage = \u0026#34;無成功數量。\u0026#34;; } } else { result.isSuccess = false; result.resultMessage = \u0026#34;有異常結果，無回應成功或失敗數量。\u0026#34;; } return result; } 小結 當通知傳到裝置後，根據Response可以知道是否成功及DeviceID有效性\nRequest的模型還有更多參數可以設定\n較詳細的處理就需要看官方文件慢慢調整了。\n參考連結   url1 url2   ","date":"2021-09-07T09:45:46+08:00","permalink":"https://hushuuu.github.io/2021/09/07/notification-android%E7%AF%87/","title":"Notification - Android篇"},{"content":"前言 Service Worker目前Apple體系似乎還未完全支援(IOS,Safari...)\n這次使用Notification API\n較舊的瀏覽器可能也無法使用，Chrome，Edge這些就可以使用了\n使用ServiceWorker並訂閱通知 function askForNotificationPermission() { Notification.requestPermission(function (status) { console.log(\u0026#39;User Choice\u0026#39;, status); if (status !== \u0026#39;granted\u0026#39;) { console.log(\u0026#39;推播允許被拒絕了!\u0026#39;); } else { console.log(\u0026#39;推播允許!\u0026#39;); } }); } //一組web push用的Application Server Public Key var applicationServerPublicKey = \u0026#39;BJZStZELls2cT9GaQ29RQlk6wuWGz-RnDFylb2YG77yiEY0DFhyVNG93U-RbUswECsVrt7dfhXLBldmUOGmWqPs\u0026#39;; //註冊service worker js的路徑 var serviceWorker = \u0026#39;../../serviceworker.js\u0026#39;; var isSubscribed = false; $(document).ready(function () { if (typeof applicationServerPublicKey === \u0026#39;undefined\u0026#39;) { errorHandler(\u0026#39;Vapid public key is undefined.\u0026#39;); return; } //初始化sevice worker  initialiseServiceWorker(); //判斷browser能不能傳送通知  Notification.requestPermission().then(function (status) { if (status === \u0026#39;denied\u0026#39;) { errorHandler(\u0026#39;[Notification.requestPermission] Browser denied permissions to notification api.\u0026#39;); } else if (status === \u0026#39;granted\u0026#39;) { console.log(\u0026#39;[Notification.requestPermission] Initializing service worker.\u0026#39;); } }); //訂閱通知  subscribe(); }); //初始化並註冊service worker function initialiseServiceWorker() { if (\u0026#39;serviceWorker\u0026#39; in navigator) { navigator.serviceWorker.register(serviceWorker).then(handleSWRegistration); } else { errorHandler(\u0026#39;[initialiseServiceWorker] Service workers are not supported in this browser.\u0026#39;); } }; //註冊的狀態 function handleSWRegistration(reg) { if (reg.installing) { console.log(\u0026#39;Service worker installing\u0026#39;); } else if (reg.waiting) { console.log(\u0026#39;Service worker installed\u0026#39;); } else if (reg.active) { console.log(\u0026#39;Service worker active\u0026#39;); } initialiseState(reg); } //初始化註冊狀態並檢驗能不能推送通知 function initialiseState(reg) { // Are Notifications supported in the service worker?  if (!(reg.showNotification)) { errorHandler(\u0026#39;[initialiseState] Notifications aren\\\u0026#39;t supported on service workers.\u0026#39;); return; } // Check if push messaging is supported  if (!(\u0026#39;PushManager\u0026#39; in window)) { errorHandler(\u0026#39;[initialiseState] Push messaging isn\\\u0026#39;t supported.\u0026#39;); return; } // We need the service worker registration to check for a subscription  navigator.serviceWorker.ready.then(function (reg) { // Do we already have a push message subscription?  reg.pushManager.getSubscription() .then(function (subscription) { isSubscribed = subscription; if (isSubscribed) { console.log(\u0026#39;User is already subscribed to push notifications\u0026#39;); } else { console.log(\u0026#39;User is not yet subscribed to push notifications\u0026#39;); } }) .catch(function (err) { console.log(\u0026#39;[req.pushManager.getSubscription] Unable to get subscription details.\u0026#39;, err); }); }); } //訂閱通知 function subscribe() { navigator.serviceWorker.ready.then(function (reg) { var subscribeParams = { userVisibleOnly: true }; //Setting the public key of our VAPID key pair.  var applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey); subscribeParams.applicationServerKey = applicationServerKey; reg.pushManager.subscribe(subscribeParams) .then(function (subscription) { isSubscribed = true; var p256dh = base64Encode(subscription.getKey(\u0026#39;p256dh\u0026#39;)); var auth = base64Encode(subscription.getKey(\u0026#39;auth\u0026#39;)); //console.log(subscription);  //console.log(subscription.endpoint);  //console.log(p256dh);  //console.log(auth);  }) .catch(function (e) { errorHandler(\u0026#39;[subscribe] Unable to subscribe to push\u0026#39;, e); }); }); } //錯誤處理 function errorHandler(message, e) { if (typeof e == \u0026#39;undefined\u0026#39;) { e = null; } console.error(message, e); } function urlB64ToUint8Array(base64String) { var padding = \u0026#39;=\u0026#39;.repeat((4 - base64String.length % 4) % 4); var base64 = (base64String + padding) .replace(/\\-/g, \u0026#39;+\u0026#39;) .replace(/_/g, \u0026#39;/\u0026#39;); var rawData = window.atob(base64); var outputArray = new Uint8Array(rawData.length); for (var i = 0; i \u0026lt; rawData.length; ++i) { outputArray[i] = rawData.charCodeAt(i); } return outputArray; } function base64Encode(arrayBuffer) { return btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer))); } serviceworker.js內容\n(function () { \u0026#39;use strict\u0026#39;; // Update \u0026#39;version\u0026#39; if you need to refresh the cache  var version = \u0026#39;v1.0::CacheFirstSafe\u0026#39;; var offlineUrl = \u0026#34;\u0026#34;; // \u0026lt;-- Offline/Index.cshtml  var urlsToCache = [\u0026#39;/\u0026#39;, offlineUrl]; // \u0026lt;-- Add more URLs you would like to cache.  // Store core files in a cache (including a page to display when offline)  function updateStaticCache() { return caches.open(version) .then(function (cache) { return cache.addAll(urlsToCache); }); } function addToCache(request, response) { if (!response.ok \u0026amp;\u0026amp; response.type !== \u0026#39;opaque\u0026#39;) return; var copy = response.clone(); caches.open(version) .then(function (cache) { cache.put(request, copy); }); } function serveOfflineImage(request) { if (request.headers.get(\u0026#39;Accept\u0026#39;).indexOf(\u0026#39;image\u0026#39;) !== -1) { return new Response(\u0026#39;\u0026lt;svg role=\u0026#34;img\u0026#34; aria-labelledby=\u0026#34;offline-title\u0026#34; viewBox=\u0026#34;0 0 400 300\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt;\u0026lt;title id=\u0026#34;offline-title\u0026#34;\u0026gt;Offline\u0026lt;/title\u0026gt;\u0026lt;g fill=\u0026#34;none\u0026#34; fill-rule=\u0026#34;evenodd\u0026#34;\u0026gt;\u0026lt;path fill=\u0026#34;#D8D8D8\u0026#34; d=\u0026#34;M0 0h400v300H0z\u0026#34;/\u0026gt;\u0026lt;text fill=\u0026#34;#9B9B9B\u0026#34; font-family=\u0026#34;Helvetica Neue,Arial,Helvetica,sans-serif\u0026#34; font-size=\u0026#34;72\u0026#34; font-weight=\u0026#34;bold\u0026#34;\u0026gt;\u0026lt;tspan x=\u0026#34;93\u0026#34; y=\u0026#34;172\u0026#34;\u0026gt;offline\u0026lt;/tspan\u0026gt;\u0026lt;/text\u0026gt;\u0026lt;/g\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39;, { headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;image/svg+xml\u0026#39; } }); } } self.addEventListener(\u0026#39;install\u0026#39;, function (event) { event.waitUntil(updateStaticCache()); }); self.addEventListener(\u0026#39;activate\u0026#39;, function (event) { event.waitUntil( caches.keys() .then(function (keys) { // Remove caches whose name is no longer valid  return Promise.all(keys .filter(function (key) { return key.indexOf(version) !== 0; }) .map(function (key) { return caches.delete(key); }) ); }) ); }); self.addEventListener(\u0026#39;fetch\u0026#39;, function (event) { var request = event.request; // Always fetch non-GET requests from the network  if (request.method !== \u0026#39;GET\u0026#39; || request.url.match(/\\/browserLink/ig)) { event.respondWith( fetch(request) .catch(function () { return caches.match(offlineUrl); }) ); return; } // For HTML requests, try the network first, fall back to the cache, finally the offline page  if (request.headers.get(\u0026#39;Accept\u0026#39;).indexOf(\u0026#39;text/html\u0026#39;) !== -1) { event.respondWith( fetch(request) .then(function (response) { // Stash a copy of this page in the cache  addToCache(request, response); return response; }) .catch(function () { return caches.match(request) .then(function (response) { return response || caches.match(offlineUrl); }); }) ); return; } // cache first for fingerprinted resources  if (request.url.match(/(\\?|\u0026amp;)v=/ig)) { event.respondWith( caches.match(request) .then(function (response) { return response || fetch(request) .then(function (response) { addToCache(request, response); return response || serveOfflineImage(request); }) .catch(function () { return serveOfflineImage(request); }); }) ); return; } // network first for non-fingerprinted resources  event.respondWith( fetch(request) .then(function (response) { // Stash a copy of this page in the cache  addToCache(request, response); return response; }) .catch(function () { return caches.match(request) .then(function (response) { return response || serveOfflineImage(request); }) .catch(function () { return serveOfflineImage(request); }); }) ); }); //監聽PUSH事件  self.addEventListener(\u0026#39;push\u0026#39;, function (event) { if (!(self.Notification \u0026amp;\u0026amp; self.Notification.permission === \u0026#39;granted\u0026#39;)) { return; } var data = {}; if (event.data) { try { if (event.data.json()) { data = event.data.json(); } } catch { data.title = \u0026#34;\u0026#34;; data.message = event.data.text(); } } console.log(\u0026#39;Notification Received:\u0026#39;); console.log(data); //將接收到的json解析後進行通知  var title = data.title; var message = data.message; var icon = data.icon; //顯示通知  event.waitUntil(self.registration.showNotification(title, { body: message, icon: icon, //badge: icon  })); }); })(); 後端推送 可以建立API或是Console程式來實現推送行為\n//using WebPush套件 [HttpPost] public ActionResult Send(string PushEndpoint,string PushP256DH,string PushAuth,string msg=null) { var payload = \u0026#34;{\\\u0026#34;title\\\u0026#34;:\\\u0026#34;this is title\\\u0026#34;,\\\u0026#34;message\\\u0026#34;:\\\u0026#34;this is messaage\u0026#34; + msg + \u0026#34;\\\u0026#34;}\u0026#34;; string payloadstr = JsonConvert.SerializeObject(payload); string vapidPublicKey = \u0026#34;BJZStZELls2cT9GaQ29RQlk6wuWGz-RnDFylb2YG77yiEY0DFhyVNG93U-RbUswECsVrt7dfhXLBldmUOGmWqPs\u0026#34;; string vapidPrivateKey = \u0026#34;f_Rhef2okkI3ZziDLs0jvVGKzVMZHSDWqJrfWJYkbqI\u0026#34;; var pushSubscription = new PushSubscription(PushEndpoint, PushP256DH, PushAuth); var vapidDetails = new VapidDetails(\u0026#34;mailto:example@example.com\u0026#34;, vapidPublicKey, vapidPrivateKey); var webPushClient = new WebPushClient(); webPushClient.SendNotification(pushSubscription, payload,vapidDetails); return Content(\u0026#34;\u0026#34;); } 小結 桌面通知還能再結合PWA來讓Web更像一個APP來使用\n不過不管是PWA還是ServiceWorker支援度似乎還未很完善尤其是IOS環境\n參考連結   url1 url2 url3   ","date":"2021-09-06T16:49:16+08:00","permalink":"https://hushuuu.github.io/2021/09/06/notification-service-worker%E7%AF%87/","title":"Notification - Service Worker篇"},{"content":"前言 透過用戶代理useragent偵測瀏覽器\n來判斷是否當下為WebView\n主要內容 var rules = [\u0026#39;WebView\u0026#39;, \u0026#39;(iPhone|iPod|iPad)(?!.*Safari\\/)\u0026#39;, \u0026#39;Android.*(wv|\\.0\\.0\\.0)\u0026#39;]; var regex = new RegExp(`(` + rules.join(\u0026#39;|\u0026#39;) + `)`, \u0026#39;ig\u0026#39;); var matchResult = navigator.userAgent.match(regex); var isWebview = matchResult != null \u0026amp;\u0026amp; matchResult.length \u0026gt; 0; if (isWebview) { if (navigator.userAgent.match(/iPhone|iPad|iPod/i) \u0026amp;\u0026amp; typeof window.webkit != \u0026#39;undefined\u0026#39;) { try {//webview需對應設定  window.webkit.messageHandlers.Login.postMessage(\u0026#34;Login\u0026#34;);//呼叫手機端Login方法  } catch (err) { } return; } else if (typeof androidJs != \u0026#39;undefined\u0026#39;) { //webview需對應設定  androidJs.login();//呼叫手機端login方法  return; } } 參考連結   url1   ","date":"2021-09-06T16:36:44+08:00","permalink":"https://hushuuu.github.io/2021/09/06/notification-%E5%88%A4%E6%96%B7webview/","title":"Notification - 判斷WebView"},{"content":"前言 Json Serilize後Datetime格式被轉為/Date(1373950800000)/\n轉換處理 //傳入轉換字串和是否要含時間 function FormateDate(str,withTime){ var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i \u0026lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i \u0026lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ? ar_date.join(`-`) + \u0026#34; \u0026#34; + ar_time.join(`: `) : ar_date.join(`-`); } function dFormat(i) { return i \u0026lt; 10 ? \u0026#34;0\u0026#34; + i.toString() : i; } //Using let str = \u0026#34;/Date(1373950800000)/\u0026#34;; let result = FormateDate(str,true); //yyyy-MM-dd HH:mm:ss let result2 = FormateDate(str); //yyyy-MM-dd Vue擴充 可使用Vue.prototype的方式直接擴充一個方法就不用每次建立實例時要額外多寫一段\nVue.prototype.$formateDate = function (str, withTime) { var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i \u0026lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i \u0026lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ? ar_date.join(`-`) + \u0026#34; \u0026#34; + ar_time.join(`: `) : ar_date.join(`-`); function dFormat(i) { return i \u0026lt; 10 ? \u0026#34;0\u0026#34; + i.toString() : i; } }; //using vue.$formatDate() 小結 可以直接將轉換function一起包進Vue的實例的methods中\n就能跟著畫面渲染轉換。\n 若有傳回後端接收的情形，也要注意轉換格式讓Datetime型別辨識並綁定的到  參考連結   url1   ","date":"2021-08-26T16:37:23+08:00","permalink":"https://hushuuu.github.io/2021/08/26/vuejs-%E8%99%95%E7%90%86json%E6%A0%BC%E5%BC%8F%E4%B8%8B%E6%97%A5%E6%9C%9Fdate/","title":"VueJs 處理Json格式下日期Date"},{"content":"前言 版本vue2.x\n將ViewModel序列化後也可綁定到Vue物件上\n主要內容 在cshtml內定義好model後序列化\n用Json.Encode或是JsonConvert處理後\n回傳MvcHtmlString類別\n@{ var Datajson = new MvcHtmlString(Json.Encode(Model)); } 建立Vue實體，綁定Element\n資料data定義一個dataList接收剛剛序列化的變數\nvar vueDiv = new Vue({ el: \u0026#34;#vueDiv\u0026#34;, data: { dataList:@Datajson, }, }); v-if 沒筆數就不顯示\nv-for 迴圈印出datList每個項目\n\u0026lt;table v-if=\u0026#34;dataList.count\u0026gt;0\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;標題\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;名稱\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item,index) in dataList\u0026#34; :id=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{item.title}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{item.name}}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; ","date":"2021-08-26T14:48:29+08:00","permalink":"https://hushuuu.github.io/2021/08/26/.net-mvc-viewmodel-%E5%A5%97%E4%B8%8Avuejs/","title":".Net MVC ViewModel 套上VueJs"},{"content":"前言 NPOI 設定框線、字型、顏色、對齊、換行\u0026hellip;等常用樣式設定\n建立表 XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立Workbook ISheet sheet = xssfworkbook.CreateSheet(sheetName); //建立sheet sheet.CreateRow(0).CreateCell(0).SetCellValue(\u0026#34;標題\u0026#34;); //第一次一定要先建立NewRow NewCell 框線 BorderStyle框線樣式\nBorderColor框線顏色\nICellStyle myStyle = xssfworkbook.CreateCellStyle();//建立樣式 myStyle.BorderTop = BorderStyle.Thin;//設定上框線 myStyle.BorderBottom = BorderStyle.Thin;//設定下框線 myStyle.BorderLeft = BorderStyle.Thin;//設定框線 myStyle.BorderRight = BorderStyle.Thin;//設定框線 字型 FontName字體名稱:新細明體\nFontHeightInPoints字體大小(double):12\nIsBold是否粗體(bool)\nColor顏色(short) HSSFColor.Black.Index\nIFont cFont = workboook.CreateFont(); cFont.FontName = \u0026#34;微軟正黑體\u0026#34;; cFont.FontHeightInPoints = 12; cFont.IsBold = true; cFont.Color = HSSFColor.Red.Index; myStyle.SetFont(cFont); 對齊 myStyle.Alignment = HorizontalAlignment.Center; //水平置中 myStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中 換行 myStyle.WrapText = true; 顏色 ICellStyle中設定顏色通常都是傳入short型別，如傳入HSSFColor.Yellow.Index\n若想用RGB或ARGB來自定特定顏色則只在XSSFCellStyle可以做設定\n特別注意:單元格的背景顏色似乎是設定FillForegroundColor而不是設定FillBackgroundColor\n而且必須同時設定FillPattern才會有效果\n一般顏色設定 ICellStyle myStyle = workbook.CreateCellStyle();//建立樣式 myStyle.FillForegroundColor = HSSFColor.Pink.Index; myStyle.FillPattern = FillPattern.SolidForeground; 特殊顏色設定 XSSFCellStyle cStyle = (XSSFCellStyle)workboook.CreateCellStyle(); //樣式 byte[] rgbByte = new byte[]{192,0,0};//深紅色RGB XSSFColor rgbColor = new XSSFColor(rgbByte); cStyle.FillForegroundColor = rgbColor; myStyle.FillPattern = FillPattern.SolidForeground; 包成Function來設定 單元格的樣式若稍有差異就要寫好幾行程式，包成方法來傳入參數自動設定。 仍可增加更多參數來設定樣式\n/// \u0026lt;summary\u0026gt; /// XSSFCellStyle較多參數可設定 /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;workboook\u0026#34;\u0026gt;XSSFWorkbook\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;hAlignment\u0026#34;\u0026gt;水平對齊\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;vAlignment\u0026#34;\u0026gt;垂直對齊\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;fontSize\u0026#34;\u0026gt;字體大小\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;fontName\u0026#34;\u0026gt;字體名稱\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;Btop\u0026#34;\u0026gt;上框線\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;Bright\u0026#34;\u0026gt;右框線\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;Bdown\u0026#34;\u0026gt;下框線\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;Bleft\u0026#34;\u0026gt;左框線\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;CanWrapText\u0026#34;\u0026gt;可換行\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;isLocked\u0026#34;\u0026gt;鎖定\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;isFontBold\u0026#34;\u0026gt;粗體\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;xssffontColor\u0026#34;\u0026gt;字體顏色byte[rgb]\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;xssffgColor\u0026#34;\u0026gt;前景顏色byte[rgb]\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; public XSSFCellStyle genXSSFCellStyle(XSSFWorkbook workboook , HorizontalAlignment hAlignment = HorizontalAlignment.Center, VerticalAlignment vAlignment = VerticalAlignment.Center , double fontSize = 16, string fontName = \u0026#34;微軟正黑體\u0026#34; , BorderStyle Btop = 0, BorderStyle Bright = 0, BorderStyle Bdown = 0, BorderStyle Bleft = 0 , bool CanWrapText = false, bool isLocked = false, bool isFontBold = false , byte[] xssffontColor= null ,byte[] xssffgColor=null ) { XSSFCellStyle cStyle = (XSSFCellStyle)workboook.CreateCellStyle(); ////設定樣式  cStyle.Alignment = hAlignment; //水平置中  cStyle.VerticalAlignment = vAlignment; //垂直置中  XSSFFont cFont = (XSSFFont)workboook.CreateFont(); cFont.FontName = fontName; cFont.FontHeightInPoints = fontSize; cFont.IsBold = isFontBold; if (xssffontColor != null) { cFont.SetColor(new XSSFColor(xssffontColor)); } cStyle.SetFont(cFont); cStyle.BorderTop = Btop; cStyle.BorderRight = Bright; cStyle.BorderBottom = Bdown; cStyle.BorderLeft = Bleft; cStyle.WrapText = CanWrapText; cStyle.IsLocked = isLocked; if (xssffgColor != null) { cStyle.FillPattern = FillPattern.SolidForeground; cStyle.SetFillForegroundColor(new XSSFColor(xssffgColor)); } return cStyle; } 小結 設定樣式也可以透過讀取設計好的Excel檔之Sheet來產出\n但處理上可能較為不彈性。適合較單調簡易的讀檔填值。\n其他仍有像是數值格式DataFormat的設定未紀錄\n有用到再另外補上。\n","date":"2021-08-26T11:52:40+08:00","permalink":"https://hushuuu.github.io/2021/08/26/npoi-cellstyle%E7%AF%87/","title":"NPOI - CellStyle篇"},{"content":"前言 NPOI 是可讀取及產出Excel的套件。同JAVA的POI\nEXCEL概觀 若要建立Excel首先要先建立Workbook\nWorkbook裡可建立數個Sheet\nSheet就為一張一張的表\n每個表內從第0行(Row)第0欄(Column)開始第一個單元格\n產出的格式若是較新版的Excel(.xlsx) 使用XSSFWorkbook\n若為舊版Excel格式(.xls)則使用HSSFWorkbook\n這邊以XSSF作範例，將A0合併至B2\nXSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立Workbook ISheet sheet = xssfworkbook.CreateSheet(sheetName); //建立sheet sheet.CreateRow(0).CreateCell(0).SetCellValue(\u0026#34;標題\u0026#34;); //第一次一定要先建立NewRow NewCell CellRangeAddress region = new CellRangeAddress(0,1,0,1);//指定區域A0~B2 sheet.AddMergedRegion(region);//合併區域 ICellStyle myStyle = xssfworkbook.CreateCellStyle();//建立樣式 myStyle.BorderTop = BorderStyle.Thin;//設定上框線 myStyle.BorderBottom = BorderStyle.Thin;//設定下框線 myStyle.BorderLeft = BorderStyle.Thin;//設定框線 myStyle.BorderRight = BorderStyle.Thin;//設定框線 sheet.GetRow(0).GetCell(0).CellStyle = myStyle; //設定樣式  //產出檔案並回傳 System.IO.MemoryStream ms = new System.IO.MemoryStream(); xssfworkbook.Write(ms); return File(ms.ToArray(), \u0026#34;application/vnd.ms-excel\u0026#34;, \u0026#34;myExcel.xlsx\u0026#34;); 合併後框線失效 上面的例子產出報表後，並未符合預期的樣子\n合併後的框線樣式跑掉了。\n這是因為框線樣式只有設定到A0這個元素格\n合併後右下的框線就被合併起來了\n故最簡單解決方式為把其他元素格也設定框線樣式\n解決方案 新增Function傳入合併的區域Region，將此Region的格子全部設定樣式\npublic void SetRegionBorder(IWorkbook workbook, ISheet sheet, CellRangeAddress region, ICellStyle style) { for (int i = region.FirstRow; i \u0026lt;= region.LastRow; i++) { IRow row = sheet.GetRow(i) ?? sheet.CreateRow(i); for (int j = region.FirstColumn; j \u0026lt;= region.LastColumn; j++) { ICell cell = row.GetCell(j) ?? row.CreateCell(j); cell.CellStyle = style; } } } //call method CellRangeAddress region = new CellRangeAddress(0,1,0,1);//指定區域A0~B2 SetRegionBorder(xssfworkbook, sheet, region, myStyle); 小結 使用ISheet IRow ICell ICellStyle 等等介面可通用於XSSF和HSSF的類別\n兼容上較方便，但較豐富的設定則無法使用介面來設定，需另外處理\n較詳細的用法擇日另篇再筆記。。\n","date":"2021-08-26T10:41:03+08:00","permalink":"https://hushuuu.github.io/2021/08/26/npoi-%E5%90%88%E4%BD%B5%E5%84%B2%E5%AD%98%E6%A0%BC%E8%88%87%E6%A1%86%E7%B7%9A%E6%A8%A3%E5%BC%8F/","title":"NPOI 合併儲存格與框線樣式"},{"content":"前言 在使用Razor Page時，想傳入post請求卻得到bad request\n應該是在net core下有預設檢查ValidateAntiForgeryToken來防止跨站攻擊\n故需要在POST前加上token來通過檢查\n主要內容 可利用HtmlHelper直接產生出token @Html.AntiForgeryToken() 在ajax中加入token $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;\u0026#34;, data: \u0026#34;\u0026#34;, dataType: \u0026#34;json\u0026#34;, beforeSend: function (xhr) { xhr.setRequestHeader(\u0026#34;requestverificationtoken\u0026#34;, $(\u0026#39;input:hidden[name=\u0026#34;__RequestVerificationToken\u0026#34;]\u0026#39;).val()); }, success: function (response) { } }); 小結 另外Razor Pages 是透過 ?handler 決定呼叫哪一段程式\n只要在 AJAX URL 加上 ?handler=MethodName\nRazor Page cs檔寫 OnGetMethodName() 或 OnPostMethodName() 即可辨識要進哪個方法\n參考連結   url1 url2   ","date":"2021-05-27T15:52:39+08:00","permalink":"https://hushuuu.github.io/2021/05/27/ajax%E5%9C%A8netcore-razor-page%E5%BE%97%E5%88%B0%E5%9B%9E%E6%87%89bad-request/","title":"ajax在NetCore Razor Page得到回應bad request"},{"content":"前言 LINE官方有不同語言的API套件，C#的話則有社群提供。主要為pierre3提供的LineMessaging Api和twdeveloper提供的LineBotSDK可選用\n本篇使用LineMessaging Api\n初始設計 建立一個新專案，範本選.net core Web空白的專案\nNuget安裝Line.Messaging\n將Linebot的Channel secret和Channel access token放在 appsettings.json\n\u0026#34;LineBot\u0026#34;: { \u0026#34;channelSecret\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;accessToken\u0026#34;: \u0026#34;xxx\u0026#34; } 建立LineBotConfig.cs\npublic class LineBotConfig { public string channelSecret { get; set; } public string accessToken { get; set; } } 設定Startup.cs\npublic Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container. // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940 public void ConfigureServices(IServiceCollection services) { services.AddSingleton\u0026lt;LineBotConfig, LineBotConfig\u0026gt;((s) =\u0026gt; new LineBotConfig { channelSecret = Configuration[\u0026#34;LineBot:channelSecret\u0026#34;], accessToken = Configuration[\u0026#34;LineBot:accessToken\u0026#34;] }); services.AddHttpContextAccessor(); services.AddRazorPages().AddRazorRuntimeCompilation(); services.AddHttpClient(); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseRouting(); app.UseEndpoints(endpoints =\u0026gt; { endpoints.MapControllerRoute( name: \u0026#34;api\u0026#34;, pattern: \u0026#34;api/{controller=Home}/{action=Index}/{id?}\u0026#34;); endpoints.MapRazorPages(); }); } 建立LineBotApp.cs public class LineBotApp : WebhookApplication { private readonly LineMessagingClient _messagingClient; private readonly IHttpClientFactory _clientFactory; private readonly ILogger _logger; private Dictionary\u0026lt;string, object\u0026gt; userParams; private string conversationId; // DirectLine ConversationId  public LineBotApp(LineMessagingClient lineMessagingClient, IHttpClientFactory clientFactory, ILogger logger) { _messagingClient = lineMessagingClient; _clientFactory = clientFactory; _logger = logger; } protected override async Task OnMessageAsync(MessageEvent ev) { try { var result = null as List\u0026lt;ISendMessage\u0026gt;; switch (ev.Message) { //文字訊息  case TextEventMessage textMessage: { //頻道Id  var channelId = ev.Source.Id; //使用者Id  var userId = ev.Source.UserId; result = new List\u0026lt;ISendMessage\u0026gt; { new TextMessage($\u0026#34;you said: {ev.Message.Text}\u0026#34;) }; } break; } if (result != null) await _messagingClient.ReplyMessageAsync(ev.ReplyToken, result); } catch (Exception ex) { _logger.LogError(JsonConvert.SerializeObject(ex)); } } } 建立Controller/LineBotController.cs [Route(\u0026#34;api/linebot\u0026#34;)] public class LineBotController : Controller { private readonly IHttpContextAccessor _httpContextAccessor; private readonly HttpContext _httpContext; private readonly LineBotConfig _lineBotConfig; private readonly ILogger _logger; private readonly IHttpClientFactory _clientFactory; public LineBotController(IServiceProvider serviceProvider, LineBotConfig lineBotConfig, ILogger\u0026lt;LineBotController\u0026gt; logger, IHttpClientFactory clientFactory) { _httpContextAccessor = serviceProvider.GetRequiredService\u0026lt;IHttpContextAccessor\u0026gt;(); _httpContext = _httpContextAccessor.HttpContext; _lineBotConfig = lineBotConfig; _logger = logger; _clientFactory = clientFactory; } //完整的路由網址就是 https://xxx/api/linebot/run [HttpPost(\u0026#34;run\u0026#34;)] public async Task\u0026lt;IActionResult\u0026gt; Post() { try { var events = await _httpContext.Request.GetWebhookEventsAsync(_lineBotConfig.channelSecret); var lineMessagingClient = new LineMessagingClient(_lineBotConfig.accessToken); var lineBotApp = new LineBotApp(lineMessagingClient, _clientFactory, _logger); await lineBotApp.RunAsync(events); } catch (Exception ex) { //需要 Log 可自行加入  //_logger.LogError(JsonConvert.SerializeObject(ex));  } return Ok(); } } GetWebhookEventsAsync方法因為NetCore似乎不使用HttpRequestMessage了所以需要根據request型別擴充方法\n使用參考文章作者Mir調整後的方法\npublic static class WebhookRequestMessageHelper { public static async Task\u0026lt;IEnumerable\u0026lt;WebhookEvent\u0026gt;\u0026gt; GetWebhookEventsAsync(this HttpRequest request, string channelSecret, string botUserId = null) { if (request == null) { throw new ArgumentNullException(nameof(request)); } if (channelSecret == null) { throw new ArgumentNullException(nameof(channelSecret)); } var content = \u0026#34;\u0026#34;; using (var reader = new StreamReader(request.Body)) { content = await reader.ReadToEndAsync(); } var xLineSignature = request.Headers[\u0026#34;X-Line-Signature\u0026#34;].ToString(); if (string.IsNullOrEmpty(xLineSignature) || !VerifySignature(channelSecret, xLineSignature, content)) { throw new InvalidSignatureException(\u0026#34;Signature validation faild.\u0026#34;); } dynamic json = JsonConvert.DeserializeObject(content); if (!string.IsNullOrEmpty(botUserId)) { if (botUserId != (string)json.destination) { throw new UserIdMismatchException(\u0026#34;Bot user ID does not match.\u0026#34;); } } return WebhookEventParser.ParseEvents(json.events); } internal static bool VerifySignature(string channelSecret, string xLineSignature, string requestBody) { try { var key = Encoding.UTF8.GetBytes(channelSecret); var body = Encoding.UTF8.GetBytes(requestBody); using (HMACSHA256 hmac = new HMACSHA256(key)) { var hash = hmac.ComputeHash(body, 0, body.Length); var xLineBytes = Convert.FromBase64String(xLineSignature); return SlowEquals(xLineBytes, hash); } } catch { return false; } } private static bool SlowEquals(byte[] a, byte[] b) { uint diff = (uint)a.Length ^ (uint)b.Length; for (int i = 0; i \u0026lt; a.Length \u0026amp;\u0026amp; i \u0026lt; b.Length; i++) diff |= (uint)(a[i] ^ b[i]); return diff == 0; } } Nlog 順勢加入Nlog來記錄錯誤及可以debug\n路徑設定為方便部屬至Azure時查閱\n//nlog.config \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt; \u0026lt;nlog xmlns=\u0026#34;http://www.nlog-project.org/schemas/NLog.xsd\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; autoReload=\u0026#34;true\u0026#34; internalLogLevel=\u0026#34;Info\u0026#34; internalLogFile=\u0026#34;D:\\home\\site\\AspNetCoreNlog\\Logs\\internal-nlog.txt\u0026#34;\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;add assembly=\u0026#34;NLog.Web.AspNetCore\u0026#34;/\u0026gt; \u0026lt;/extensions\u0026gt; \u0026lt;targets\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;allfile\u0026#34; fileName=\u0026#34;D:\\home\\site\\AspNetCoreNlog\\Logs\\all\\nlog-all-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}\u0026#34; /\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;ownFile-web\u0026#34; fileName=\u0026#34;D:\\home\\site\\AspNetCoreNlog\\Logs\\own\\nlog-own-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}\u0026#34; /\u0026gt; \u0026lt;/targets\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; minlevel=\u0026#34;Trace\u0026#34; writeTo=\u0026#34;allfile\u0026#34; /\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; minlevel=\u0026#34;Trace\u0026#34; writeTo=\u0026#34;ownFile-web\u0026#34; /\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;/nlog\u0026gt; Program.cs\npublic static void Main(string[] args) { CreateHostBuilder(args).Build().Run(); } public static IHostBuilder CreateHostBuilder(string[] args) =\u0026gt; Host.CreateDefaultBuilder(args) .UseNLog()//加入NLOG  .ConfigureWebHostDefaults(webBuilder =\u0026gt; { webBuilder.UseStartup\u0026lt;Startup\u0026gt;(); }); 部屬至Azure 建立新的App service選擇免費方案\n建立好之後回專案視窗-\u0026gt;建置-\u0026gt;發行\n發行至Azure-\u0026gt;選建立的app service\n發行成功後再到Line official account manager\n設定webhook網址https://xxx/api/linebot/run\n發送訊息測試\n小結 下方參考連結作者fysh711426提供的範例及圖文更加豐富，此篇只為記錄個人實作上的步驟\n參考連結   url1   ","date":"2021-05-27T10:09:55+08:00","permalink":"https://hushuuu.github.io/2021/05/27/netcore%E4%B8%8A%E5%BB%BA%E7%AB%8Bline-bot/","title":"NetCore上建立LINE BOT"},{"content":"前言 在使用套件時，根據環境跟使用，引入的script版本非常重要\n版本不同有些使用的方式也會改變或是增減造成效果不一。\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 主要內容 資料固定且簡單的範例只需引入後直接使用產生\n\u0026lt;canvas id=\u0026#34;myChart\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script\u0026gt; var ctx = document.getElementById(\u0026#34;myChart\u0026#34;); var chart = new Chart(ctx, { type: \u0026#39;bar\u0026#39;, data: { labels:{\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;}, datasets: [{ label: [\u0026#34;銷售量\u0026#34;], data: { \u0026#34;A\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;140\u0026#34; } }], } }) \u0026lt;/script\u0026gt; 非固定資料 可用Ajax撈回或使用PartialView的概念\n\u0026lt;script\u0026gt; $(document).on(\u0026#39;click\u0026#39;, \u0026#39;#show_board\u0026#39;, function () { $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#39;@Url.Action(\u0026#34;ShowBoard\u0026#34;, \u0026#34;Product\u0026#34;)\u0026#39; }) .done(function (msg) { //後端傳回為json物件包含圖表所需的資料跟設定  var obj = msg; chart.data.datasets = obj.chartDatasets; chart.data.labels = obj.xaxisLabels; //重繪  chart.update(); }); }); \u0026lt;/script\u0026gt; 設計圖表所需的Model\n/// \u0026lt;summary\u0026gt;  /// 線資料只含值的model  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;typeparam name=\u0026#34;T\u0026#34;\u0026gt;\u0026lt;/typeparam\u0026gt;  public class ChartLineModel\u0026lt;T\u0026gt; //where T : struct  { public ChartLineModel() { this.fill = false; } /// \u0026lt;summary\u0026gt;  /// 資料TAG  /// \u0026lt;/summary\u0026gt;  public string label { get; set; } /// \u0026lt;summary\u0026gt;  /// 是否填滿  /// \u0026lt;/summary\u0026gt;  public bool fill { get; set; } /// \u0026lt;summary\u0026gt;  /// 折線顏色  /// \u0026lt;/summary\u0026gt;  public string borderColor { get; set; } /// \u0026lt;summary\u0026gt;  /// 點內顏色  /// \u0026lt;/summary\u0026gt;  public string pointBackgroundColor { get; set; } /// \u0026lt;summary\u0026gt;  /// 資料值清單  /// \u0026lt;/summary\u0026gt;  public List\u0026lt;T\u0026gt; data { get; set; } } /// \u0026lt;summary\u0026gt;  /// 線資料包含X與Y的值的model  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;typeparam name=\u0026#34;X\u0026#34;\u0026gt;\u0026lt;/typeparam\u0026gt;  /// \u0026lt;typeparam name=\u0026#34;Y\u0026#34;\u0026gt;\u0026lt;/typeparam\u0026gt;  /// \u0026lt;summary\u0026gt;  /// XY軸的值  /// \u0026lt;/summary\u0026gt;  public class ChartPointData\u0026lt;X, Y\u0026gt; //where X : struct  //where Y : struct  { /// \u0026lt;summary\u0026gt;  /// x value  /// \u0026lt;/summary\u0026gt;  public X x { get; set; } /// \u0026lt;summary\u0026gt;  /// y value  /// \u0026lt;/summary\u0026gt;  public Y y { get; set; } } /// \u0026lt;summary\u0026gt;  /// 圖表設定  /// \u0026lt;/summary\u0026gt;  public class ChartSetting\u0026lt;X, Y\u0026gt; //where X :struct  { public ChartSetting() { this.type = \u0026#34;line\u0026#34;; } public string type { get; set; } public List\u0026lt;string\u0026gt; XaxisLabels { get; set; } public List\u0026lt;ChartDatasets\u0026lt;X, Y\u0026gt;\u0026gt; chartDatasets { get; set; } } /// \u0026lt;summary\u0026gt;  /// 圖表設定=\u0026gt;datasets  /// \u0026lt;/summary\u0026gt;  public class ChartDatasets\u0026lt;X, Y\u0026gt; //where X : struct  { public ChartDatasets() { this.backgroundColor = RandomColor(); this.borderColor = backgroundColor; this.showLine = true; this.fill = false; this.pointBackgroundColor = backgroundColor; this.cubicInterpolationMode = \u0026#34;monotone\u0026#34;; } /// \u0026lt;summary\u0026gt;  /// 資料  /// \u0026lt;/summary\u0026gt;  public List\u0026lt;ChartPointData\u0026lt;X, Y\u0026gt;\u0026gt; data { get; set; } private string RandomColor() { string color = string.Empty; StringBuilder sb = new StringBuilder(); int temp; for (int i = 0; i \u0026lt; 6; i++) { Random r = new Random(Guid.NewGuid().GetHashCode()); temp = r.Next(0, 16); sb.Append(Convert.ToString(temp, 16)); } color = $\u0026#34;#{sb.ToString()}\u0026#34;; return color; } /// \u0026lt;summary\u0026gt;  /// 資料TAG  /// \u0026lt;/summary\u0026gt;  public string label { get; set; } /// \u0026lt;summary\u0026gt;  /// 是否填滿  /// \u0026lt;/summary\u0026gt;  public bool fill { get; set; } ///// \u0026lt;summary\u0026gt;  ///// 填滿顏色  ///// \u0026lt;/summary\u0026gt;  public string backgroundColor { get; set; } /// \u0026lt;summary\u0026gt;  /// 是否顯示  /// \u0026lt;/summary\u0026gt;  public bool showLine { get; set; } /// \u0026lt;summary\u0026gt;  /// 折線顏色  /// \u0026lt;/summary\u0026gt;  public string borderColor { get; set; } /// \u0026lt;summary\u0026gt;  /// 點內顏色  /// \u0026lt;/summary\u0026gt;  public string pointBackgroundColor { get; set; } /// \u0026lt;summary\u0026gt;  /// 線的弧度  /// \u0026lt;/summary\u0026gt;  public string cubicInterpolationMode { get; set; } } Action 以日期區間的銷售圖\npublic async Task\u0026lt;IActionResult\u0026gt; ShowBoard() { ChartSetting\u0026lt;DateTime, decimal?\u0026gt; chartSetting = new ChartSetting\u0026lt;DateTime, decimal?\u0026gt;(); //圖表樣式  chartSetting.type = \u0026#34;line\u0026#34;; //x座標日期區間  List\u0026lt;string\u0026gt; xAxisLabels = new List\u0026lt;string\u0026gt;(); DateTime backhunday = DateTime.Now.AddDays(-100); var maxdate = _context.ORDER_M.Where(x =\u0026gt; x.DOC_DATE \u0026gt; backhunday).Max(x =\u0026gt; x.DOC_DATE).ToString(\u0026#34;yyyy-MM-dd\u0026#34;); var mindate = _context.ORDER_M.Where(x =\u0026gt; x.DOC_DATE \u0026gt; backhunday).Min(x =\u0026gt; x.DOC_DATE).ToString(\u0026#34;yyyy-MM-dd\u0026#34;); xAxisLabels.Add(mindate); xAxisLabels.Add(maxdate); //XY資料  List\u0026lt;ChartDatasets\u0026lt;DateTime, decimal?\u0026gt;\u0026gt; chartDatasets = new List\u0026lt;ChartDatasets\u0026lt;DateTime, decimal?\u0026gt;\u0026gt;(); //從資料庫撈出訂單日期銷售情況的LIST  List\u0026lt;LeaderBoardBase\u0026gt; list = await _ProductDB.LeaderBoard(EnumKind.LeaderBoardKind.ByDate, pKind, qDate); //將LIST做GROUP BY商品FOREACH=\u0026gt;商品數=圖表線(datasets)的數量  list.GroupBy(z =\u0026gt; z.PRO_ID).Select(x =\u0026gt; x.Key).ToList() .ForEach(x =\u0026gt; { //線  ChartDatasets\u0026lt;DateTime, decimal?\u0026gt; chartds = new ChartDatasets\u0026lt;DateTime, decimal?\u0026gt;(); //線裡的xy值list  List\u0026lt;ChartPointData\u0026lt;DateTime, decimal?\u0026gt;\u0026gt; cpd_list = new List\u0026lt;ChartPointData\u0026lt;DateTime, decimal?\u0026gt;\u0026gt;(); list .Where(z=\u0026gt;z.PRO_ID==x) .GroupBy(z=\u0026gt; new { PRO_ID=z.PRO_ID,SALE_DATE=z.SALE_DATE}) .Select(z=\u0026gt; new { SALE_DATE=z.Key.SALE_DATE,SALE_MONEY=z.Sum(c=\u0026gt;c.SALE_MONEY)}) .OrderBy(z=\u0026gt;z.SALE_DATE) .ToList() .ForEach(z =\u0026gt; { ChartPointData\u0026lt;DateTime, decimal?\u0026gt; cpd = new ChartPointData\u0026lt;DateTime, decimal?\u0026gt; { x = z.SALE_DATE.Value.Date, y = z.SALE_MONEY }; cpd_list.Add(cpd); }); chartds.data = cpd_list; //線label  chartds.label = _context.PRODUCT.Where(c =\u0026gt; c.PRO_ID.ToString() == x).Select(c =\u0026gt; c.PRO_NAME).FirstOrDefault(); //將線加進圖表datasets裡  chartDatasets.Add(chartds); }); //圖表設定x軸標籤  chartSetting.XaxisLabels = xAxisLabels; //圖表設定資料  chartSetting.chartDatasets = chartDatasets; return Json(chartSetting); } 設定圖表時間格式\n\u0026lt;script\u0026gt; var chart = new Chart(ctx, { type: \u0026#39;line\u0026#39;, data: { labels : {}, datasets : {} }, options: { responsive: true, title: { display: true, }, animation: { duration: 2000 }, scales: { xAxes: [{ scaleLabel: { display: true, labelString: \u0026#39;日期\u0026#39;, }, type: \u0026#39;time\u0026#39;, time: { unit: \u0026#39;day\u0026#39;, tooltipFormat: \u0026#39;YYYY-MM-DD\u0026#39;, displayFormats: { \u0026#39;day\u0026#39;: \u0026#39;YY-MM-DD\u0026#39; } } }], yAxes: [{ scaleLabel: { display: true, labelString: \u0026#39;金額\u0026#39;, }, ticks: { beginAtZero: true, } }] }, } }); \u0026lt;/script\u0026gt; 小結 ChartJs在官網的介紹跟範例中有更多樣式和設定的方法\n要注意設定參數、資料的順序、格式是否傳入正確\n否則可能畫出來會不符預期或是圖表顯示不出來\n需要花點時間研究設定的格式\n參考連結   url1   ","date":"2021-05-03T13:59:47+08:00","permalink":"https://hushuuu.github.io/2021/05/03/%E5%9C%96%E8%A1%A8%E5%A5%97%E4%BB%B6%E4%BD%BF%E7%94%A8-chart-js/","title":"圖表套件使用-Chart js"},{"content":"前言 在使用SignalR之前可以先行了解WebSocket的原理\nWebsocket是一個持久化的協議，長期保持連線\n若需要回應時再進行回應。\n而除了WebSocket，也有long poll或利用AjaxLoop\n的方式來實現即時通訊。但另外兩種方式相較之下較為消耗資源。\n初始步驟 Nuget尋找並安裝SignalR相關套件\n如Microsoft.AspNetCore.SignalR.Core\n用戶端程式庫 在 [方案總管] 中，以滑鼠右鍵按一下專案，然後選取 [新增][用戶端程式庫] \u0026gt; 。\n在 [新增用戶端程式庫] 對話方塊中，針對 [提供者] 選取 [unpkg]。\n針對 [程式庫]，輸入 @microsoft/signalr\n選取 [選擇特定檔案]、展開 [散發者/瀏覽器] 資料夾，然後選取 signalr.js 與 signalr.min.js。\n將 [目標位置] 設定為 wwwroot/lib/signalr/，然後選取 [安裝]。\n建立Signal Hub 建立Hubs資料夾\n在 Hubs 資料夾中，建立ChatHub.cs\nusing Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace SignalRChat.Hubs { public class ChatHub : Hub { public async Task SendMessage(string user, string message) { await Clients.All.SendAsync(\u0026#34;ReceiveMessage\u0026#34;, user, message); } } }\u0026gt; 註冊SignalR 在Startup.cs \u0026gt; ConfigureServices方法中加上\nservices.AddSignalR(); 在Startup.cs \u0026gt; Configure中加上\napp.UseSignalR(routes =\u0026gt; { routes.MapHub\u0026lt;ChatHub\u0026gt;(\u0026#34;/chathub\u0026#34;); }); 用戶端Html \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-2\u0026#34;\u0026gt;User\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;userInput\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-2\u0026#34;\u0026gt;Message\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;messageInput\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; id=\u0026#34;sendButton\u0026#34; value=\u0026#34;Send Message\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-12\u0026#34;\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-6\u0026#34;\u0026gt; \u0026lt;ul id=\u0026#34;messagesList\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; id=\u0026#34;btn2\u0026#34; value=\u0026#34;btn2 Message\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;~/lib/jquery/dist/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;~/js/signalr/dist/browser/signalr.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; //chatHub是建立的Hub類別名稱第一個字母要小寫 var connection = new signalR.HubConnectionBuilder().withUrl(\u0026#34;/chatHub\u0026#34;).build(); //Disable send button until connection is established if (document.getElementById(\u0026#39;sendButton\u0026#39;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).disabled = true; } //後端指定特定對象或全部send connection.on(\u0026#34;ReceiveMessage\u0026#34;, function (user, message) { var msg = message.replace(/\u0026amp;/g, \u0026#34;\u0026amp;amp;\u0026#34;).replace(/\u0026lt;/g, \u0026#34;\u0026amp;lt;\u0026#34;).replace(/\u0026gt;/g, \u0026#34;\u0026amp;gt;\u0026#34;); var encodedMsg = user + \u0026#34; says \u0026#34; + msg; var li = document.createElement(\u0026#34;li\u0026#34;); li.textContent = encodedMsg; document.getElementById(\u0026#34;messagesList\u0026#34;).appendChild(li); }); connection.start().then(function () { if (document.getElementById(\u0026#34;sendButton\u0026#34;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).disabled = false; } }).catch(function (err) { return console.error(err.toString()); }); if (document.getElementById(\u0026#39;sendButton\u0026#39;) != null) { document.getElementById(\u0026#34;sendButton\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function (event) { var user = document.getElementById(\u0026#34;userInput\u0026#34;).value; var message = document.getElementById(\u0026#34;messageInput\u0026#34;).value; //將訊息傳至後端  connection.invoke(\u0026#34;SendMessage\u0026#34;, user, message).catch(function (err) { return console.error(err.toString()); }); event.preventDefault(); }); } \u0026lt;/script\u0026gt; 在網頁上開啟開發人員工具F12\n查看Console有無錯誤訊息及正常連線\n參考連結   url1 url2   ","date":"2021-04-29T14:15:05+08:00","permalink":"https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/","title":"Net Core 使用 SignalR實現即時通訊"},{"content":"前言 安裝套件 Microsoft.AspNetCore.Session\nStartup.cs \u0026gt; ConfigureServices中加入\n// 將 Session 存在 ASP.NET Core 記憶體中 services.AddDistributedMemoryCache(); services.AddSession(options =\u0026gt; { options.Cookie.HttpOnly = true; //防止XSS攻擊者存取Cookies }); Startup \u0026gt; Configure中加入\n// SessionMiddleware 加入 Pipeline app.UseSession(); 開始使用 //設定Session HttpContext.Session.SetString(\u0026#34;SessionKey\u0026#34;, \u0026#34;SessionValue\u0026#34;); //取得Session string sVal = HttpContext.Session.GetString(\u0026#34;SessionKey\u0026#34;); Session如果需要存物件進去就需要寫擴充的方法來實現 新增SessionExtensions.cs\n//HttpContext.Session.GetObject\u0026lt;T\u0026gt;(\u0026#34;SessionKey\u0026#34;);  //HttpContext.Session.SetObject\u0026lt;T\u0026gt;(\u0026#34;SessionKey\u0026#34;,object);  public static class SessionExtensions { public static void SetObject\u0026lt;T\u0026gt;(this ISession session, string key, T value) { session.SetString(key, JsonConvert.SerializeObject(value)); } public static T GetObject\u0026lt;T\u0026gt;(this ISession session, string key) { var value = session.GetString(key); return value == null ? default(T) : JsonConvert.DeserializeObject\u0026lt;T\u0026gt;(value); } } Razor Page 中使用 兩種方法都可以取到值\n@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor @{ string vall = HttpContextAccessor.HttpContext.Session.GetString(\u0026#34;SessionKey\u0026#34;); } @using Microsoft.AspNetCore.Http string vall = Context.Session.GetString(\u0026#34;SessionKey\u0026#34;); 參考連結   url1 url2   ","date":"2021-04-23T10:39:28+08:00","permalink":"https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/","title":"NetCore 啟用Session"},{"content":"前言 NetCore就算更改了Local Language若沒做多國語言資源，似乎沒有預設中文的樣板\n除了可以在Attribue裡面自定義錯誤訊息來改成中文但共用屬性每個都改太麻煩了 可以使用自訂義類別實作 IValidationMetadataProvider介面來實現更改預設訊息\n主要內容 建立cs檔\npublic void CreateValidationMetadata(ValidationMetadataProviderContext context) { if (context == null) { throw new ArgumentNullException(); } var validators = context.ValidationMetadata.ValidatorMetadata; // add [Required] for value-types (int/DateTime etc)  // to set ErrorMessage before asp.net does it  var theType = context.Key.ModelType; var underlyingType = Nullable.GetUnderlyingType(theType); if (theType.IsValueType \u0026amp;\u0026amp; underlyingType == null \u0026amp;\u0026amp; // not nullable type  validators.Where(m =\u0026gt; m.GetType() == typeof(RequiredAttribute)).Count() == 0) { validators.Add(new RequiredAttribute()); } foreach (var obj in validators) { if (!(obj is ValidationAttribute attribute)) { continue; } fillErrorMessage\u0026lt;RequiredAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39;是必填欄位.\u0026#34;); fillErrorMessage\u0026lt;MinLengthAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39; 的最小長度是 {1}.\u0026#34;); fillErrorMessage\u0026lt;MaxLengthAttribute\u0026gt;(attribute, \u0026#34;\u0026#39;{0}\u0026#39; 的最大長度是 {1}.\u0026#34;); fillErrorMessage\u0026lt;EmailAddressAttribute\u0026gt;(attribute, \u0026#34;非合法格式的電子信箱.\u0026#34;, true); // other attributes like RangeAttribute, CompareAttribute, etc  } } 在Startup.cs中的ConfigureServices裡加上\nservices.AddControllersWithViews() .AddMvcOptions(m =\u0026gt; { m.ModelMetadataDetailsProviders.Add(new MyModelMetadataProvider()); }); 小結 若要將ErrorMessage顯示多種語言的話。就需要用資源檔來做localization\n只有需要顯示中文的話此篇方法比較簡潔。\n參考連結   url1 url2   ","date":"2021-04-23T10:04:41+08:00","permalink":"https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/","title":"NetCore 更改預設ModelBinding ErrorMessage"},{"content":"前言 NetCore也可以使用原本HtmlHelper的PartialView的方式或用TagHelper來呼叫\n本篇介紹如何使用更豐富的ViewComponent\n主要內容 1.在專案底下新增資料夾ViewComponents\n2.新增一個XXXXViewComponent.cs檔案\n3.檔案內容須符合相關規則(可只擇一規則)才會被辨認為ViewComponent\n//規則:檔名為XXXXViewComponent [Microsoft.AspNetCore.Mvc.ViewComponent] //規則: 類別掛上[ViewComponent] Attribute public class PkindViewComponent : Microsoft.AspNetCore.Mvc.ViewComponent //規則: 類別繼承ViewComponent { public PkindViewComponent() { } public IViewComponentResult Invoke() { return View(); } } View模板預設路徑要放在 Views/Shared/Components/XXXX/Default.cshtml\n就可以開始設計View\n如何使用 在需要呼叫ViewComponent 的檢視下加上\n@addTagHelper *, 專案名稱 再打上vc 就會自動跑出選項代表成功了 \u0026lt;div\u0026gt; \u0026lt;vc:XXXX\u0026gt;\u0026lt;/vc:XXXX\u0026gt; \u0026lt;/div\u0026gt; 應用 也有非同步調用方法InvokeAsync 和含有參數往資料庫撈資料的變化\n[Microsoft.AspNetCore.Mvc.ViewComponent] public class HotSaleComponent : Microsoft.AspNetCore.Mvc.ViewComponent { private Test2021Context _context; public HotSaleComponent(Test2021Context context) { _context = context; } public async Task\u0026lt;IViewComponentResult\u0026gt; InvokeAsync(string ddd) { var list = await _context.PRODUCT //向資料庫拿資料並將list或模型傳回檢視  .ToListAsync(); return View(list)); } } 參考連結   url1 url2 url3   ","date":"2021-04-21T17:50:19+08:00","permalink":"https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/","title":"在Net Core 使用 ViewComponent"},{"content":"前言 EF Core5.0之後增加 LogTo 可使用StramWriter的方式寫在DBContext.cs裡\n但沒試出寫在Startup.cs ConfigureServices\nprivate readonly StreamWriter _logStream = new StreamWriter(\u0026#34;mylog.txt\u0026#34;, append: true); protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) =\u0026gt; optionsBuilder.LogTo(_logStream.WriteLine); public override void Dispose() { base.Dispose(); _logStream.Dispose(); } public override async ValueTask DisposeAsync() { await base.DisposeAsync(); await _logStream.DisposeAsync(); } 普通的Console.Write方法\nservices.AddDbContext\u0026lt;YourContext\u0026gt;(options =\u0026gt; { options.UseSqlServer(Configuration.GetConnectionString(\u0026#34;DefaultConnection\u0026#34;)) .EnableSensitiveDataLogging(); //顯示敏感資料(參數)  options.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information); }); NLog來記錄 先打開Nuget安裝 NLog NLog.Web.AspNetCore\nProgram.cs\npublic static void Main(string[] args) { var logger = NLogBuilder.ConfigureNLog(\u0026#34;NLog.config\u0026#34;).GetCurrentClassLogger(); try { CreateHostBuilder(args).Build().Run(); } catch (Exception ex) { logger.Error(ex, \u0026#34;Get Error.\u0026#34;); throw; } finally { NLog.LogManager.Shutdown(); } } public static IHostBuilder CreateHostBuilder(string[] args) =\u0026gt; Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder =\u0026gt; { webBuilder.UseStartup\u0026lt;Startup\u0026gt;() .UseNLog(); }); 設定appsettings.Development.json的LogLevel\n{ \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Microsoft.EntityFrameworkCore.Database.Command\u0026#34;: \u0026#34;Debug\u0026#34; } } } 產生NLog.config\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt; \u0026lt;nlog xmlns=\u0026#34;http://www.nlog-project.org/schemas/NLog.xsd\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; autoReload=\u0026#34;true\u0026#34; internalLogLevel=\u0026#34;Info\u0026#34; internalLogFile=\u0026#34;c:\\temp\\internal-nlog.txt\u0026#34;\u0026gt; \u0026lt;!-- enable asp.net core layout renderers --\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;add assembly=\u0026#34;NLog.Web.AspNetCore\u0026#34;/\u0026gt; \u0026lt;/extensions\u0026gt; \u0026lt;!-- the targets to write to --\u0026gt; \u0026lt;targets\u0026gt; \u0026lt;!-- write logs to file --\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;allfile\u0026#34; fileName=\u0026#34;D:\\nlog-all-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}\u0026#34; /\u0026gt; \u0026lt;!-- another file log, only own logs. Uses some ASP.NET core renderers --\u0026gt; \u0026lt;target xsi:type=\u0026#34;File\u0026#34; name=\u0026#34;sql-file\u0026#34; fileName=\u0026#34;D:\\nlog-Sql-${shortdate}.log\u0026#34; layout=\u0026#34;${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}\u0026#34; /\u0026gt; \u0026lt;/targets\u0026gt; \u0026lt;!-- rules to map from logger name to target --\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;!--All logs, including from Microsoft--\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; minlevel=\u0026#34;Trace\u0026#34; writeTo=\u0026#34;allfile\u0026#34; /\u0026gt; \u0026lt;!-- BlackHole without writeTo --\u0026gt; \u0026lt;logger name=\u0026#34;*\u0026#34; maxlevel=\u0026#34;Debug\u0026#34; minlevel=\u0026#34;Debug\u0026#34; writeTo=\u0026#34;sql-file\u0026#34; /\u0026gt; \u0026lt;!--Skip non-critical Microsoft logs and so log only own logs--\u0026gt; \u0026lt;logger name=\u0026#34;Microsoft.*\u0026#34; maxlevel=\u0026#34;Info\u0026#34; final=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;/nlog\u0026gt; 小結 使用NLog要注意的是設定的LogLevel層級\nEFCore LogTo若有試出方法再更新\n參考連結   url1 url2 url3   ","date":"2021-04-12T15:00:25+08:00","permalink":"https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/","title":"EntityFramework Core使用NLlog紀錄Sql"},{"content":"前言 .NetCore(net5)\nEntity Framework Core\n紀錄如何初始化\n主要內容 使用PackageManager安裝\nEntityFrameworkCore.SqlServer EntityFrameworkCore.Design EntityFrameworkCore EntityFrameworkCore.SqlServer.Tools 建立 DB模型cs\npublic class Blog { public int Id { get; set; } public string Name { get; set; } } 建立DbContext.cs\npublic partial class Test2021Context : DbContext { public Test2021Context() { } public Test2021Context(DbContextOptions\u0026lt;Test2021Context\u0026gt; options) : base(options) { } public virtual DbSet\u0026lt;Blog\u0026gt; Blogs { get; set; } //相依注入後此方法可註解掉  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { if (!optionsBuilder.IsConfigured) { optionsBuilder.UseSqlServer(\u0026#34;Server=.\\\\sqlexpress;Database=Test2021;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#34;); } } } 進行Mirgration及同步資料庫\nPM\u0026gt; Add-Migration InitialCreate PM\u0026gt; Update-Database -V //若不要直接更新要產出SQL PM\u0026gt; Migration-Script //可手動調整Migration出來的cs檔再做Update DbContext和模型也可以透過逆向工程來產生\n-force覆寫現有的檔案\n-outputdir產出資料夾 -context名稱預設為dbnameContext.cs\nScaffold-DbContext \u0026#39;Server=.\\sqlexpress;Database=Test1202;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#39; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force 將連線字串放進appsettings.json\n\u0026#34;ConnectionStrings\u0026#34;: { \u0026#34;DefaultConnection\u0026#34;: \u0026#34;Server=localhost\\\\SQLEXPRESS;Database=Test2021;Trusted_Connection=True\u0026#34; } 相依注入 Startup.cs\npublic void ConfigureServices(IServiceCollection services) { services.AddControllersWithViews(); services.AddDbContext\u0026lt;Test2021Context\u0026gt;(options =\u0026gt; { //啟用 Logging 觀察 SQL 指令  //連參數一起顯示  options.UseSqlServer(Configuration.GetConnectionString(\u0026#34;DefaultConnection\u0026#34;)) .UseLoggerFactory(LoggerFactory.Create(builder =\u0026gt; builder.AddConsole() .AddDebug() .AddFilter(level=\u0026gt;level==LogLevel.Information))); //LoggerFactory方式  .LogTo(Console.Write, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information) //LogTo的方式  .EnableSensitiveDataLogging(); }); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env,Test2021Context dbContext) { // 建立資料庫  dbContext.Database.EnsureCreated(); //略 } Controller可以套用範本直接產生出CRUD再微調，效率好很多\n範本也會幫忙建立建構子及注入\npublic class BlogController : Controller { private readonly Test2021Context _context; public BlogController(Test2021Context context) { _context = context; } } 小結 紀錄指令\n//逆向工程產生DbContext及模型 Scaffold-DbContext \u0026#39;Server=.\\sqlexpress;Database=Test1202;Trusted_Connection=True;MultipleActiveResultSets=true\u0026#39; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force //CodeFirst Add-Migration InitialCreate Update-Database -V //若不要直接更新要產出SQL Script-Migration //可手動調整Migration出來的cs檔再做Update 參考連結   url1 url2 url3   ","date":"2021-04-09T10:17:00+08:00","permalink":"https://hushuuu.github.io/2021/04/09/entityframework-core%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8/","title":"EntityFramework Core開始使用"},{"content":"前言 MVC本身可在Form Post前使用AntiForgeryToken\n在Action上掛上[ValidateAntiForgeryToken]來檢查驗證\n如果要在Ajax使用可以自行建立驗證\n內建的AntiForgeryToken @using (Html.BeginForm()) { @Html.AntiForgeryToken() } 後端掛在動作上驗證\n[ValidateAntiForgeryToken] public ActionResult Create(){ } Ajax套用自行建立驗證 產生AntiForgeryToken\n@functions{ public static string GetAntiForgery() { string cookieToken, formToken; AntiForgery.GetTokens(null, out cookieToken, out formToken); return String.Concat(cookieToken, \u0026#34;@.@\u0026#34;, formToken); } } function deleteUser() { var token = $(\u0026#39;@Html.AntiForgeryToken()\u0026#39;).val(); //防偽標記放入headers  //也可以將防偽標記放入data  $.ajax({ type: \u0026#39;POST\u0026#39;, url: \u0026#34;/User/Delete\u0026#34;, headers: { \u0026#39;__RequestVerificationToken\u0026#39;: token }, cache: false, data: { \u0026#34;id\u0026#34;: $(\u0026#34;#delid\u0026#34;).val()}, complete: function (data) { alert(data.responseJSON[\u0026#34;Data\u0026#34;]); document.location.href = \u0026#34;/User/Index\u0026#34;; } }); } 後端自行建立Attribute驗證\npublic class MyValidateAntiForgeryToken : AuthorizeAttribute { public override void OnAuthorization(AuthorizationContext filterContext) { var request = filterContext.HttpContext.Request; if (request.HttpMethod == WebRequestMethods.Http.Post) { if (request.IsAjaxRequest()) { var antiForgeryCookie = request.Cookies[AntiForgeryConfig.CookieName]; var cookieValue = antiForgeryCookie != null ? antiForgeryCookie.Value : null; //從cookies 和 Headers 中 驗證防偽標記  //這裡可以加try-catch  AntiForgery.Validate(cookieValue, request.Headers[\u0026#34;__RequestVerificationToken\u0026#34;]); } else { new ValidateAntiForgeryTokenAttribute() .OnAuthorization(filterContext); } } } } [MyValidateAntiForgeryToken] public ActionResult Delete(string id){} 參考連結   url1   ","date":"2021-03-29T15:56:17+08:00","permalink":"https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/","title":"MVC-使用AntiForgery Token防止跨網站(XSRF/CSRF)攻擊"},{"content":"前言 Html的Img標籤可以將src設為轉換後的Base64 String也可以顯示出圖片\n若WebApi需要交流檔案也可以將檔案轉換為Base64進行溝通\nPost前轉換 建立一個按鈕事件將轉換後的base64String Post至後端\n$(document).on(\u0026#39;click\u0026#39;, \u0026#39;#subBtn\u0026#39;, function () { demo().then((obj) =\u0026gt; { $.ajax({ url: \u0026#34;../\u0026#34;, // url位置  type: \u0026#34;POST\u0026#34;, contentType: \u0026#34;application/json\u0026#34;, data: JSON.stringify(obj),// 輸入的資料  success: function (response) { }//  }); }); }); 使用FileReader來讀取上傳的檔案\n因為readAsDataURL是非同步讀取\n若不做非同步等待處理\n檔案還未處理完就會被Post出去造成傳遞不到正確資料\n故需將函式套上async並await等候所有檔案都處理完\nconst demo = async () =\u0026gt; { var obj = {}; var filearray = []; var file_name = []; let files = $(\u0026#34;input[name=upload_file]\u0026#34;)[0].files; for (let i = 0; i \u0026lt; files.length; i++) { var reader = new FileReader(); reader.readAsDataURL(files[i]); //data url  const result = await new Promise((resolve, reject) =\u0026gt; { reader.onload = function (e) { var buffer = e.target.result; //是data url  const base64String = buffer //只取得base64 string  .replace(\u0026#34;data:\u0026#34;, \u0026#34;\u0026#34;) .replace(/^.+,/, \u0026#34;\u0026#34;); resolve(base64String); } }); filearray.push(result); file_name.push(files[i].name); } obj = { file_byte: filearray, file_name: file_name }; return obj; }; Post後轉換 上傳至後端才做轉換的處理相較之下就簡單許多\nfor (int i = 0; i \u0026lt; Request.Files.Count; i++) { HttpPostedFileBase file = Request.Files[i]; MemoryStream ms = new MemoryStream(); file.InputStream.CopyTo(ms); byte[] btarr = ms.ToArray(); string basestr = Convert.ToBase64String(btarr); } 小結 async await Promise這些非同步相關的使用上需要花點時間理解\n主要目的為實現等待：檔案非同步讀取完全做完才上傳出去\n參考連結   url1 url2   ","date":"2021-03-25T11:15:44+08:00","permalink":"https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/","title":"MVC-上傳檔案轉為Base64String"},{"content":"FormPost 如果要用FormPost的方式上傳檔案\n注意將Form的Content-Type 設定為enctype=\u0026quot;multipart/form-data\u0026quot;\n\u0026lt;input type=\u0026quot;file\u0026quot; accept=\u0026quot;.png, .jpg, .jpeg\u0026quot; name=\u0026quot;Filedata\u0026quot; class=\u0026quot;btn btn-default\u0026quot; /\u0026gt;\nFormDataPost到後端後可以這樣來接收\npublic ActionResult Create(HttpPostedFileBase Filedata) { //可利用正則式過濾副檔名 if (Filedata != null \u0026amp;\u0026amp; Regex.IsMatch(Path.GetExtension(Filedata.FileName), \u0026#34;^[.](jpg|png|jpeg|gif|bmp)$\u0026#34;, RegexOptions.IgnoreCase)) { //存到資料夾  string tmpPath1 = Server.MapPath(\u0026#34;~/Images/\u0026#34;); if (!Directory.Exists(tmpPath1)) Directory.CreateDirectory(tmpPath1); var FileName = Path.GetFileName(Filedata.FileName); var FilePath = Path.Combine(Server.MapPath(\u0026#34;~/Images/\u0026#34;), FileName); Filedata.SaveAs(FilePath); string save_path = \u0026#34;/Images/\u0026#34; + FileName; pcm.pic_path = save_path; } } XMLHttpRequest上傳 建立FormData利用XMLHttpRequest發出請求\n監聽上傳事件可顯示出上傳進度\n//上傳檔案 var file = null; $(\u0026#39;#Filedata1\u0026#39;)[0].addEventListener(\u0026#39;change\u0026#39;, readFile, false); function readFile() { file = this.files[0]; } function upload() { let xhr = new XMLHttpRequest(); let fd = new FormData(); fd.append(\u0026#34;fileName\u0026#34;, file); //監聽事件  xhr.upload.addEventListener(\u0026#34;progress\u0026#34;, uploadProgress, false); //傳送檔案和表單自定義引數  xhr.overrideMimeType(\u0026#34;application/json\u0026#34;); xhr.open(\u0026#34;POST\u0026#34;, \u0026#34;@Url.Action(\u0026#34;XHR_UPLOAD\u0026#34;,\u0026#34;HOME\u0026#34;)\u0026#34;, true); xhr.send(fd); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { let response = JSON.parse(xhr.responseText); let pic_path = response[\u0026#34;imgSrc\u0026#34;]; $(\u0026#34;#pic_path\u0026#34;).val(pic_path); $(\u0026#34;#uploadModal\u0026#34;).modal(\u0026#34;hide\u0026#34;); $(\u0026#34;#img1\u0026#34;).show(); $(\u0026#34;#img1\u0026#34;).attr(\u0026#39;src\u0026#39;, pic_path); } }; } function uploadProgress(evt) { if (evt.lengthComputable) { //evt.loaded：檔案上傳的大小 evt.total：檔案總的大小  var percentComplete = Math.round((evt.loaded) * 100 / evt.total); //載入進度條，同時顯示資訊  $(\u0026#34;#percent\u0026#34;).html(percentComplete + \u0026#39;%\u0026#39;); $(\u0026#34;#progressNumber\u0026#34;).css(\u0026#34;width\u0026#34;, percentComplete + \u0026#34;px\u0026#34;); } } 進度條顯示\n\u0026lt;div style=\u0026#34;background:#848484;width:100px;height:10px;margin-top:5px\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;progressNumber\u0026#34; style=\u0026#34;background:#428bca;width:0px;height:10px\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;font id=\u0026#34;percent\u0026#34;\u0026gt;0%\u0026lt;/font\u0026gt; 後端\npublic ActionResult XHR_UPLOAD() { //Request取得上傳的File  //回傳上傳後檔案路徑及資訊JsonString  string str = \u0026#34;\u0026#34;; if (Request.Files.Count \u0026gt; 0) { str = \u0026#34;{\u0026#34;; //當資料夾不存在時，建立此資料夾  if (!Directory.Exists(Server.MapPath(\u0026#34;~/Images/\u0026#34;))) Directory.CreateDirectory(Server.MapPath(\u0026#34;~/Images/\u0026#34;)); HttpPostedFileBase f = Request.Files[0]; string file_name = f.FileName; string file_path = Server.MapPath(\u0026#34;~/Images/\u0026#34;) + file_name; string save_path = \u0026#34;/Images/\u0026#34; + file_name; f.SaveAs(file_path); str += \u0026#34;\\\u0026#34;imgSrc\\\u0026#34;:\\\u0026#34;\u0026#34; + save_path + \u0026#34;\\\u0026#34;,\u0026#34;; str += \u0026#34;\\\u0026#34;imgName\\\u0026#34;:\\\u0026#34;\u0026#34; + file_name + \u0026#34;\\\u0026#34;\u0026#34;; str += \u0026#34;}\u0026#34;; } return Content(str); } 小結 也可以試試Ajax的方式上傳檔案\n要注意就是後端能不能接到File\n接不到就需調整參數如Post的Content-type\n","date":"2021-03-25T10:44:23+08:00","permalink":"https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/","title":"MVC-檔案上傳Post"},{"content":"前言 LINQ在資料的過濾以及查詢方面非常方便，不只可以在EF中轉為SQL語句\n也能對平常的List型別進行過濾查詢。\n主要內容 Linq有兩種表示式，有一種是使用Lambda表示式\nvar p = from t in products where t.Name == \u0026#34;牙膏\u0026#34; select t; //Lambda var p2 = products.Where(t =\u0026gt; t.Name == \u0026#34;牙膏\u0026#34;); JOIN //left join linq var q = from e in Db.Page_M orderby e.page_stack join s in ( from s in Db.Group_D where s.group_id==group_id select s) on new { page_id = e.page_id } equals new { page_id = s.page_id } into subGrp from s in subGrp.DefaultIfEmpty() select new GroupDModel { page_id = e.page_id, page_name = e.page_name, controller = e.controller, action = e.action, can_enter = s.can_enter ?? false, can_see = s.can_see ?? false, page_stack = e.page_stack }; //left join lambda var qq = Db.Page_M.OrderBy(x=\u0026gt;x.page_stack) .GroupJoin(Db.Group_D.Where(x=\u0026gt;x.group_id==group_id), e =\u0026gt; e.page_id, s =\u0026gt; s.page_id, (e, s) =\u0026gt; new { page = e, group = s }) .SelectMany(s =\u0026gt; s.group.DefaultIfEmpty(), (e, s) =\u0026gt; new GroupDModel { page_id = e.page.page_id, page_name = e.page.page_name, controller = e.page.controller, action = e.page.action, can_enter = s.can_enter ?? false, can_see = s.can_see ?? false, page_stack = e.page.page_stack }); 比較複雜的語法得仔細檢查是否結果無誤\nList\u0026lt;BuyDtl\u0026gt; all_list = query.ToList(); all_list.GroupBy(x =\u0026gt; x.pro_id).Select(x =\u0026gt; x.Key) .ToList() .ForEach(z =\u0026gt; { all_list.Where(x =\u0026gt; x.pro_id == z) //groupBy日期  .GroupBy(x =\u0026gt; new { pro_id = x.pro_id, doc_date = x.BuyMst.doc_date }) .Select(x =\u0026gt; new { doc_date = x.Key.doc_date, s_qty = x.Sum(y =\u0026gt; y.qty) }) .ToList() .ForEach(c =\u0026gt; { ChartPointData\u0026lt;DateTime, decimal?\u0026gt; cpd = new ChartPointData\u0026lt;DateTime, decimal?\u0026gt; { x = c.doc_date.Value, y = c.s_qty }; }); }); IQueryable\u0026lt;BuyDtl\u0026gt; query = Db.BuyDtl.Where(x =\u0026gt; x.BuyMst.doc_date == today); //當天全部  ChartDatasets\u0026lt;string, decimal?\u0026gt; chart_ds = new ChartDatasets\u0026lt;string, decimal?\u0026gt;(); List\u0026lt;ChartPointData\u0026lt;string, decimal?\u0026gt;\u0026gt; lst_p = new List\u0026lt;ChartPointData\u0026lt;string, decimal?\u0026gt;\u0026gt;(); query.GroupBy(y =\u0026gt; new { pro_id = y.pro_id }) .Select(z =\u0026gt; new { pro_id = z.Key.pro_id, s_qty = z.Sum(c =\u0026gt; c.qty) }) .ToList() .ForEach(v =\u0026gt; { string proname = Db.Product.Where(y =\u0026gt; y.pro_id == v.pro_id).Select(y =\u0026gt; y.pro_name).FirstOrDefault(); }); 小結 linq is good\n參考連結   url1   ","date":"2021-03-16T16:46:20+08:00","permalink":"https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/","title":"Linq常用的語法與基本介紹"},{"content":"前言 在一對多的資料表下，一個表頭會對應好幾筆的明細\n開發儲存明細時，該如何實現。\n主要內容 若要新增資料要包含新增多筆明細。\n可以在新增頁上建立一個Table\n並進行新增一筆及刪除一筆的行為\n最後儲存時在將table進行post回去的處理\n一種方法是在畫面上讓使用者挑選輸入明細\n輸入完畢塞一筆進html的table\n\u0026lt;p\u0026gt;\u0026lt;h4\u0026gt;訂單明細\u0026lt;/h4\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;choseProd\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-12\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-2\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;選擇商品至明細\u0026lt;/h5\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-2\u0026#34;\u0026gt; @Html.DropDownList(\u0026#34;ChoseProd\u0026#34;, Model.AllProducts, new { @class = \u0026#34;form-control\u0026#34; }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt; @Html.EditorFor(m =\u0026gt; m.QtyForSel, new { htmlAttributes = new { @class = \u0026#34;form-control\u0026#34;, @Min = \u0026#34;0\u0026#34; } }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-default\u0026#34; id=\u0026#34;addBtn\u0026#34; type=\u0026#34;button\u0026#34;\u0026gt;新增\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 新增按鈕呼叫applist()AJAX POST查詢商品價格後回傳\n串接HTML(顯示欄位+隱藏的Input欄位)\nAppend到明細Table\nfunction applist() { var chosepod = $(\u0026#34;#ChoseProd\u0026#34;).val(); var qtyforsel = $(\u0026#34;#QtyForSel\u0026#34;).val(); var price = 0; $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;@Url.Action(\u0026#34;GetProdPrice\u0026#34;, \u0026#34;Order\u0026#34;)\u0026#34;, data: { prod_id: chosepod }, success: function (data) { var jo = JSON.parse(data); price = jo.price; var chosepod = $(\u0026#34;#ChoseProd\u0026#34;).val(); var chosepod_text = $(\u0026#34;#ChoseProd option:selected\u0026#34;).text(); var qtyforsel = $(\u0026#34;#QtyForSel\u0026#34;).val(); var tb_append = \u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td name=\u0026#34;pro_name\u0026#34;\u0026gt;\u0026#39; + chosepod_text + \u0026#39;\u0026lt;input name=\u0026#34;pro_name\u0026#34; value=\u0026#34;\u0026#39; + chosepod_text + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026#39; + \u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;price\u0026#34;\u0026gt;\u0026#39; + price + \u0026#39;\u0026lt;input name=\u0026#34;pirce\u0026#34; value=\u0026#34;\u0026#39; + price + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;qty\u0026#34;\u0026gt;\u0026#39; + qtyforsel + \u0026#39;\u0026lt;input name=\u0026#34;qty\u0026#34; value=\u0026#34;\u0026#39; + qtyforsel + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td name=\u0026#34;pro_id\u0026#34; hidden\u0026gt;\u0026#39; + chosepod + \u0026#39;\u0026lt;input name=\u0026#34;pro_id\u0026#34; value=\u0026#34;\u0026#39; + chosepod + \u0026#39;\u0026#34; hidden/\u0026gt;\u0026lt;/td\u0026gt;\u0026#39; + \u0026#39;\u0026lt;td\u0026gt;\u0026lt;a class=\u0026#34;btn btn-danger btn-sm deltr\u0026#34; onclick=\u0026#34;\u0026#34;\u0026gt;X\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39; $(\u0026#39;#tb1\u0026#39;).append(tb_append); } }); } 後端Action\npublic ActionResult GetProdPrice(string prod_id) { var prod = Db.Product.Where(x=\u0026gt;x.pro_id==prod_id).Select(x=\u0026gt;new { pro_id=x.pro_id,pro_name=x.pro_name,price=x.price}).Single(); string result = JsonConvert.SerializeObject(prod); return Json(result); } 儲存行為處理 後端接收明細的參數資料型態應為List\u0026lt;\u0026gt;\n故在POST之前需每一筆的input欄位要做name的調整\nArray的話需要改成arr[0] arr[1]後端才辨識的出來\n$(this).find(\u0026#34;input\u0026#34;).eq(3).attr(\u0026#34;name\u0026#34;, \u0026#34;orderdtllist[\u0026#34; + j + \u0026#34;].pro_id\u0026#34;); 小結 一對多的儲存上較為複雜一些\n也可以在明細增加編輯功能來修改單筆就好\n要注意的是明細與表頭的關聯\n還有後端Binding參數的正確於否\n","date":"2021-03-16T15:50:53+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/","title":"MVC-包含明細的儲存"},{"content":"前言 前端有很多實用的table套件如DataTable.js可以直接實現排序換頁搜尋\n本篇主要練習如何手動刻出類似的功能。\n分頁 分頁的概念為設定一頁需顯示幾筆，再將資料分為幾等分來決定\n要顯示第幾頁的資料，根據資料庫的種類用 Rownum Limit等\n還可以用LinQ Skip() Take()\nvar list = query.Skip(startIndex).Take(pageSize).toList(); //舉例一頁顯示10筆，要顯示第3頁的資料  //Skip前兩頁的資料 =\u0026gt; 10*2  //Skip 20筆 Take 10筆 分頁導覽列 傳回前端的資料除了這十筆，也需要將分頁的資訊傳入進行判斷\npage當前頁數 EndPage最後頁 TotalItemCount總筆數等\n建立導覽列\nif (page == 1) { \u0026lt;a class=\u0026#34;btn-default btn-sm disabled\u0026#34; id=\u0026#34;last_btn\u0026#34;\u0026gt;上頁\u0026lt;/a\u0026gt; } else { int nextnum = page - 1; \u0026lt;a class=\u0026#34;btn-default btn-sm\u0026#34; id=\u0026#34;last_btn\u0026#34; href=\u0026#34;@url?page=@nextnum\u0026#34;\u0026gt;上頁\u0026lt;/a\u0026gt; } if (page == Endpage) { \u0026lt;a class=\u0026#34;btn-default btn-sm disabled\u0026#34; id=\u0026#34;next_btn\u0026#34;\u0026gt;下頁\u0026lt;/a\u0026gt; } else { int nextnum = page + 1; \u0026lt;a class=\u0026#34;btn-default btn-sm\u0026#34; id=\u0026#34;next_btn\u0026#34; href=\u0026#34;@url?page=@nextnum\u0026#34;\u0026gt;下頁\u0026lt;/a\u0026gt; } 概念為按下換頁將頁數傳至後端再進行資料過濾\n接著再加上排序的功能\n點擊標頭來排序並標記上顏色\n將排序的欄位和順序及頁數資訊 AJAX post進後端查詢\n傳回html TABLE直接取代\nvar ordering_field = Session[\u0026#34;ordering_field\u0026#34;] ?? \u0026#34;\u0026#34;; var ordering_kind = Session[\u0026#34;ordering_kind\u0026#34;] ?? \u0026#34;\u0026#34;; $(document).on(\u0026#39;click\u0026#39;, \u0026#39;#tb1 thead tr th\u0026#39;, function () { //去除顏色  $(this).closest(\u0026#39;tr\u0026#39;).find(\u0026#39;th\u0026#39;).each(function (index) { $(this).removeAttr(\u0026#39;style\u0026#39;); }); let order_field = $(this).attr(\u0026#39;name\u0026#39;); let order_kind = \u0026#34;Desc\u0026#34;; if (ordering_field == order_field \u0026amp;\u0026amp; ordering_kind == \u0026#34;Desc\u0026#34;) { order_kind = \u0026#34;Asc\u0026#34;; $(this).css(\u0026#39;background-color\u0026#39;, \u0026#39;yellow\u0026#39;); } else { $(this).css(\u0026#39;background-color\u0026#39;, \u0026#39;pink\u0026#39;); } let Lvm = { page:@Model.page, EndPage:@Model.EndPage, pageSize:@Model.pageSize, TotalItemCount:@Model.TotalItemCount, OrderField: order_field, OrderKind: order_kind }; let obj = { Lvm: Lvm } $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;@Url.Action(\u0026#34;OrderByField\u0026#34;,\u0026#34;Order\u0026#34;)\u0026#34;, data: obj, success: function (data) { $(\u0026#39;#tb1 tbody\u0026#39;).html(data); ordering_field = order_field; ordering_kind = order_kind; } }); }); AJAX回傳PartialView結果，Partial產出Table直接取代原先Html\nSession可以記住排序的欄位順序甚至查詢條件\n再切換頁面或其他動作時可恢復原本過濾後的結果\nreturn PartialView(\u0026#34;_SortOrderView\u0026#34;, Lvm); 小結 若沒有特別的要求，其實使用前端套件來的更方便快速\n但在刻畫功能過程中確實也能收穫不少！\n*在使用LinQ排序時可引用一個套件方便做欄位的DESC及ASC Using Linq.Dynamic;\n","date":"2021-03-16T14:43:46+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/","title":"MVC-Table排序與分頁"},{"content":"前言 此篇根據頁面資料表間的父子關係，利用遞迴來產生Menu的選單\n並透過群組來進行頁面權限的管控\n主要內容 基本的頁面資料表結構，重要的是parent_id代表此頁面父階層頁面的page_id\npublic class PageModel { [Display(Name = \u0026#34;頁號\u0026#34;)] public string page_id { get; set; } [Display(Name = \u0026#34;頁面名稱\u0026#34;)] public string page_name { get; set; } [Display(Name = \u0026#34;Controller\u0026#34;)] public string controller { get; set; } [Display(Name = \u0026#34;Action\u0026#34;)] public string action { get; set; } [Display(Name = \u0026#34;父頁面\u0026#34;)] public string parent_id { get; set; } } 產生選單的部分使用bootstrap的navbar\n並透過Partial View的方式來載入管控的頁面\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;navbar-toggle\u0026#34; data-toggle=\u0026#34;collapse\u0026#34; data-target=\u0026#34;.navbar-collapse\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;icon-bar\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; @Html.ActionLink(\u0026#34;Home\u0026#34;, \u0026#34;Index\u0026#34;, \u0026#34;Home\u0026#34;, new { area = \u0026#34;\u0026#34; }, new { @class = \u0026#34;navbar-brand\u0026#34; }) \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;navbar-collapse collapse\u0026#34;\u0026gt; @Html.Partial(\u0026#34;_MenuPart\u0026#34;) \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 需先在登入後產生Menu前將Page的資料List放進Session\nPartial View使用遞迴尋找父子關係來產生節點\n@{ List\u0026lt;PageModel\u0026gt; nodeList = Session[\u0026#34;page_list\u0026#34;] as List\u0026lt;PageModel\u0026gt;; if(nodeList == null) { nodeList = new List\u0026lt;PageModel\u0026gt;(); } } @TopMenu(nodeList) @helper TopMenu(List\u0026lt;PageModel\u0026gt; nodeList) { //沒有父節點代表最上方MENU  var NoParentList = nodeList.Where(x =\u0026gt; x.parent_id == null ).ToList(); \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; @foreach (GroupLoginDtl node in NoParentList) { //此節點沒有孩子代表自身為連結  if (!nodeList.Any(z =\u0026gt; z.parent_id == node.page_id )) { string url = \u0026#34;https://\u0026#34; + Request.Url.Authority + \u0026#34;/\u0026#34; + node.controller + \u0026#34;/\u0026#34; + node.action; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;@url\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; } else { //找到所有孩子產生一個dropdown以自身為觸發點  var childrenList = nodeList.Where(x =\u0026gt; x.parent_id == node.page_id ).ToList(); \u0026lt;li class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;dropdown-toggle\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;@node.page_name \u0026lt;b class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt;@DropDownMenu(childrenList, nodeList)\u0026lt;/li\u0026gt; } } \u0026lt;/ul\u0026gt; } @helper DropDownMenu(List\u0026lt;GroupLoginDtl\u0026gt; childrenList, List\u0026lt;GroupLoginDtl\u0026gt; nodeList) { \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; @foreach (var node in childrenList) { //孩子若沒有孩子就是連結  string url = \u0026#34;https://\u0026#34; + Request.Url.Authority+\u0026#34;/\u0026#34;+node.controller + \u0026#34;/\u0026#34; + node.action; if (!nodeList.Any(x =\u0026gt; x.parent_id == node.page_id )) { \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;@url\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; } else { //找到孩子的孩子們以自身為觸發點產生submenu並遞迴產生ul dropdown-menu  var childrenList2 = nodeList.Where(x =\u0026gt; x.parent_id == node.page_id ).ToList(); \u0026lt;li class=\u0026#34;dropdown-submenu\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;@node.page_name\u0026lt;/a\u0026gt;@DropDownMenu(childrenList2, nodeList)\u0026lt;/li\u0026gt; } } \u0026lt;/ul\u0026gt; } 因此篇為引入bootstrap3 多層選單子節點的部分需要做css的調整\n\u0026lt;style\u0026gt; /*多層下拉選單設定*/ .dropdown-submenu { position: relative; } .dropdown-submenu \u0026gt; .dropdown-menu { top: 0; left: 100%; margin-top: -6px; margin-left: -1px; -webkit-border-radius: 0 6px 6px 6px; -moz-border-radius: 0 6px 6px 6px; border-radius: 0 6px 6px 6px; } .dropdown-submenu:hover \u0026gt; .dropdown-menu { display: block; } .dropdown-submenu \u0026gt; a:after { display: block; content: \u0026#34; \u0026#34;; float: right; width: 0; height: 0; border-color: transparent; border-style: solid; border-width: 5px 0 5px 5px; border-left-color: #cccccc; margin-top: 5px; margin-right: -10px; } .dropdown-submenu:hover \u0026gt; a:after { border-left-color: #ffffff; } .dropdown-submenu.pull-left { float: none; } \u0026lt;/style\u0026gt; 權限群組 做好頁面管理後，可以建立群組資料表來將每個群組賦予不同的權限\n每個群組的明細為所有頁面，調整此頁是否可進入/可出現在Menu\n做好群組後，只需要調整Session為該登入者群組明細\n並在Partial View增加判斷是否需產生此節點。\npublic class GroupM { [Display(Name = \u0026#34;群組編號\u0026#34;)] public string group_id { get; set; } [Display(Name = \u0026#34;群組名稱\u0026#34;)] public string group_name { get; set; } } public class GroupD { [Display(Name = \u0026#34;可看\u0026#34;)] public bool can_see { get; set; } [Display(Name = \u0026#34;可進入\u0026#34;)] public bool can_enter { get; set; } [Display(Name = \u0026#34;頁號\u0026#34;)] public string page_id { get; set; } [Display(Name = \u0026#34;頁面名稱\u0026#34;)] public string page_name { get; set; } [Display(Name = \u0026#34;Controller\u0026#34;)] public string controller { get; set; } [Display(Name = \u0026#34;Action\u0026#34;)] public string action { get; set; } [Display(Name = \u0026#34;父頁面\u0026#34;)] public string parent_id { get; set; } } 訪問權限 雖然在Menu上是看不到不被允許的頁面節點\n但仍可以透過網址來訪問該頁\n所以當做好群組權限設定後，在進Action之前就檔掉不被允許的訪問\n利用此篇介紹的Filter來達成\npublic override void OnActionExecuting(ActionExecutingContext filterContext) { string controller = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName; string action = filterContext.ActionDescriptor.ActionName; List\u0026lt;PageModel\u0026gt; groupList = HttpContext.Current.Session[\u0026#34;PageModel\u0026#34;] as List\u0026lt;PageModel\u0026gt;; if(!groupList.Any(z=\u0026gt;z.can_enter==true \u0026amp;\u0026amp; z.controller==controller \u0026amp;\u0026amp; z.action == action)) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = \u0026#34;Home\u0026#34;, action = \u0026#34;Index\u0026#34; })); } } 小結 頁面權限的管控有很多種方式，也可以透過不同權限載入不同Layout的方式\n子選單顯示的部分，bootstrap較新版本或是其他方式應也可達成需求\n總結在有父子關聯的處理上，使用遞迴的概念是非常實用的。\n參考連結   url1   ","date":"2021-03-16T08:49:37+08:00","permalink":"https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/","title":"MVC-頁面及權限管理"},{"content":"前言 介紹NPOI及EPPlus套件來將資料產出成Excel。\n主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls\npublic ActionResult getExcel() { var result = List\u0026lt;Data\u0026gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(\u0026#34;sheet\u0026#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = \u0026#34;微軟正黑體\u0026#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(\u0026#34;商品清單\u0026#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.CreateRow(1).CreateCell(0).SetCellValue(\u0026#34;商品編號\u0026#34;); sheet.GetRow(1).CreateCell(1).SetCellValue(\u0026#34;商品名\u0026#34;); sheet.GetRow(1).CreateCell(2).SetCellValue(\u0026#34;單價\u0026#34;); sheet.GetRow(1).CreateCell(3).SetCellValue(\u0026#34;庫存\u0026#34;); //填入資料  int rowIndex = 2; for (int row = 0; row \u0026lt; result.Count(); row++) { sheet.CreateRow(rowIndex).CreateCell(0).SetCellValue(result[row].pro_id); sheet.GetRow(rowIndex).CreateCell(1).SetCellValue(result[row].pro_name); sheet.GetRow(rowIndex).CreateCell(2).SetCellValue(Convert.ToDouble(result[row].price)); sheet.GetRow(rowIndex).CreateCell(3).SetCellValue(Convert.ToDouble(result[row].qty)); rowIndex++; } System.IO.MemoryStream ms = new System.IO.MemoryStream(); xssfworkbook.Write(ms); string handle = Guid.NewGuid().ToString(); TempData[handle] = ms.ToArray(); return Json(data: new { FileGuid = handle, FileName = \u0026#34;商品清單.xlsx\u0026#34; }) ; } 因為是透過AJAX方式進後端，回傳這部分將檔案的MemoryStream Array利用TempData傳回\n並取得一個Guid來當這資料的KEY，回傳KEY和檔案名稱回View。\nAjax回傳至前端後，利用iframe的方式實現下載(打下載的Action)\nAjax完成回傳的ata var response = data; //iframe  $(\u0026#34;#ifrm\u0026#34;).remove(); var ifrm = document.createElement(\u0026#34;iframe\u0026#34;); ifrm.setAttribute(\u0026#34;src\u0026#34;, \u0026#39;/Product/Download?fileGuid=\u0026#39; + response.FileGuid + \u0026#39;\u0026amp;filename=\u0026#39; + response.FileName); ifrm.style.display = \u0026#34;none\u0026#34;; ifrm.id = \u0026#34;ifrm\u0026#34;; let dv = $(\u0026#34;\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;).html(ifrm); $(\u0026#39;body\u0026#39;).append(dv); 下載部分 [HttpGet] public virtual ActionResult Download(string fileGuid, string fileName) { if (TempData[fileGuid] != null) { byte[] data = TempData[fileGuid] as byte[]; return File(data, \u0026#34;application/vnd.ms-excel\u0026#34;, fileName); } else { return new EmptyResult(); } } 不過有另一種更簡明易懂的方式\nAction可以直接回傳File Result就可以實現下載\n使用Form Post的方法並開新頁target=\u0026quot;_blank\u0026quot; 直接回傳檔案型別\npublic ActionResult getExcel2(IWorkbook workbook) { System.IO.MemoryStream ms = new System.IO.MemoryStream(); workbook.Write(ms); return File(ms.ToArray(), \u0026#34;application/vnd.ms-excel\u0026#34;, string.Format($\u0026#34;商品清單.xlsx\u0026#34;)); } 小結 產生Excel之後，也可以選擇先產生存在Server端，Client端再去取得Server端檔案路徑進行下載。\n本文的方式都不會在Server端產生檔案。可以節省Server端空間也不用有清除歷史檔案的需求。\n不過也有需在Server端產檔的可能，再另外做調整。\n參考連結   url1 url2   ","date":"2021-03-15T17:15:18+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/","title":"MVC-產出Excel"},{"content":"前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET\n使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作\n第一步 直接連線並查詢出結果的範例\nstring connStr = \u0026#34;連線字串\u0026#34;; string sql = \u0026#34;SELECT * FROM Product Where id=@id\u0026#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(\u0026#34;id\u0026#34;,\u0026#34;1\u0026#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護\n這時候就可以利用封裝的概念將code包起來\n先建立一個新類別檔DataAccess.cs\npublic class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.ConnectionString; InitCmd(); } protected void InitCmd(){ if(Cmd == null){ Cmd = new SqlCommand(); Cmd.Connection = Conn; } } protected void OpenConnIfClosed(){ if(Conn.State == ConnectionState.Closed){ Conn.Open(); } } protected void CloseConn(){ Conn.Close(); } } 將對資料庫的Connection及Command初始化行為建立在類別中。\n可以根據Transaction需求及Query再擴展\nprotected SqlTransaction Transaction { get; set; } private bool UseTransaction { get; set; } //SQL查詢  protected T SqlQuery_result\u0026lt;T\u0026gt;(string strSql, Dictionary\u0026lt;string, object\u0026gt; parameters=null,CommandType cmdType = CommandType.Text ) { T tobj = default(T); try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSql; Cmd.Parameters.Clear(); if (parameters != null \u0026amp;\u0026amp; parameters.Count \u0026gt; 0) { foreach (var item in parameters) { if (item.Value == null) Cmd.Parameters.AddWithValue(item.Key, DBNull.Value); else Cmd.Parameters.AddWithValue(item.Key, item.Value); } } using (SqlDataReader odr = Cmd.ExecuteReader()) { if (odr.HasRows) { odr.Read(); Type y = odr[0].GetType(); if (typeof(T) == y) { tobj = (T)Convert.ChangeType(odr[0],typeof(T)); } else { tobj = default; } } } Cmd.Parameters.Clear(); if (!UseTransaction) { CloseConn(); } return tobj; } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } } SqlQuery_result有使用泛型T，可不事先決定這Function回傳的資料型態。\n但此方法只可以查詢單筆單個欄位，如果想要查詢Select * from Product這種結果的話就要再調整。 可以利用Reflection反射，來對應泛型的屬性。此篇先不多提。\n除了Query之外還有執行的需求，也一樣擴充我們的類別\nprotected int ExecuteSqlCommand(string strSQL, Dictionary\u0026lt;string, object\u0026gt; parameters = null, CommandType cmdType = CommandType.Text ) { int effectRows = -1; try { OpenConnIfClosed(); Cmd.CommandType = cmdType; if (UseTransaction \u0026amp;\u0026amp; Transaction != null) { Cmd.Transaction = Transaction; } Cmd.CommandText = strSQL; Cmd.Parameters.Clear(); if (parameters != null) { foreach (var item in parameters) { Cmd.Parameters.AddWithValue(item.Key, item.Value == null ? DBNull.Value : item.Value); } } effectRows = Cmd.ExecuteNonQuery(); if (!UseTransaction) { CloseConn(); } } catch (Exception e) { if (!UseTransaction) { Dispose(); } throw e; } return effectRows; } 再簡化 到這裡已經把初始化連線、建立Command、查詢及執行都封裝成一個類別了！\n但方法的存取修飾詞為什麼是protected?\n使用DataAccess類別時，需要在Controller中new連線物件並寫增刪修查語法後Call物件的方法。\n如果要更加的簡化Controller裡的Code，可以再將增刪修查的動作提取出來，使得Controller結構一目了然\n舉例資料表User，建立一個類別檔UserDB.cs\n繼承DataAccess類別來建立增刪修查的方法\n*父類別protected的屬性或方法為了限制給繼承DataAcess的類別可使用\npublic class UserDB : DataAccess { public UserDB(SqlConnection Conn) : base(Conn) { } public List\u0026lt;User\u0026gt; ListUser(string Qid = null, string Qname = null, string Qaccount = null) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = \u0026#34;select * from [User] where 1=1 \u0026#34;; if (Qid != null) { sql += \u0026#34; and id=@qid \u0026#34;; parameters.Add(\u0026#34;qid\u0026#34;, Qid); } if (Qname != null) { sql += \u0026#34; and name=@qname \u0026#34;; parameters.Add(\u0026#34;qname\u0026#34;, Qname); } if (Qaccount != null) { sql += \u0026#34; and account=@qaccount \u0026#34;; parameters.Add(\u0026#34;qaccount\u0026#34;, Qaccount); } List\u0026lt;User\u0026gt; list = SqlQuery\u0026lt;User\u0026gt;(sql,parameters); return list; } public void CreateUser(string id,string name,string account) { Dictionary\u0026lt;string, object\u0026gt; parameters = new Dictionary\u0026lt;string, object\u0026gt;(); string sql = @\u0026#34; insert into [User] (id,name,account) values(@id,@name,@account) \u0026#34;; parameters.Add(\u0026#34;id\u0026#34;, id); parameters.Add(\u0026#34;name\u0026#34;, name); parameters.Add(\u0026#34;account\u0026#34;, account); int x = ExecuteSqlCommand(sql, parameters); } } 實際使用 這樣就把List和Create的部分也包起來了。\n實際在Controller使用只要數行就可以解決\nstring connString = \u0026#34;\u0026#34;; UserDB _UserDB = new UserDB(connString); List\u0026lt;User\u0026gt; users = _UserDB.ListUser(); //Create _UserDB.CreateUser(id,name,account); 小結 感謝同事大神提供非常大的協助。一開始對物件及封裝的概念非常不清楚，對於資料的存取也只會傻傻地硬拚。\n多次的摸索後，看同樣的東西每一次都能有不太一樣的理解跟體悟。\n若使用EF的方式來存取，可節省掉寫Sql語句的部分可以說是方便很多。\n但EF在使用上會有些看不見的地雷或不方便。得實際遇到不同情況再想辦法解決了。\n","date":"2021-03-15T11:32:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/","title":"MVC-資料存取(DataAccess)"},{"content":"前言 較舊之Winfrom專案，有些報表是用SAP的CrystalReport來產生報表。\n若使用VS2019的環境必須先至SAP下載安裝相關之Runtime或是專門給開發人員的CRforVisualStudio\n安裝完畢後可能還會遇到套件版本不相容之問題需另解決。\n主要內容 若是在產生報表時出現錯誤訊息的話，試試在Webconfig/Appconfig 下增加此段\n並調整 oldVersion 和 newVersion 之版本號多嘗試幾次\n\u0026lt;runtime\u0026gt; \u0026lt;assemblyBinding xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v1\u0026#34;\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.CrystalReports.Engine\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportSource\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Shared\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Web\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.Windows.Forms\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ClientDoc\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonControls\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CommonObjectModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Controllers\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.CubeDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.DataSetConversion\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ObjectFactory\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.Prompting\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.ReportDefModel\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity name=\u0026#34;CrystalDecisions.ReportAppServer.XmlSerialize\u0026#34; publicKeyToken=\u0026#34;692fbea5521e1304\u0026#34; culture=\u0026#34;neutral\u0026#34;/\u0026gt; \u0026lt;bindingRedirect oldVersion=\u0026#34;13.0.2000.0\u0026#34; newVersion=\u0026#34;13.0.3500.0\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;/assemblyBinding\u0026gt; \u0026lt;/runtime\u0026gt; 小結 組件版本號若沒有對上，在建置前可能就會報錯\n若建置有成功，也可能到產生報表前才報錯。\n這問題一步步去試，多嘗試幾次調整版本或安裝\n參考連結   SAP   ","date":"2021-03-15T10:58:27+08:00","permalink":"https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/","title":"無法轉換類型為CrystalDecisions.ReportAppServer.Controllers.ReportSourceClass"},{"content":"前言 以DatabaseFirst來說不管是查詢還是更改的動作都是和資料庫綁定的實體資料模型Model進行交流\n查詢的結果會是模型的類別，如果結果要為DataTable，EF也可以使用Command的方式。\n主要內容 查詢結果回傳DataSet方法\n傳入sql CommandText 以及數組KeyValuePair參數\npublic DataSet EF_SQL_DS(string sql,Dictionary\u0026lt;string,object\u0026gt; parameters) { XXXXEntities Db = new XXXXEntities();//更改為自己的Entities  DataSet ds = new DataSet(); DbCommand cmd = Db.Database.Connection.CreateCommand(); cmd.CommandText = sql; foreach(KeyValuePair\u0026lt;string,object\u0026gt; p in parameters) { DbParameter dbp = cmd.CreateParameter(); dbp.ParameterName = p.Key; if (p.Value != null) { dbp.Value = p.Value; } else { dbp.Value = DBNull.Value; } cmd.Parameters.Add(dbp); } Db.Database.Connection.Open(); var reader = cmd.ExecuteReader(); var tb = new DataTable(); tb.Load(reader); ds.Tables.Add(tb); reader.Close(); Db.Database.Connection.Close(); return ds; } 小結 利用LinQ Select出自訂類別應較為方便泛用。\n若利用EF的Command須注意是否會和Entities的方式混用導致非預期的資料不正確或錯誤。\n","date":"2021-03-15T09:55:01+08:00","permalink":"https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/","title":"EntityFramework查詢結果回傳DataTable"},{"content":"前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。\n可透過放在不同週期階段的過濾器來達成不同的需求。\n有關生命週期相關可參考此連結\n本文主要介紹Action Filter\n主要內容 我們可在專案底下新增一個ActionFilters的資料夾\n在裡面新增一個LoginFilter.cs檔\n裡面就可以寫自定義的Filter\n繼承ActionFilterAttribute並複寫OnActionExecuting方法\n這邊條件我拿一個登入後設定的Seesion來做判斷。\n不通過則filterContext.Result設定導向回登入頁\npublic class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[\u0026#34;Login_id\u0026#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = \u0026#34;Home\u0026#34;, action = \u0026#34;Login\u0026#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。\n可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action\n","date":"2021-03-15T09:26:53+08:00","permalink":"https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/","title":"MVC 登入驗證"},{"content":"前言 說明幾種Model Binding驗證欄位的方法。\n包含正則式，長度限制，必填，自訂驗證。\n主要內容 以下面例子 account 的欄位的驗證\nStringLength() 長度限制\nRegularExpression() 利用正則式\nRequired 必要欄位\nCheckAccount 則為自訂的驗證\n[Display(Name = \u0026#34;帳號\u0026#34;)] [StringLength(20)] [RegularExpression(@\u0026#34;[a-zA-Z0-9]*$\u0026#34;, ErrorMessage = \u0026#34;帳號僅能有英文或數字\u0026#34;)] [Required] [CheckAccount(ErrorMessage = \u0026#34;重複\u0026#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法\npublic class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.Success; } } return null; } } 驗證結果 在後端接收到資料後可使用Model.State來判斷Model欄位驗證是否通過。\nif(ModelState.IsValid){ //驗證通過  } ","date":"2021-03-15T09:03:12+08:00","permalink":"https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/","title":"asp.net MVC 後端Model欄位驗證"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://hushuuu.github.io/2019/03/08/math-typesetting/","title":"Math Typesetting"}]