<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NetCore on The Site</title>
    <link>https://hushuuu.github.io/tags/netcore/</link>
    <description>Recent content in NetCore on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Feb 2022 08:40:41 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/tags/netcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Text.Json 客製JsonConverter</title>
      <link>https://hushuuu.github.io/2022/02/17/text.json-%E5%AE%A2%E8%A3%BDjsonconverter/</link>
      <pubDate>Thu, 17 Feb 2022 08:40:41 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/17/text.json-%E5%AE%A2%E8%A3%BDjsonconverter/</guid>
      <description>主要內容 建立類別繼承JsonConverter來掛在要轉換的屬性上
public class OnlyDateConverter : JsonConverter&amp;lt;DateTime&amp;gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { //Debug.Assert(typeToConvert == typeof(DateTime));  return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(&amp;#34;yyyy-MM-dd&amp;#34;)); } } public class DateWithTimeConverter : JsonConverter&amp;lt;DateTime&amp;gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;)); } } 掛載至屬性</description>
    </item>
    
    <item>
      <title>Linebot Api 設定圖文選單</title>
      <link>https://hushuuu.github.io/2022/02/11/linebot-api-%E8%A8%AD%E5%AE%9A%E5%9C%96%E6%96%87%E9%81%B8%E5%96%AE/</link>
      <pubDate>Fri, 11 Feb 2022 16:49:51 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/11/linebot-api-%E8%A8%AD%E5%AE%9A%E5%9C%96%E6%96%87%E9%81%B8%E5%96%AE/</guid>
      <description>前言 設定Richmenu的API網址有換過。紀錄一下操作流程
增加圖文選單 POST https://api.line.me/v2/bot/richmenu Authorization: Bearer {channel access token} Content-Type: application/json 成功結果回傳&amp;#34;richMenuId&amp;#34;: &amp;#34;{rich menu id}&amp;#34; Json Content Example
{ &amp;#34;size&amp;#34;: { &amp;#34;width&amp;#34;: 2500, &amp;#34;height&amp;#34;: 843 }, &amp;#34;selected&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;richmenu-tsai&amp;#34;, &amp;#34;chatBarText&amp;#34;: &amp;#34;選單1&amp;#34;, &amp;#34;areas&amp;#34;: [ { &amp;#34;bounds&amp;#34;: { &amp;#34;x&amp;#34;: 0, &amp;#34;y&amp;#34;: 0, &amp;#34;width&amp;#34;: 833, &amp;#34;height&amp;#34;: 843 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;message&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;指令&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;指令&amp;#34; } }, { &amp;#34;bounds&amp;#34;: { &amp;#34;x&amp;#34;: 833, &amp;#34;y&amp;#34;: 0, &amp;#34;width&amp;#34;: 833, &amp;#34;height&amp;#34;: 843 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;uri&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;google&amp;#34;, &amp;#34;uri&amp;#34;: &amp;#34;www.</description>
    </item>
    
    <item>
      <title>EntityFramework Core使用NLlog紀錄Sql</title>
      <link>https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/</link>
      <pubDate>Mon, 12 Apr 2021 15:00:25 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/</guid>
      <description>前言 EF Core5.0之後增加 LogTo 可使用StramWriter的方式寫在DBContext.cs裡
但沒試出寫在Startup.cs ConfigureServices
private readonly StreamWriter _logStream = new StreamWriter(&amp;#34;mylog.txt&amp;#34;, append: true); protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) =&amp;gt; optionsBuilder.LogTo(_logStream.WriteLine); public override void Dispose() { base.Dispose(); _logStream.Dispose(); } public override async ValueTask DisposeAsync() { await base.DisposeAsync(); await _logStream.DisposeAsync(); } 普通的Console.Write方法
services.AddDbContext&amp;lt;YourContext&amp;gt;(options =&amp;gt; { options.UseSqlServer(Configuration.GetConnectionString(&amp;#34;DefaultConnection&amp;#34;)) .EnableSensitiveDataLogging(); //顯示敏感資料(參數)  options.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information); }); NLog來記錄 先打開Nuget安裝 NLog NLog.Web.AspNetCore
Program.cs
public static void Main(string[] args) { var logger = NLogBuilder.</description>
    </item>
    
  </channel>
</rss>
