<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on The Site</title>
    <link>https://hushuuu.github.io/tags/ajax/</link>
    <description>Recent content in Ajax on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Aug 2023 15:22:07 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ajax非同步接收blob結果下載檔案</title>
      <link>https://hushuuu.github.io/2023/08/01/ajax%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%8E%A5%E6%94%B6blob%E7%B5%90%E6%9E%9C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88/</link>
      <pubDate>Tue, 01 Aug 2023 15:22:07 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2023/08/01/ajax%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%8E%A5%E6%94%B6blob%E7%B5%90%E6%9E%9C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88/</guid>
      <description>前言 一般下載檔案常見使用開新頁面請求回傳檔案的方式
非同步的請求也可以正確接收檔案觸發瀏覽器下載
透過接收Blob型別的response來解析
主要內容 axios
axios.get(&amp;#39;url&amp;#39;,{responseType: &amp;#39;blob&amp;#39; }) .then(res =&amp;gt; { const { headers, data } = res, blob = new Blob([data]) ; let fname = &amp;#39;samp.txt&amp;#39; const url = window.URL.createObjectURL(blob); //可以接收一個File 或 Blob objet，並回傳一段URL。瀏覽器建立關聯到本地端檔案的連結  const a = document.createElement(&amp;#39;a&amp;#39;); a.style.display = &amp;#39;none&amp;#39;; a.href = url; a.download = fname; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); //釋放 }); fetch
fetch(&amp;#39;url&amp;#39;) .then(resp =&amp;gt; resp.blob()) .then(blob =&amp;gt; { const url = window.URL.createObjectURL(blob); //可以接收一個File 或 Blob objet，並回傳一段URL。瀏覽器建立關聯到本地端檔案的連結  const a = document.</description>
    </item>
    
    <item>
      <title>CSRF-AntiForgeryToken(ajax)</title>
      <link>https://hushuuu.github.io/2022/01/26/csrf-antiforgerytokenajax/</link>
      <pubDate>Wed, 26 Jan 2022 16:39:45 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/01/26/csrf-antiforgerytokenajax/</guid>
      <description>前言 為了防止CSRF攻擊，再提交表單時通常會使用AntiForgeryToken
但在使用Ajax Post時也要注意
主要內容 可以在頁面上藏一個有token的form
&amp;lt;form id=&amp;#34;__AjaxAntiForgeryForm&amp;#34; action=&amp;#34;#&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;@Html.AntiForgeryToken()&amp;lt;/form&amp;gt; 再post之前將token塞進去。
var AddAntiForgeryToken = function (data) { data.__RequestVerificationToken = $(&amp;#39;#__AjaxAntiForgeryForm input[name=__RequestVerificationToken]&amp;#39;).val(); return data; }; $.ajax({ type: &amp;#34;post&amp;#34;, url: &amp;#39;&amp;#39;, data: AddAntiForgeryToken({id:&amp;#34;1&amp;#34;}), success: function (response) { // ....  } }); 參考連結   url1   </description>
    </item>
    
  </channel>
</rss>
