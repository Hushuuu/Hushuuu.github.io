<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on The Site</title>
    <link>https://hushuuu.github.io/tags/json/</link>
    <description>Recent content in Json on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Aug 2023 15:27:57 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Net6Api資料綁定整理</title>
      <link>https://hushuuu.github.io/2023/08/07/net6api%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 07 Aug 2023 15:27:57 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2023/08/07/net6api%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A%E6%95%B4%E7%90%86/</guid>
      <description>前言 Net6在開發web api時，有時候會遇到後端沒接到值的情況
整理幾個常用的使用方法
主要內容 都以Post為例
自訂Data模型參數，預設是json的方式
//這兩種寫法相等 public string Post(A vm); public string Post([FromBody] A vm); //form-data public string Post([FromForm] A vm); //x-www-urlencoded需要特別加屬性 [Consumes(&amp;#34;application/x-www-form-urlencoded&amp;#34;)] public string Post([FromForm] A vm); 如果是用基本型別的參數的話有特別的情況
//預設是queryString 這兩種相等 public string Post(string str); public string Post([FromQuery] string str); //json **特別不同 public string Post([FromBody] string str); //在請求時必須只傳入&amp;#34;\&amp;#34;value\&amp;#34;&amp;#34; //因為net6 在model binding時使用Text.Json //如果試著反序列化就會拋錯 //失敗` The JSON value could not be converted to System.String.` JsonSerializer.Deserialize&amp;lt;string&amp;gt;(&amp;#34;{\&amp;#34;str\&amp;#34;:\&amp;#34;value\&amp;#34;}&amp;#34;); //正確 JsonSerializer.Deserialize&amp;lt;string&amp;gt;(&amp;#34;\&amp;#34;value\&amp;#34;&amp;#34;); //from-data&amp;amp;form-urlencoded方式和上面自訂型別的一樣 小結 除了參數少的QueryString直接寫多個參數</description>
    </item>
    
    <item>
      <title>Text.Json 客製JsonConverter</title>
      <link>https://hushuuu.github.io/2022/02/17/text.json-%E5%AE%A2%E8%A3%BDjsonconverter/</link>
      <pubDate>Thu, 17 Feb 2022 08:40:41 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/17/text.json-%E5%AE%A2%E8%A3%BDjsonconverter/</guid>
      <description>主要內容 建立類別繼承JsonConverter來掛在要轉換的屬性上
public class OnlyDateConverter : JsonConverter&amp;lt;DateTime&amp;gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { //Debug.Assert(typeToConvert == typeof(DateTime));  return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(&amp;#34;yyyy-MM-dd&amp;#34;)); } } public class DateWithTimeConverter : JsonConverter&amp;lt;DateTime&amp;gt; { public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { return DateTime.Parse(reader.GetString()); } public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;)); } } 掛載至屬性</description>
    </item>
    
    <item>
      <title>JsonResult JsonConvert與日期Datetime</title>
      <link>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</link>
      <pubDate>Wed, 13 Oct 2021 15:56:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</guid>
      <description>前言 MVC回傳的ActionResult
可以用繼承他的JsonResult來回傳
使用return Json(obj) 會將物件序列化後回傳至前端。
但型別為Datetime會拿到Date(12347838383333)格式之資料
處理方式有三種
 JS處理轉回日期格式 自訂回傳的JsonResult 用JsonConvert並套上轉換屬性  Javascript use FormatDate(&amp;ldquo;Date(12347838383333)&amp;quot;,true) ture則顯示時間
function FormatDate (str, withTime) {//格式化後端傳回的date資料  var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ?</description>
    </item>
    
  </channel>
</rss>
