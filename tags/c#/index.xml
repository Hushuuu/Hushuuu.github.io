<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on The Site</title>
    <link>https://hushuuu.github.io/tags/c#/</link>
    <description>Recent content in C# on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Oct 2021 14:57:01 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>產生QR Code</title>
      <link>https://hushuuu.github.io/2021/10/21/%E7%94%A2%E7%94%9Fqr-code/</link>
      <pubDate>Thu, 21 Oct 2021 14:57:01 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/21/%E7%94%A2%E7%94%9Fqr-code/</guid>
      <description>主要內容 using System.Drawing; using System.Drawing.Imaging; using ZXing; // for BarcodeWriter using ZXing.QrCode; // for QRCode Engine using System.IO; //////圖片用ViewBag傳回base64格式 var writer = new BarcodeWriter //dll裡面可以看到屬性 { Format = BarcodeFormat.QR_CODE, Options = new QrCodeEncodingOptions //設定大小  { Height = 200, Width = 200, } }; //產生QRcode var img = writer.Write(&amp;#34;www.google.com&amp;#34;); Bitmap myBitmap = new Bitmap(img); MemoryStream ms = new MemoryStream(); myBitmap.Save(ms, ImageFormat.Jpeg); byte[] arr = new byte[ms.Length]; ms.Position = 0; ms.Read(arr, 0, (int)ms.</description>
    </item>
    
    <item>
      <title>JsonResult JsonConvert與日期Datetime</title>
      <link>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</link>
      <pubDate>Wed, 13 Oct 2021 15:56:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</guid>
      <description>前言 MVC回傳的ActionResult
可以用繼承他的JsonResult來回傳
使用return Json(obj) 會將物件序列化後回傳至前端。
但型別為Datetime會拿到Date(12347838383333)格式之資料
處理方式有三種
 JS處理轉回日期格式 自訂回傳的JsonResult 用JsonConvert並套上轉換屬性  Javascript use FormatDate(&amp;ldquo;Date(12347838383333)&amp;quot;,true) ture則顯示時間
function FormatDate (str, withTime) {//格式化後端傳回的date資料  var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ?</description>
    </item>
    
    <item>
      <title>WebService 建立和呼叫</title>
      <link>https://hushuuu.github.io/2021/10/04/webservice-%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%91%BC%E5%8F%AB/</link>
      <pubDate>Mon, 04 Oct 2021 17:09:11 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/webservice-%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%91%BC%E5%8F%AB/</guid>
      <description>前言 Webservice有點像是Web API的前身
如果了解Web API的原理很快就能上手
建立 VisualStudio開新專案-&amp;gt;web應用程式-&amp;gt;空的專案
加入-&amp;gt;新增項目-&amp;gt;Web服務-&amp;gt;.asmx檔案
建立的檔案會預設給一個HelloWorld的Method
/// &amp;lt;summary&amp;gt;  ///WebService1 的摘要描述  /// &amp;lt;/summary&amp;gt; [WebService(Namespace = &amp;#34;http://tempuri.org/&amp;#34;)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] // 若要允許使用 ASP.NET AJAX 從指令碼呼叫此 Web 服務，請取消註解下列一行。  // [System.Web.Script.Services.ScriptService]  public class WebService1 : System.Web.Services.WebService { [WebMethod] public string HelloWorld(string name) { return &amp;#34;Hello World &amp;#34; + name; } } 專案建置起來並到此asmx頁面
可見到此Webservice的資訊
點進HelloWorld Method後可見呼叫的格式
其中的&amp;lt;name&amp;gt;&amp;lt;/name&amp;gt;就是我們要傳入的參數
POST /WebService1.asmx HTTP/1.1 Host: localhost Content-Type: text/xml; charset=utf-8 Content-Length: length SOAPAction: &amp;#34;http://tempuri.</description>
    </item>
    
    <item>
      <title>動態調用Webservice</title>
      <link>https://hushuuu.github.io/2021/10/04/%E5%8B%95%E6%85%8B%E8%AA%BF%E7%94%A8webservice/</link>
      <pubDate>Mon, 04 Oct 2021 14:38:32 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/%E5%8B%95%E6%85%8B%E8%AA%BF%E7%94%A8webservice/</guid>
      <description>主要內容 建立DynamicInvokeWebservice.cs
public class DynamicInvokeWebservice { public DynamicInvokeWebservice() { //  // TODO: 在此加入建構函式的程式碼  //  } static SortedList&amp;lt;string, Type&amp;gt; _typeList = new SortedList&amp;lt;string, Type&amp;gt;(); #region InvokeWebService  static string GetCacheKey(string url, string className) { return url.ToLower() + className; } static Type GetTypeFromCache(string url, string className) { string key = GetCacheKey(url, className); foreach (KeyValuePair&amp;lt;string, Type&amp;gt; pair in _typeList) { if (key == pair.Key) { return pair.Value; } } return null; } static Type GetTypeFromWebService(string url, string className) { string @namespace = &amp;#34;EnterpriseServerBase.</description>
    </item>
    
    <item>
      <title>Notification - IOS篇</title>
      <link>https://hushuuu.github.io/2021/09/09/notification-ios%E7%AF%87/</link>
      <pubDate>Thu, 09 Sep 2021 10:51:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/09/notification-ios%E7%AF%87/</guid>
      <description>前言 IOS使用APNS server要額外使用組件HttpTwo HttpTwo.HPack jose-jwt
主要內容 首先要先拿到Apple Developer的apns key .p8檔
建立HttpClient物件使用HTTP/2
讀取.p8檔並使用jose-jwt來產出authorization token
類別建立 //回傳結果+狀態碼 public class AppleSendResult { public bool isSuccess { get; set; } public string message { get; set; } public Guid? apns_id { get; set; } public HttpStatusCode httpStatusCode { get; set; } public string reason { get; set; } //記著request的device token送完可判斷狀態碼來得知是否token還有效  public string token { get; set; } } //Request 模型 public class APNAps { //alert 可為object or string直接當訊息body  public string alert { get; set; } } //Request public class APNSendRequest { //aps的物件結構可參照官方文件增加其他屬性  public APNAps aps { get; set; } } //推送的種類(一般為alert) public enum ApplePushTypeKind { alert, background, voip, complication, fileprovider, mdm, } private string auth_kid { get; set; } //apns auth key keyID private string auth_iss { get; set; } //開發者帳號TeamID private string apns_topic { get; set; } //開發專案名稱 private string accessToken { get; set; } //token private DateTime?</description>
    </item>
    
    <item>
      <title>Notification - Android篇</title>
      <link>https://hushuuu.github.io/2021/09/07/notification-android%E7%AF%87/</link>
      <pubDate>Tue, 07 Sep 2021 09:45:46 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/07/notification-android%E7%AF%87/</guid>
      <description>前言 Android用FCM傳送通知步驟較IOS Apns為簡易。
Request加ApiKey驗證傳給FCM Server即可
主要內容 須先取得Firebase Android開發的api key
詳閱Firebase Cloud Messaging(FCM) 官方文件後，建立傳入傳出的類別
request較重要的欄位為registration_ids代表欲傳送的device id
傳送訊息FCM有定義兩種type，notification message 和data message 
根據使用的種類，App接收端的處理也稍有不同，接收到並解析來顯示通知
此篇不多介紹App端的處理
定義類別
//回傳結果  public class FCMResultData { public string error { get; set; } public string message_id { get; set; } public string registration_id { get; set; } } //FCM回傳結果 public class FCMSendResult { public string multicast_id { get; set; } public int? success { get; set; } public int?</description>
    </item>
    
  </channel>
</rss>
