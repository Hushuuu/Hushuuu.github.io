<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on The Site</title>
    <link>https://hushuuu.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Aug 2023 15:22:07 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ajax非同步接收blob結果下載檔案</title>
      <link>https://hushuuu.github.io/2023/08/01/ajax%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%8E%A5%E6%94%B6blob%E7%B5%90%E6%9E%9C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88/</link>
      <pubDate>Tue, 01 Aug 2023 15:22:07 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2023/08/01/ajax%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%8E%A5%E6%94%B6blob%E7%B5%90%E6%9E%9C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88/</guid>
      <description>前言 一般下載檔案常見使用開新頁面請求回傳檔案的方式
非同步的請求也可以正確接收檔案觸發瀏覽器下載
透過接收Blob型別的response來解析
主要內容 axios
axios.get(&amp;#39;url&amp;#39;,{responseType: &amp;#39;blob&amp;#39; }) .then(res =&amp;gt; { const { headers, data } = res, blob = new Blob([data]) ; let fname = &amp;#39;samp.txt&amp;#39; const url = window.URL.createObjectURL(blob); //可以接收一個File 或 Blob objet，並回傳一段URL。瀏覽器建立關聯到本地端檔案的連結  const a = document.createElement(&amp;#39;a&amp;#39;); a.style.display = &amp;#39;none&amp;#39;; a.href = url; a.download = fname; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); //釋放 }); fetch
fetch(&amp;#39;url&amp;#39;) .then(resp =&amp;gt; resp.blob()) .then(blob =&amp;gt; { const url = window.URL.createObjectURL(blob); //可以接收一個File 或 Blob objet，並回傳一段URL。瀏覽器建立關聯到本地端檔案的連結  const a = document.</description>
    </item>
    
    <item>
      <title>Vue Component(modal)</title>
      <link>https://hushuuu.github.io/2022/02/25/vue-componentmodal/</link>
      <pubDate>Fri, 25 Feb 2022 14:25:43 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/02/25/vue-componentmodal/</guid>
      <description>前言 使用Vuejs 2練習模板Component
假設要設計bootstrap4彈窗的模板
prop命名最好不要有大寫否則在html模板需要處理成- ex:foodSize=&amp;gt;food-size
設計 設計template html
&amp;lt;template id=&amp;#34;vue_modalTemplate&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal fade&amp;#34; tabindex=&amp;#34;-1&amp;#34; role=&amp;#34;dialog&amp;#34; aria-hidden=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-dialog&amp;#34; v-bind:class=&amp;#34;sizeClass&amp;#34; role=&amp;#34;document&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-content&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt; &amp;lt;slot name=&amp;#34;header&amp;#34;&amp;gt; &amp;lt;h5 class=&amp;#34;modal-title&amp;#34;&amp;gt;{{msg_title}}&amp;lt;/h5&amp;gt; &amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt; &amp;lt;slot name=&amp;#34;body&amp;#34;&amp;gt; {{msg_body}} &amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;btn btn-secondary&amp;#34; data-dismiss=&amp;#34;modal&amp;#34; v-on:click=&amp;#34;cancel_func&amp;#34;&amp;gt;{{cancel_text}}&amp;lt;/button&amp;gt; &amp;lt;button v-if=&amp;#34;submit_func&amp;#34; class=&amp;#34;btn btn-primary&amp;#34; type=&amp;#34;button&amp;#34; v-on:click=&amp;#34;submit_func&amp;#34;&amp;gt;{{submit_text}}&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; //註冊Component要在實例vue物件之前 Vue.component(&amp;#39;vue_modal&amp;#39;, { template: &amp;#39;#vue_modalTemplate&amp;#39;, props: { &amp;#34;submit_func&amp;#34;: Function, &amp;#34;submit_text&amp;#34;: String, &amp;#34;msg_title&amp;#34;: { type: String, default: function () { return &amp;#34;訊息&amp;#34;; } }, &amp;#34;msg_body&amp;#34;: { type: String, default: function () { return &amp;#34;訊息主體&amp;#34; } }, &amp;#34;cancel_func&amp;#34;: {type: Function,default: function () { }}, &amp;#34;cancel_text&amp;#34;: { type: String, default: function () { return &amp;#34;關閉&amp;#34;; } }, &amp;#34;sizeClass&amp;#34;: { type: Object, default: function () { return {};}}//:size-class=&amp;#34;{&amp;#39;modal-lg&amp;#39;:true}&amp;#34; 大的modal  } }); const VueMessage = new Vue({ data: function () { return { common_msg_title: &amp;#34;訊息&amp;#34;, common_msg_body: &amp;#34;&amp;#34;, } }, methods: { show(msg) { this.</description>
    </item>
    
    <item>
      <title>找出form input元素並處理值集合</title>
      <link>https://hushuuu.github.io/2022/01/26/%E6%89%BE%E5%87%BAform-input%E5%85%83%E7%B4%A0%E4%B8%A6%E8%99%95%E7%90%86%E5%80%BC%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 26 Jan 2022 16:49:44 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2022/01/26/%E6%89%BE%E5%87%BAform-input%E5%85%83%E7%B4%A0%E4%B8%A6%E8%99%95%E7%90%86%E5%80%BC%E9%9B%86%E5%90%88/</guid>
      <description>前言 找出每個Input元素並串好值可以拿來提交表單或是ajax post
主要內容 常用input tag &amp;lt;form method=&amp;#34;post&amp;#34; id=&amp;#34;queryForm&amp;#34; action=&amp;#34;&amp;#34;&amp;gt; @Html.AntiForgeryToken() &amp;lt;input type=&amp;#34;color&amp;#34; name=&amp;#34;color&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;1&amp;#34; name=&amp;#34;chks[0]&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;2&amp;#34; name=&amp;#34;chks[1]&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;range&amp;#34; name=&amp;#34;rng&amp;#34; /&amp;gt; &amp;lt;select multiple name=&amp;#34;selects&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;1&amp;#34;&amp;gt;A&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;2&amp;#34;&amp;gt;B&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;3&amp;#34;&amp;gt;C&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;rdo&amp;#34; value=&amp;#34;10&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;rdo&amp;#34; value=&amp;#34;20&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;rdo&amp;#34; value=&amp;#34;30&amp;#34; /&amp;gt; &amp;lt;textarea name=&amp;#34;textarea&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; onclick=&amp;#34;ppTobk();&amp;#34;&amp;gt;submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; 共用method /** * 將值集合轉成物件 * @@param paras 值集合 */ function paras_to_object(paras) { let obj = {}; for (let i = 0; i &amp;lt; paras.</description>
    </item>
    
    <item>
      <title>Js Note</title>
      <link>https://hushuuu.github.io/2021/10/13/js-note/</link>
      <pubDate>Wed, 13 Oct 2021 14:53:29 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/js-note/</guid>
      <description>Closure 閉包 和作用域有關係，可用來避免變數汙染
或讓變數不被隨意存取改變
用jQuery可簡易達成
$(function(){ //do your coding }); $(document).ready(function(){ }); 轉千分位 /** * 轉千分位 * @param {any} num */ function toCurrency(num) { var parts = num.toString().split(&amp;#39;.&amp;#39;); parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, &amp;#39;,&amp;#39;); return parts.join(&amp;#39;.&amp;#39;); } Date擴充 //增加日期 Date.prototype.addDays = function (days) { var date = new Date(this.valueOf()); date.setDate(date.getDate() + days); return date; } //轉為yyyy-MM-dd Date.prototype.toInputString = function () { let date = new Date(this.valueOf()); return date.toISOString().split(&amp;#39;T&amp;#39;)[0]; } </description>
    </item>
    
    <item>
      <title>Windowopen開新視窗並Post資料</title>
      <link>https://hushuuu.github.io/2021/10/04/windowopen%E9%96%8B%E6%96%B0%E8%A6%96%E7%AA%97%E4%B8%A6post%E8%B3%87%E6%96%99/</link>
      <pubDate>Mon, 04 Oct 2021 14:19:59 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/windowopen%E9%96%8B%E6%96%B0%E8%A6%96%E7%AA%97%E4%B8%A6post%E8%B3%87%E6%96%99/</guid>
      <description>前言 一般用window.open開窗傳遞參數常用get方式在url後方串接參數
若想用post方式，則在開窗前模擬form submit post
並在onsubmit前open。
主要內容 function openPostWindow(url, name, val1, val2) { var tempForm = document.createElement(&amp;#34;form&amp;#34;); tempForm.id = &amp;#34;tempForm1&amp;#34;; tempForm.method = &amp;#34;post&amp;#34;; tempForm.action = url; //url  tempForm.target = name; let hideInput = document.createElement(&amp;#34;input&amp;#34;); hideInput.type = &amp;#34;hidden&amp;#34;; hideInput.name = &amp;#34;val1&amp;#34;;//傳入引數名  hideInput.value = val1;//傳入資料  tempForm.appendChild(hideInput); let hideInput2 = document.createElement(&amp;#34;input&amp;#34;); hideInput2.type = &amp;#34;hidden&amp;#34;; hideInput2.name = &amp;#34;val2&amp;#34;; hideInput2.value = val2; tempForm.appendChild(hideInput2); tempForm.addEventListener(&amp;#39;onsubmit&amp;#39;, function () { openWindow(name);}) document.body.appendChild(tempForm); //手動submit form  tempForm.</description>
    </item>
    
    <item>
      <title>MVC-上傳檔案轉為Base64String</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</link>
      <pubDate>Thu, 25 Mar 2021 11:15:44 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</guid>
      <description>前言 Html的Img標籤可以將src設為轉換後的Base64 String也可以顯示出圖片
若WebApi需要交流檔案也可以將檔案轉換為Base64進行溝通
Post前轉換 建立一個按鈕事件將轉換後的base64String Post至後端
$(document).on(&amp;#39;click&amp;#39;, &amp;#39;#subBtn&amp;#39;, function () { demo().then((obj) =&amp;gt; { $.ajax({ url: &amp;#34;../&amp;#34;, // url位置  type: &amp;#34;POST&amp;#34;, contentType: &amp;#34;application/json&amp;#34;, data: JSON.stringify(obj),// 輸入的資料  success: function (response) { }//  }); }); }); 使用FileReader來讀取上傳的檔案
因為readAsDataURL是非同步讀取
若不做非同步等待處理
檔案還未處理完就會被Post出去造成傳遞不到正確資料
故需將函式套上async並await等候所有檔案都處理完
const demo = async () =&amp;gt; { var obj = {}; var filearray = []; var file_name = []; let files = $(&amp;#34;input[name=upload_file]&amp;#34;)[0].files; for (let i = 0; i &amp;lt; files.</description>
    </item>
    
    <item>
      <title>MVC-檔案上傳Post</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</link>
      <pubDate>Thu, 25 Mar 2021 10:44:23 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</guid>
      <description>FormPost 如果要用FormPost的方式上傳檔案
注意將Form的Content-Type 設定為enctype=&amp;quot;multipart/form-data&amp;quot;
&amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;.png, .jpg, .jpeg&amp;quot; name=&amp;quot;Filedata&amp;quot; class=&amp;quot;btn btn-default&amp;quot; /&amp;gt;
FormDataPost到後端後可以這樣來接收
public ActionResult Create(HttpPostedFileBase Filedata) { //可利用正則式過濾副檔名 if (Filedata != null &amp;amp;&amp;amp; Regex.IsMatch(Path.GetExtension(Filedata.FileName), &amp;#34;^[.](jpg|png|jpeg|gif|bmp)$&amp;#34;, RegexOptions.IgnoreCase)) { //存到資料夾  string tmpPath1 = Server.MapPath(&amp;#34;~/Images/&amp;#34;); if (!Directory.Exists(tmpPath1)) Directory.CreateDirectory(tmpPath1); var FileName = Path.GetFileName(Filedata.FileName); var FilePath = Path.Combine(Server.MapPath(&amp;#34;~/Images/&amp;#34;), FileName); Filedata.SaveAs(FilePath); string save_path = &amp;#34;/Images/&amp;#34; + FileName; pcm.pic_path = save_path; } } XMLHttpRequest上傳 建立FormData利用XMLHttpRequest發出請求
監聽上傳事件可顯示出上傳進度
//上傳檔案 var file = null; $(&amp;#39;#Filedata1&amp;#39;)[0].addEventListener(&amp;#39;change&amp;#39;, readFile, false); function readFile() { file = this.</description>
    </item>
    
  </channel>
</rss>
