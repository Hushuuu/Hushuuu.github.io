<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Site</title>
    <link>https://hushuuu.github.io/post/</link>
    <description>Recent content in Posts on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Mar 2021 16:46:20 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linq常用的語法與基本介紹</title>
      <link>https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Tue, 16 Mar 2021 16:46:20 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</guid>
      <description>前言 LINQ在資料的過濾以及查詢方面非常方便，不只可以在EF中轉為SQL語句
也能對平常的List型別進行過濾查詢。
主要內容 Linq有兩種表示式，有一種是使用Lambda表示式
var p = from t in products where t.Name == &amp;#34;牙膏&amp;#34; select t; //Lambda var p2 = products.Where(t =&amp;gt; t.Name == &amp;#34;牙膏&amp;#34;); JOIN //left join linq var q = from e in Db.Page_M orderby e.page_stack join s in ( from s in Db.Group_D where s.group_id==group_id select s) on new { page_id = e.page_id } equals new { page_id = s.page_id } into subGrp from s in subGrp.</description>
    </item>
    
    <item>
      <title>MVC-包含明細的儲存</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</link>
      <pubDate>Tue, 16 Mar 2021 15:50:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</guid>
      <description>前言 在一對多的資料表下，一個表頭會對應好幾筆的明細
開發儲存明細時，該如何實現。
主要內容 若要新增資料要包含新增多筆明細。
可以在新增頁上建立一個Table
並進行新增一筆及刪除一筆的行為
最後儲存時在將table進行post回去的處理
一種方法是在畫面上讓使用者挑選輸入明細
輸入完畢塞一筆進html的table
&amp;lt;p&amp;gt;&amp;lt;h4&amp;gt;訂單明細&amp;lt;/h4&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;div class=&amp;#34;choseProd&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; &amp;lt;h5&amp;gt;選擇商品至明細&amp;lt;/h5&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; @Html.DropDownList(&amp;#34;ChoseProd&amp;#34;, Model.AllProducts, new { @class = &amp;#34;form-control&amp;#34; }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt; @Html.EditorFor(m =&amp;gt; m.QtyForSel, new { htmlAttributes = new { @class = &amp;#34;form-control&amp;#34;, @Min = &amp;#34;0&amp;#34; } }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;button class=&amp;#34;btn btn-default&amp;#34; id=&amp;#34;addBtn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;新增&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 新增按鈕呼叫applist()AJAX POST查詢商品價格後回傳
串接HTML(顯示欄位+隱藏的Input欄位)
Append到明細Table
function applist() { var chosepod = $(&amp;#34;#ChoseProd&amp;#34;).</description>
    </item>
    
    <item>
      <title>MVC-Table排序與分頁</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</link>
      <pubDate>Tue, 16 Mar 2021 14:43:46 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</guid>
      <description>前言 前端有很多實用的table套件如DataTable.js可以直接實現排序換頁搜尋
本篇主要練習如何手動刻出類似的功能。
分頁 分頁的概念為設定一頁需顯示幾筆，再將資料分為幾等分來決定
要顯示第幾頁的資料，根據資料庫的種類用 Rownum Limit等
還可以用LinQ Skip() Take()
var list = query.Skip(startIndex).Take(pageSize).toList(); //舉例一頁顯示10筆，要顯示第3頁的資料  //Skip前兩頁的資料 =&amp;gt; 10*2  //Skip 20筆 Take 10筆 分頁導覽列 傳回前端的資料除了這十筆，也需要將分頁的資訊傳入進行判斷
page當前頁數 EndPage最後頁 TotalItemCount總筆數等
建立導覽列
if (page == 1) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;last_btn&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } else { int nextnum = page - 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;last_btn&amp;#34; href=&amp;#34;@url?page=@nextnum&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } if (page == Endpage) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;next_btn&amp;#34;&amp;gt;下頁&amp;lt;/a&amp;gt; } else { int nextnum = page + 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;next_btn&amp;#34; href=&amp;#34;@url?</description>
    </item>
    
    <item>
      <title>MVC-頁面及權限管理</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 16 Mar 2021 08:49:37 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <description>前言 此篇根據頁面資料表間的父子關係，利用遞迴來產生Menu的選單
並透過群組來進行頁面權限的管控
主要內容 基本的頁面資料表結構，重要的是parent_id代表此頁面父階層頁面的page_id
public class PageModel { [Display(Name = &amp;#34;頁號&amp;#34;)] public string page_id { get; set; } [Display(Name = &amp;#34;頁面名稱&amp;#34;)] public string page_name { get; set; } [Display(Name = &amp;#34;Controller&amp;#34;)] public string controller { get; set; } [Display(Name = &amp;#34;Action&amp;#34;)] public string action { get; set; } [Display(Name = &amp;#34;父頁面&amp;#34;)] public string parent_id { get; set; } } 產生選單的部分使用bootstrap的navbar
並透過Partial View的方式來載入管控的頁面
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;navbar-header&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;navbar-toggle&amp;#34; data-toggle=&amp;#34;collapse&amp;#34; data-target=&amp;#34;.</description>
    </item>
    
    <item>
      <title>MVC-產出Excel</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</link>
      <pubDate>Mon, 15 Mar 2021 17:15:18 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</guid>
      <description>前言 介紹NPOI及EPPlus套件來將資料產出成Excel。
主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls
public ActionResult getExcel() { var result = List&amp;lt;Data&amp;gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(&amp;#34;sheet&amp;#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = &amp;#34;微軟正黑體&amp;#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(&amp;#34;商品清單&amp;#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.</description>
    </item>
    
    <item>
      <title>MVC-資料存取(DataAccess)</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</link>
      <pubDate>Mon, 15 Mar 2021 11:32:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</guid>
      <description>前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET
使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作
第一步 直接連線並查詢出結果的範例
string connStr = &amp;#34;連線字串&amp;#34;; string sql = &amp;#34;SELECT * FROM Product Where id=@id&amp;#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(&amp;#34;id&amp;#34;,&amp;#34;1&amp;#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護
這時候就可以利用封裝的概念將code包起來
先建立一個新類別檔DataAccess.cs
public class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.</description>
    </item>
    
    <item>
      <title>無法轉換類型為CrystalDecisions.ReportAppServer.Controllers.ReportSourceClass</title>
      <link>https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/</link>
      <pubDate>Mon, 15 Mar 2021 10:58:27 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/</guid>
      <description>前言 較舊之Winfrom專案，有些報表是用SAP的CrystalReport來產生報表。
若使用VS2019的環境必須先至SAP下載安裝相關之Runtime或是專門給開發人員的CRforVisualStudio
安裝完畢後可能還會遇到套件版本不相容之問題需另解決。
主要內容 若是在產生報表時出現錯誤訊息的話，試試在Webconfig/Appconfig 下增加此段
並調整 oldVersion 和 newVersion 之版本號多嘗試幾次
&amp;lt;runtime&amp;gt; &amp;lt;assemblyBinding xmlns=&amp;#34;urn:schemas-microsoft-com:asm.v1&amp;#34;&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.CrystalReports.Engine&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.ReportSource&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Shared&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Web&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Windows.Forms&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.ReportAppServer.ClientDoc&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.</description>
    </item>
    
    <item>
      <title>EntityFramework查詢結果回傳DataTable</title>
      <link>https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/</link>
      <pubDate>Mon, 15 Mar 2021 09:55:01 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/</guid>
      <description>前言 以DatabaseFirst來說不管是查詢還是更改的動作都是和資料庫綁定的實體資料模型Model進行交流
查詢的結果會是模型的類別，如果結果要為DataTable，EF也可以使用Command的方式。
主要內容 查詢結果回傳DataSet方法
傳入sql CommandText 以及數組KeyValuePair參數
public DataSet EF_SQL_DS(string sql,Dictionary&amp;lt;string,object&amp;gt; parameters) { XXXXEntities Db = new XXXXEntities();//更改為自己的Entities  DataSet ds = new DataSet(); DbCommand cmd = Db.Database.Connection.CreateCommand(); cmd.CommandText = sql; foreach(KeyValuePair&amp;lt;string,object&amp;gt; p in parameters) { DbParameter dbp = cmd.CreateParameter(); dbp.ParameterName = p.Key; if (p.Value != null) { dbp.Value = p.Value; } else { dbp.Value = DBNull.Value; } cmd.Parameters.Add(dbp); } Db.Database.Connection.Open(); var reader = cmd.ExecuteReader(); var tb = new DataTable(); tb.</description>
    </item>
    
    <item>
      <title>MVC 登入驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:26:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</guid>
      <description>前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。
可透過放在不同週期階段的過濾器來達成不同的需求。
有關生命週期相關可參考此連結
本文主要介紹Action Filter
主要內容 我們可在專案底下新增一個ActionFilters的資料夾
在裡面新增一個LoginFilter.cs檔
裡面就可以寫自定義的Filter
繼承ActionFilterAttribute並複寫OnActionExecuting方法
這邊條件我拿一個登入後設定的Seesion來做判斷。
不通過則filterContext.Result設定導向回登入頁
public class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[&amp;#34;Login_id&amp;#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = &amp;#34;Home&amp;#34;, action = &amp;#34;Login&amp;#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。
可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action</description>
    </item>
    
    <item>
      <title>asp.net MVC 後端Model欄位驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:03:12 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</guid>
      <description>前言 說明幾種Model Binding驗證欄位的方法。
包含正則式，長度限制，必填，自訂驗證。
主要內容 以下面例子 account 的欄位的驗證
StringLength() 長度限制
RegularExpression() 利用正則式
Required 必要欄位
CheckAccount 則為自訂的驗證
[Display(Name = &amp;#34;帳號&amp;#34;)] [StringLength(20)] [RegularExpression(@&amp;#34;[a-zA-Z0-9]*$&amp;#34;, ErrorMessage = &amp;#34;帳號僅能有英文或數字&amp;#34;)] [Required] [CheckAccount(ErrorMessage = &amp;#34;重複&amp;#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法
public class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.</description>
    </item>
    
    <item>
      <title>Iphone的螢幕比安卓的容易裂開?</title>
      <link>https://hushuuu.github.io/2021/03/12/iphone%E7%9A%84%E8%9E%A2%E5%B9%95%E6%AF%94%E5%AE%89%E5%8D%93%E7%9A%84%E5%AE%B9%E6%98%93%E8%A3%82%E9%96%8B/</link>
      <pubDate>Fri, 12 Mar 2021 16:42:54 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/12/iphone%E7%9A%84%E8%9E%A2%E5%B9%95%E6%AF%94%E5%AE%89%E5%8D%93%E7%9A%84%E5%AE%B9%E6%98%93%E8%A3%82%E9%96%8B/</guid>
      <description>前言 Compare Iphone and others Andorid Mobiles,Which is more durable?
主要內容 this is A this is B
小結 A Lose
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>One Post</title>
      <link>https://hushuuu.github.io/2021/03/12/one-post/</link>
      <pubDate>Fri, 12 Mar 2021 15:16:07 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/12/one-post/</guid>
      <description>adsasdsadasdd</description>
    </item>
    
    <item>
      <title>Chinese Test</title>
      <link>https://hushuuu.github.io/2020/09/09/test-chinese/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2020/09/09/test-chinese/</guid>
      <description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用  思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
 图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>https://hushuuu.github.io/2019/03/10/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/10/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://hushuuu.github.io/2019/03/09/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/09/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://hushuuu.github.io/2019/03/08/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/08/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://hushuuu.github.io/2019/03/05/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/05/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
