<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Site</title>
    <link>https://hushuuu.github.io/post/</link>
    <description>Recent content in Posts on The Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Nov 2021 15:07:03 +0800</lastBuildDate><atom:link href="https://hushuuu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>完整刪除Oracle</title>
      <link>https://hushuuu.github.io/2021/11/23/%E5%AE%8C%E6%95%B4%E5%88%AA%E9%99%A4oracle/</link>
      <pubDate>Tue, 23 Nov 2021 15:07:03 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/11/23/%E5%AE%8C%E6%95%B4%E5%88%AA%E9%99%A4oracle/</guid>
      <description>前言 包含環境參數，Regedit內機碼，一併刪除。
版本為19c
關閉服務 Services 和Oracle相關服務都關閉
Universal Installer解除安裝或是在19cs內deinstall 
egedit刪除Oracle開頭的項目 HKEY_LOCAL_MACHINE\SOFTWARE\ HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services 
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\ HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\
HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Oracle*
刪除環境變數 ORACLE_HOME，TNS_ADMIN，NLS_LANG
刪除C槽Oracle相關目錄 Program Files\，Program Files(x86)\，ProgramData\Microsoft\Windows\Start Menu\Programs\ 
重新開機 重新開機
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>產生QR Code</title>
      <link>https://hushuuu.github.io/2021/10/21/%E7%94%A2%E7%94%9Fqr-code/</link>
      <pubDate>Thu, 21 Oct 2021 14:57:01 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/21/%E7%94%A2%E7%94%9Fqr-code/</guid>
      <description>主要內容 using System.Drawing; using System.Drawing.Imaging; using ZXing; // for BarcodeWriter using ZXing.QrCode; // for QRCode Engine using System.IO; //////圖片用ViewBag傳回base64格式 var writer = new BarcodeWriter //dll裡面可以看到屬性 { Format = BarcodeFormat.QR_CODE, Options = new QrCodeEncodingOptions //設定大小  { Height = 200, Width = 200, } }; //產生QRcode var img = writer.Write(&amp;#34;www.google.com&amp;#34;); Bitmap myBitmap = new Bitmap(img); MemoryStream ms = new MemoryStream(); myBitmap.Save(ms, ImageFormat.Jpeg); byte[] arr = new byte[ms.Length]; ms.Position = 0; ms.Read(arr, 0, (int)ms.</description>
    </item>
    
    <item>
      <title>JsonResult JsonConvert與日期Datetime</title>
      <link>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</link>
      <pubDate>Wed, 13 Oct 2021 15:56:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/jsonresult-jsonconvert%E8%88%87%E6%97%A5%E6%9C%9Fdatetime/</guid>
      <description>前言 MVC回傳的ActionResult
可以用繼承他的JsonResult來回傳
使用return Json(obj) 會將物件序列化後回傳至前端。
但型別為Datetime會拿到Date(12347838383333)格式之資料
處理方式有三種
 JS處理轉回日期格式 自訂回傳的JsonResult 用JsonConvert並套上轉換屬性  Javascript use FormatDate(&amp;ldquo;Date(12347838383333)&amp;quot;,true) ture則顯示時間
function FormatDate (str, withTime) {//格式化後端傳回的date資料  var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ?</description>
    </item>
    
    <item>
      <title>Js Note</title>
      <link>https://hushuuu.github.io/2021/10/13/js-note/</link>
      <pubDate>Wed, 13 Oct 2021 14:53:29 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/js-note/</guid>
      <description>Closure 閉包 和作用域有關係，可用來避免變數汙染
或讓變數不被隨意存取改變
用jQuery可簡易達成
$(function(){ //do your coding }); $(document).ready(function(){ }); </description>
    </item>
    
    <item>
      <title>Bootstrap Navbar Menu</title>
      <link>https://hushuuu.github.io/2021/10/13/bootstrap-navbar-menu/</link>
      <pubDate>Wed, 13 Oct 2021 09:32:14 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/13/bootstrap-navbar-menu/</guid>
      <description>v3版本 增加一個li後atag觸發子選單ul submenu
&amp;lt;div class=&amp;#34;navbar-collapse collapse&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;nav navbar-nav&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;dropdown&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; data-toggle=&amp;#34;dropdown&amp;#34;&amp;gt;選單2&amp;lt;b class=&amp;#34;caret&amp;#34;&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;ul class=&amp;#34;dropdown-menu&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;dropdown-submenu&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; data-toggle=&amp;#34;dropdown&amp;#34;&amp;gt;次選單2&amp;lt;/a&amp;gt; &amp;lt;ul class=&amp;#34;dropdown-menu&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;dropdown-submenu&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; data-toggle=&amp;#34;dropdown&amp;#34;&amp;gt;次次選單3&amp;lt;/a&amp;gt; &amp;lt;ul class=&amp;#34;dropdown-menu&amp;#34;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;次次次選單1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; /*多層下拉選單設定*/ .dropdown-submenu { position: relative; } .dropdown-submenu &amp;gt; .dropdown-menu { top: 0; left: 100%; margin-top: -6px; margin-left: -1px; -webkit-border-radius: 0 6px 6px 6px; -moz-border-radius: 0 6px 6px 6px; border-radius: 0 6px 6px 6px; } .</description>
    </item>
    
    <item>
      <title>WebService 建立和呼叫</title>
      <link>https://hushuuu.github.io/2021/10/04/webservice-%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%91%BC%E5%8F%AB/</link>
      <pubDate>Mon, 04 Oct 2021 17:09:11 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/webservice-%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%91%BC%E5%8F%AB/</guid>
      <description>前言 Webservice有點像是Web API的前身
如果了解Web API的原理很快就能上手
建立 VisualStudio開新專案-&amp;gt;web應用程式-&amp;gt;空的專案
加入-&amp;gt;新增項目-&amp;gt;Web服務-&amp;gt;.asmx檔案
建立的檔案會預設給一個HelloWorld的Method
/// &amp;lt;summary&amp;gt;  ///WebService1 的摘要描述  /// &amp;lt;/summary&amp;gt; [WebService(Namespace = &amp;#34;http://tempuri.org/&amp;#34;)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] // 若要允許使用 ASP.NET AJAX 從指令碼呼叫此 Web 服務，請取消註解下列一行。  // [System.Web.Script.Services.ScriptService]  public class WebService1 : System.Web.Services.WebService { [WebMethod] public string HelloWorld(string name) { return &amp;#34;Hello World &amp;#34; + name; } } 專案建置起來並到此asmx頁面
可見到此Webservice的資訊
點進HelloWorld Method後可見呼叫的格式
其中的&amp;lt;name&amp;gt;&amp;lt;/name&amp;gt;就是我們要傳入的參數
POST /WebService1.asmx HTTP/1.1 Host: localhost Content-Type: text/xml; charset=utf-8 Content-Length: length SOAPAction: &amp;#34;http://tempuri.</description>
    </item>
    
    <item>
      <title>動態調用Webservice</title>
      <link>https://hushuuu.github.io/2021/10/04/%E5%8B%95%E6%85%8B%E8%AA%BF%E7%94%A8webservice/</link>
      <pubDate>Mon, 04 Oct 2021 14:38:32 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/%E5%8B%95%E6%85%8B%E8%AA%BF%E7%94%A8webservice/</guid>
      <description>主要內容 建立DynamicInvokeWebservice.cs
public class DynamicInvokeWebservice { public DynamicInvokeWebservice() { //  // TODO: 在此加入建構函式的程式碼  //  } static SortedList&amp;lt;string, Type&amp;gt; _typeList = new SortedList&amp;lt;string, Type&amp;gt;(); #region InvokeWebService  static string GetCacheKey(string url, string className) { return url.ToLower() + className; } static Type GetTypeFromCache(string url, string className) { string key = GetCacheKey(url, className); foreach (KeyValuePair&amp;lt;string, Type&amp;gt; pair in _typeList) { if (key == pair.Key) { return pair.Value; } } return null; } static Type GetTypeFromWebService(string url, string className) { string @namespace = &amp;#34;EnterpriseServerBase.</description>
    </item>
    
    <item>
      <title>Windowopen開新視窗並Post資料</title>
      <link>https://hushuuu.github.io/2021/10/04/windowopen%E9%96%8B%E6%96%B0%E8%A6%96%E7%AA%97%E4%B8%A6post%E8%B3%87%E6%96%99/</link>
      <pubDate>Mon, 04 Oct 2021 14:19:59 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/10/04/windowopen%E9%96%8B%E6%96%B0%E8%A6%96%E7%AA%97%E4%B8%A6post%E8%B3%87%E6%96%99/</guid>
      <description>前言 一般用window.open開窗傳遞參數常用get方式在url後方串接參數
若想用post方式，則在開窗前模擬form submit post
並在onsubmit前open。
主要內容 function openPostWindow(url, name, val1, val2) { var tempForm = document.createElement(&amp;#34;form&amp;#34;); tempForm.id = &amp;#34;tempForm1&amp;#34;; tempForm.method = &amp;#34;post&amp;#34;; tempForm.action = url; //url  tempForm.target = name; let hideInput = document.createElement(&amp;#34;input&amp;#34;); hideInput.type = &amp;#34;hidden&amp;#34;; hideInput.name = &amp;#34;val1&amp;#34;;//傳入引數名  hideInput.value = val1;//傳入資料  tempForm.appendChild(hideInput); let hideInput2 = document.createElement(&amp;#34;input&amp;#34;); hideInput2.type = &amp;#34;hidden&amp;#34;; hideInput2.name = &amp;#34;val2&amp;#34;; hideInput2.value = val2; tempForm.appendChild(hideInput2); tempForm.addEventListener(&amp;#39;onsubmit&amp;#39;, function () { openWindow(name);}) document.body.appendChild(tempForm); //手動submit form  tempForm.</description>
    </item>
    
    <item>
      <title>Notification - IOS篇</title>
      <link>https://hushuuu.github.io/2021/09/09/notification-ios%E7%AF%87/</link>
      <pubDate>Thu, 09 Sep 2021 10:51:04 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/09/notification-ios%E7%AF%87/</guid>
      <description>前言 IOS使用APNS server要額外使用組件HttpTwo HttpTwo.HPack jose-jwt
主要內容 首先要先拿到Apple Developer的apns key .p8檔
建立HttpClient物件使用HTTP/2
讀取.p8檔並使用jose-jwt來產出authorization token
類別建立 //回傳結果+狀態碼 public class AppleSendResult { public bool isSuccess { get; set; } public string message { get; set; } public Guid? apns_id { get; set; } public HttpStatusCode httpStatusCode { get; set; } public string reason { get; set; } //記著request的device token送完可判斷狀態碼來得知是否token還有效  public string token { get; set; } } //Request 模型 public class APNAps { //alert 可為object or string直接當訊息body  public string alert { get; set; } } //Request public class APNSendRequest { //aps的物件結構可參照官方文件增加其他屬性  public APNAps aps { get; set; } } //推送的種類(一般為alert) public enum ApplePushTypeKind { alert, background, voip, complication, fileprovider, mdm, } private string auth_kid { get; set; } //apns auth key keyID private string auth_iss { get; set; } //開發者帳號TeamID private string apns_topic { get; set; } //開發專案名稱 private string accessToken { get; set; } //token private DateTime?</description>
    </item>
    
    <item>
      <title>Notification - Android篇</title>
      <link>https://hushuuu.github.io/2021/09/07/notification-android%E7%AF%87/</link>
      <pubDate>Tue, 07 Sep 2021 09:45:46 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/07/notification-android%E7%AF%87/</guid>
      <description>前言 Android用FCM傳送通知步驟較IOS Apns為簡易。
Request加ApiKey驗證傳給FCM Server即可
主要內容 須先取得Firebase Android開發的api key
詳閱Firebase Cloud Messaging(FCM) 官方文件後，建立傳入傳出的類別
request較重要的欄位為registration_ids代表欲傳送的device id
傳送訊息FCM有定義兩種type，notification message 和data message 
根據使用的種類，App接收端的處理也稍有不同，接收到並解析來顯示通知
此篇不多介紹App端的處理
定義類別
//回傳結果  public class FCMResultData { public string error { get; set; } public string message_id { get; set; } public string registration_id { get; set; } } //FCM回傳結果 public class FCMSendResult { public string multicast_id { get; set; } public int? success { get; set; } public int?</description>
    </item>
    
    <item>
      <title>Notification - Service Worker篇</title>
      <link>https://hushuuu.github.io/2021/09/06/notification-service-worker%E7%AF%87/</link>
      <pubDate>Mon, 06 Sep 2021 16:49:16 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/06/notification-service-worker%E7%AF%87/</guid>
      <description>前言 Service Worker目前Apple體系似乎還未完全支援(IOS,Safari...)
這次使用Notification API
較舊的瀏覽器可能也無法使用，Chrome，Edge這些就可以使用了
使用ServiceWorker並訂閱通知 function askForNotificationPermission() { Notification.requestPermission(function (status) { console.log(&amp;#39;User Choice&amp;#39;, status); if (status !== &amp;#39;granted&amp;#39;) { console.log(&amp;#39;推播允許被拒絕了!&amp;#39;); } else { console.log(&amp;#39;推播允許!&amp;#39;); } }); } //一組web push用的Application Server Public Key var applicationServerPublicKey = &amp;#39;BJZStZELls2cT9GaQ29RQlk6wuWGz-RnDFylb2YG77yiEY0DFhyVNG93U-RbUswECsVrt7dfhXLBldmUOGmWqPs&amp;#39;; //註冊service worker js的路徑 var serviceWorker = &amp;#39;../../serviceworker.js&amp;#39;; var isSubscribed = false; $(document).ready(function () { if (typeof applicationServerPublicKey === &amp;#39;undefined&amp;#39;) { errorHandler(&amp;#39;Vapid public key is undefined.&amp;#39;); return; } //初始化sevice worker  initialiseServiceWorker(); //判斷browser能不能傳送通知  Notification.</description>
    </item>
    
    <item>
      <title>Notification - 判斷WebView</title>
      <link>https://hushuuu.github.io/2021/09/06/notification-%E5%88%A4%E6%96%B7webview/</link>
      <pubDate>Mon, 06 Sep 2021 16:36:44 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/09/06/notification-%E5%88%A4%E6%96%B7webview/</guid>
      <description>前言 透過用戶代理useragent偵測瀏覽器
來判斷是否當下為WebView
主要內容 var rules = [&amp;#39;WebView&amp;#39;, &amp;#39;(iPhone|iPod|iPad)(?!.*Safari\/)&amp;#39;, &amp;#39;Android.*(wv|\.0\.0\.0)&amp;#39;]; var regex = new RegExp(`(` + rules.join(&amp;#39;|&amp;#39;) + `)`, &amp;#39;ig&amp;#39;); var matchResult = navigator.userAgent.match(regex); var isWebview = matchResult != null &amp;amp;&amp;amp; matchResult.length &amp;gt; 0; if (isWebview) { if (navigator.userAgent.match(/iPhone|iPad|iPod/i) &amp;amp;&amp;amp; typeof window.webkit != &amp;#39;undefined&amp;#39;) { try {//webview需對應設定  window.webkit.messageHandlers.Login.postMessage(&amp;#34;Login&amp;#34;);//呼叫手機端Login方法  } catch (err) { } return; } else if (typeof androidJs != &amp;#39;undefined&amp;#39;) { //webview需對應設定  androidJs.login();//呼叫手機端login方法  return; } } 參考連結   url1   </description>
    </item>
    
    <item>
      <title>VueJs 處理Json格式下日期Date</title>
      <link>https://hushuuu.github.io/2021/08/26/vuejs-%E8%99%95%E7%90%86json%E6%A0%BC%E5%BC%8F%E4%B8%8B%E6%97%A5%E6%9C%9Fdate/</link>
      <pubDate>Thu, 26 Aug 2021 16:37:23 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/vuejs-%E8%99%95%E7%90%86json%E6%A0%BC%E5%BC%8F%E4%B8%8B%E6%97%A5%E6%9C%9Fdate/</guid>
      <description>前言 Json Serilize後Datetime格式被轉為/Date(1373950800000)/
轉換處理 //傳入轉換字串和是否要含時間 function FormateDate(str,withTime){ var d = eval(`new ` + str.substr(1, str.length - 2)); var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; var ar_time = [d.getHours(), d.getMinutes(), d.getSeconds()]; for (var i = 0; i &amp;lt; ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]); for (var i = 0; i &amp;lt; ar_time.length; i++) ar_time[i] = dFormat(ar_time[i]); return withTime == true ? ar_date.join(`-`) + &amp;#34; &amp;#34; + ar_time.join(`: `) : ar_date.join(`-`); } function dFormat(i) { return i &amp;lt; 10 ?</description>
    </item>
    
    <item>
      <title>.Net MVC ViewModel 套上VueJs</title>
      <link>https://hushuuu.github.io/2021/08/26/.net-mvc-viewmodel-%E5%A5%97%E4%B8%8Avuejs/</link>
      <pubDate>Thu, 26 Aug 2021 14:48:29 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/.net-mvc-viewmodel-%E5%A5%97%E4%B8%8Avuejs/</guid>
      <description>前言 版本vue2.x
將ViewModel序列化後也可綁定到Vue物件上
主要內容 在cshtml內定義好model後序列化
用Json.Encode或是JsonConvert處理後
回傳MvcHtmlString類別
@{ var Datajson = new MvcHtmlString(Json.Encode(Model)); } 建立Vue實體，綁定Element
資料data定義一個dataList接收剛剛序列化的變數
var vueDiv = new Vue({ el: &amp;#34;#vueDiv&amp;#34;, data: { dataList:@Datajson, }, }); v-if 沒筆數就不顯示
v-for 迴圈印出datList每個項目
&amp;lt;table v-if=&amp;#34;dataList.count&amp;gt;0&amp;#34;&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;標題&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;名稱&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr v-for=&amp;#34;(item,index) in dataList&amp;#34; :id=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;td&amp;gt;{{item.title}}&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;{{item.name}}&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; </description>
    </item>
    
    <item>
      <title>NPOI - CellStyle篇</title>
      <link>https://hushuuu.github.io/2021/08/26/npoi-cellstyle%E7%AF%87/</link>
      <pubDate>Thu, 26 Aug 2021 11:52:40 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/npoi-cellstyle%E7%AF%87/</guid>
      <description>前言 NPOI 設定框線、字型、顏色、對齊、換行&amp;hellip;等常用樣式設定
建立表 XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立Workbook ISheet sheet = xssfworkbook.CreateSheet(sheetName); //建立sheet sheet.CreateRow(0).CreateCell(0).SetCellValue(&amp;#34;標題&amp;#34;); //第一次一定要先建立NewRow NewCell 框線 BorderStyle框線樣式
BorderColor框線顏色
ICellStyle myStyle = xssfworkbook.CreateCellStyle();//建立樣式 myStyle.BorderTop = BorderStyle.Thin;//設定上框線 myStyle.BorderBottom = BorderStyle.Thin;//設定下框線 myStyle.BorderLeft = BorderStyle.Thin;//設定框線 myStyle.BorderRight = BorderStyle.Thin;//設定框線 字型 FontName字體名稱:新細明體
FontHeightInPoints字體大小(double):12
IsBold是否粗體(bool)
Color顏色(short) HSSFColor.Black.Index
IFont cFont = workboook.CreateFont(); cFont.FontName = &amp;#34;微軟正黑體&amp;#34;; cFont.FontHeightInPoints = 12; cFont.IsBold = true; cFont.Color = HSSFColor.Red.Index; myStyle.SetFont(cFont); 對齊 myStyle.Alignment = HorizontalAlignment.Center; //水平置中 myStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中 換行 myStyle.</description>
    </item>
    
    <item>
      <title>NPOI 合併儲存格與框線樣式</title>
      <link>https://hushuuu.github.io/2021/08/26/npoi-%E5%90%88%E4%BD%B5%E5%84%B2%E5%AD%98%E6%A0%BC%E8%88%87%E6%A1%86%E7%B7%9A%E6%A8%A3%E5%BC%8F/</link>
      <pubDate>Thu, 26 Aug 2021 10:41:03 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/08/26/npoi-%E5%90%88%E4%BD%B5%E5%84%B2%E5%AD%98%E6%A0%BC%E8%88%87%E6%A1%86%E7%B7%9A%E6%A8%A3%E5%BC%8F/</guid>
      <description>前言 NPOI 是可讀取及產出Excel的套件。同JAVA的POI
EXCEL概觀 若要建立Excel首先要先建立Workbook
Workbook裡可建立數個Sheet
Sheet就為一張一張的表
每個表內從第0行(Row)第0欄(Column)開始第一個單元格
產出的格式若是較新版的Excel(.xlsx) 使用XSSFWorkbook
若為舊版Excel格式(.xls)則使用HSSFWorkbook
這邊以XSSF作範例，將A0合併至B2
XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立Workbook ISheet sheet = xssfworkbook.CreateSheet(sheetName); //建立sheet sheet.CreateRow(0).CreateCell(0).SetCellValue(&amp;#34;標題&amp;#34;); //第一次一定要先建立NewRow NewCell CellRangeAddress region = new CellRangeAddress(0,1,0,1);//指定區域A0~B2 sheet.AddMergedRegion(region);//合併區域 ICellStyle myStyle = xssfworkbook.CreateCellStyle();//建立樣式 myStyle.BorderTop = BorderStyle.Thin;//設定上框線 myStyle.BorderBottom = BorderStyle.Thin;//設定下框線 myStyle.BorderLeft = BorderStyle.Thin;//設定框線 myStyle.BorderRight = BorderStyle.Thin;//設定框線 sheet.GetRow(0).GetCell(0).CellStyle = myStyle; //設定樣式  //產出檔案並回傳 System.IO.MemoryStream ms = new System.IO.MemoryStream(); xssfworkbook.Write(ms); return File(ms.ToArray(), &amp;#34;application/vnd.ms-excel&amp;#34;, &amp;#34;myExcel.xlsx&amp;#34;); 合併後框線失效 上面的例子產出報表後，並未符合預期的樣子
合併後的框線樣式跑掉了。
這是因為框線樣式只有設定到A0這個元素格
合併後右下的框線就被合併起來了
故最簡單解決方式為把其他元素格也設定框線樣式</description>
    </item>
    
    <item>
      <title>ajax在NetCore Razor Page得到回應bad request</title>
      <link>https://hushuuu.github.io/2021/05/27/ajax%E5%9C%A8netcore-razor-page%E5%BE%97%E5%88%B0%E5%9B%9E%E6%87%89bad-request/</link>
      <pubDate>Thu, 27 May 2021 15:52:39 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/05/27/ajax%E5%9C%A8netcore-razor-page%E5%BE%97%E5%88%B0%E5%9B%9E%E6%87%89bad-request/</guid>
      <description>前言 在使用Razor Page時，想傳入post請求卻得到bad request
應該是在net core下有預設檢查ValidateAntiForgeryToken來防止跨站攻擊
故需要在POST前加上token來通過檢查
主要內容 可利用HtmlHelper直接產生出token @Html.AntiForgeryToken() 在ajax中加入token $.ajax({ type: &amp;#34;POST&amp;#34;, url: &amp;#34;&amp;#34;, data: &amp;#34;&amp;#34;, dataType: &amp;#34;json&amp;#34;, beforeSend: function (xhr) { xhr.setRequestHeader(&amp;#34;requestverificationtoken&amp;#34;, $(&amp;#39;input:hidden[name=&amp;#34;__RequestVerificationToken&amp;#34;]&amp;#39;).val()); }, success: function (response) { } }); 小結 另外Razor Pages 是透過 ?handler 決定呼叫哪一段程式
只要在 AJAX URL 加上 ?handler=MethodName
Razor Page cs檔寫 OnGetMethodName() 或 OnPostMethodName() 即可辨識要進哪個方法
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>NetCore上建立LINE BOT</title>
      <link>https://hushuuu.github.io/2021/05/27/netcore%E4%B8%8A%E5%BB%BA%E7%AB%8Bline-bot/</link>
      <pubDate>Thu, 27 May 2021 10:09:55 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/05/27/netcore%E4%B8%8A%E5%BB%BA%E7%AB%8Bline-bot/</guid>
      <description>前言 LINE官方有不同語言的API套件，C#的話則有社群提供。主要為pierre3提供的LineMessaging Api和twdeveloper提供的LineBotSDK可選用
本篇使用LineMessaging Api
初始設計 建立一個新專案，範本選.net core Web空白的專案
Nuget安裝Line.Messaging
將Linebot的Channel secret和Channel access token放在 appsettings.json
&amp;#34;LineBot&amp;#34;: { &amp;#34;channelSecret&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;accessToken&amp;#34;: &amp;#34;xxx&amp;#34; } 建立LineBotConfig.cs
public class LineBotConfig { public string channelSecret { get; set; } public string accessToken { get; set; } } 設定Startup.cs
public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container.</description>
    </item>
    
    <item>
      <title>圖表套件使用-Chart js</title>
      <link>https://hushuuu.github.io/2021/05/03/%E5%9C%96%E8%A1%A8%E5%A5%97%E4%BB%B6%E4%BD%BF%E7%94%A8-chart-js/</link>
      <pubDate>Mon, 03 May 2021 13:59:47 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/05/03/%E5%9C%96%E8%A1%A8%E5%A5%97%E4%BB%B6%E4%BD%BF%E7%94%A8-chart-js/</guid>
      <description>前言 在使用套件時，根據環境跟使用，引入的script版本非常重要
版本不同有些使用的方式也會改變或是增減造成效果不一。
CDN
&amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 主要內容 資料固定且簡單的範例只需引入後直接使用產生
&amp;lt;canvas id=&amp;#34;myChart&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;script&amp;gt; var ctx = document.getElementById(&amp;#34;myChart&amp;#34;); var chart = new Chart(ctx, { type: &amp;#39;bar&amp;#39;, data: { labels:{&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;}, datasets: [{ label: [&amp;#34;銷售量&amp;#34;], data: { &amp;#34;A&amp;#34;: &amp;#34;100&amp;#34;, &amp;#34;B&amp;#34;: &amp;#34;200&amp;#34;, &amp;#34;C&amp;#34;: &amp;#34;140&amp;#34; } }], } }) &amp;lt;/script&amp;gt; 非固定資料 可用Ajax撈回或使用PartialView的概念
&amp;lt;script&amp;gt; $(document).on(&amp;#39;click&amp;#39;, &amp;#39;#show_board&amp;#39;, function () { $.ajax({ type: &amp;#34;POST&amp;#34;, url: &amp;#39;@Url.Action(&amp;#34;ShowBoard&amp;#34;, &amp;#34;Product&amp;#34;)&amp;#39; }) .done(function (msg) { //後端傳回為json物件包含圖表所需的資料跟設定  var obj = msg; chart.data.datasets = obj.</description>
    </item>
    
    <item>
      <title>Net Core 使用 SignalR實現即時通訊</title>
      <link>https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/</link>
      <pubDate>Thu, 29 Apr 2021 14:15:05 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/29/net-core-%E4%BD%BF%E7%94%A8-signalr%E5%AF%A6%E7%8F%BE%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A/</guid>
      <description>前言 在使用SignalR之前可以先行了解WebSocket的原理
Websocket是一個持久化的協議，長期保持連線
若需要回應時再進行回應。
而除了WebSocket，也有long poll或利用AjaxLoop
的方式來實現即時通訊。但另外兩種方式相較之下較為消耗資源。
初始步驟 Nuget尋找並安裝SignalR相關套件
如Microsoft.AspNetCore.SignalR.Core
用戶端程式庫 在 [方案總管] 中，以滑鼠右鍵按一下專案，然後選取 [新增][用戶端程式庫] &amp;gt; 。
在 [新增用戶端程式庫] 對話方塊中，針對 [提供者] 選取 [unpkg]。
針對 [程式庫]，輸入 @microsoft/signalr
選取 [選擇特定檔案]、展開 [散發者/瀏覽器] 資料夾，然後選取 signalr.js 與 signalr.min.js。
將 [目標位置] 設定為 wwwroot/lib/signalr/，然後選取 [安裝]。
建立Signal Hub 建立Hubs資料夾
在 Hubs 資料夾中，建立ChatHub.cs
using Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace SignalRChat.Hubs { public class ChatHub : Hub { public async Task SendMessage(string user, string message) { await Clients.All.SendAsync(&amp;#34;ReceiveMessage&amp;#34;, user, message); } } }&amp;gt; 註冊SignalR 在Startup.</description>
    </item>
    
    <item>
      <title>NetCore 啟用Session</title>
      <link>https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/</link>
      <pubDate>Fri, 23 Apr 2021 10:39:28 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/23/netcore-%E5%95%9F%E7%94%A8session/</guid>
      <description>前言 安裝套件 Microsoft.AspNetCore.Session
Startup.cs &amp;gt; ConfigureServices中加入
// 將 Session 存在 ASP.NET Core 記憶體中 services.AddDistributedMemoryCache(); services.AddSession(options =&amp;gt; { options.Cookie.HttpOnly = true; //防止XSS攻擊者存取Cookies }); Startup &amp;gt; Configure中加入
// SessionMiddleware 加入 Pipeline app.UseSession(); 開始使用 //設定Session HttpContext.Session.SetString(&amp;#34;SessionKey&amp;#34;, &amp;#34;SessionValue&amp;#34;); //取得Session string sVal = HttpContext.Session.GetString(&amp;#34;SessionKey&amp;#34;); Session如果需要存物件進去就需要寫擴充的方法來實現 新增SessionExtensions.cs
//HttpContext.Session.GetObject&amp;lt;T&amp;gt;(&amp;#34;SessionKey&amp;#34;);  //HttpContext.Session.SetObject&amp;lt;T&amp;gt;(&amp;#34;SessionKey&amp;#34;,object);  public static class SessionExtensions { public static void SetObject&amp;lt;T&amp;gt;(this ISession session, string key, T value) { session.SetString(key, JsonConvert.SerializeObject(value)); } public static T GetObject&amp;lt;T&amp;gt;(this ISession session, string key) { var value = session.</description>
    </item>
    
    <item>
      <title>NetCore 更改預設ModelBinding ErrorMessage</title>
      <link>https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/</link>
      <pubDate>Fri, 23 Apr 2021 10:04:41 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/23/netcore-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADmodelbinding-errormessage/</guid>
      <description>前言 NetCore就算更改了Local Language若沒做多國語言資源，似乎沒有預設中文的樣板
除了可以在Attribue裡面自定義錯誤訊息來改成中文但共用屬性每個都改太麻煩了 可以使用自訂義類別實作 IValidationMetadataProvider介面來實現更改預設訊息
主要內容 建立cs檔
public void CreateValidationMetadata(ValidationMetadataProviderContext context) { if (context == null) { throw new ArgumentNullException(); } var validators = context.ValidationMetadata.ValidatorMetadata; // add [Required] for value-types (int/DateTime etc)  // to set ErrorMessage before asp.net does it  var theType = context.Key.ModelType; var underlyingType = Nullable.GetUnderlyingType(theType); if (theType.IsValueType &amp;amp;&amp;amp; underlyingType == null &amp;amp;&amp;amp; // not nullable type  validators.Where(m =&amp;gt; m.GetType() == typeof(RequiredAttribute)).Count() == 0) { validators.</description>
    </item>
    
    <item>
      <title>在Net Core 使用 ViewComponent</title>
      <link>https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/</link>
      <pubDate>Wed, 21 Apr 2021 17:50:19 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/21/%E5%9C%A8net-core-%E4%BD%BF%E7%94%A8-viewcomponent/</guid>
      <description>前言 NetCore也可以使用原本HtmlHelper的PartialView的方式或用TagHelper來呼叫
本篇介紹如何使用更豐富的ViewComponent
主要內容 1.在專案底下新增資料夾ViewComponents
2.新增一個XXXXViewComponent.cs檔案
3.檔案內容須符合相關規則(可只擇一規則)才會被辨認為ViewComponent
//規則:檔名為XXXXViewComponent [Microsoft.AspNetCore.Mvc.ViewComponent] //規則: 類別掛上[ViewComponent] Attribute public class PkindViewComponent : Microsoft.AspNetCore.Mvc.ViewComponent //規則: 類別繼承ViewComponent { public PkindViewComponent() { } public IViewComponentResult Invoke() { return View(); } } View模板預設路徑要放在 Views/Shared/Components/XXXX/Default.cshtml
就可以開始設計View
如何使用 在需要呼叫ViewComponent 的檢視下加上
@addTagHelper *, 專案名稱 再打上vc 就會自動跑出選項代表成功了 &amp;lt;div&amp;gt; &amp;lt;vc:XXXX&amp;gt;&amp;lt;/vc:XXXX&amp;gt; &amp;lt;/div&amp;gt; 應用 也有非同步調用方法InvokeAsync 和含有參數往資料庫撈資料的變化
[Microsoft.AspNetCore.Mvc.ViewComponent] public class HotSaleComponent : Microsoft.AspNetCore.Mvc.ViewComponent { private Test2021Context _context; public HotSaleComponent(Test2021Context context) { _context = context; } public async Task&amp;lt;IViewComponentResult&amp;gt; InvokeAsync(string ddd) { var list = await _context.</description>
    </item>
    
    <item>
      <title>EntityFramework Core使用NLlog紀錄Sql</title>
      <link>https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/</link>
      <pubDate>Mon, 12 Apr 2021 15:00:25 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/12/entityframework-core%E4%BD%BF%E7%94%A8nllog%E7%B4%80%E9%8C%84sql/</guid>
      <description>前言 EF Core5.0之後增加 LogTo 可使用StramWriter的方式寫在DBContext.cs裡
但沒試出寫在Startup.cs ConfigureServices
private readonly StreamWriter _logStream = new StreamWriter(&amp;#34;mylog.txt&amp;#34;, append: true); protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) =&amp;gt; optionsBuilder.LogTo(_logStream.WriteLine); public override void Dispose() { base.Dispose(); _logStream.Dispose(); } public override async ValueTask DisposeAsync() { await base.DisposeAsync(); await _logStream.DisposeAsync(); } 普通的Console.Write方法
services.AddDbContext&amp;lt;YourContext&amp;gt;(options =&amp;gt; { options.UseSqlServer(Configuration.GetConnectionString(&amp;#34;DefaultConnection&amp;#34;)) .EnableSensitiveDataLogging(); //顯示敏感資料(參數)  options.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Name }, LogLevel.Information); }); NLog來記錄 先打開Nuget安裝 NLog NLog.Web.AspNetCore
Program.cs
public static void Main(string[] args) { var logger = NLogBuilder.</description>
    </item>
    
    <item>
      <title>EntityFramework Core開始使用</title>
      <link>https://hushuuu.github.io/2021/04/09/entityframework-core%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 09 Apr 2021 10:17:00 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/04/09/entityframework-core%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8/</guid>
      <description>前言 .NetCore(net5)
Entity Framework Core
紀錄如何初始化
主要內容 使用PackageManager安裝
EntityFrameworkCore.SqlServer EntityFrameworkCore.Design EntityFrameworkCore EntityFrameworkCore.SqlServer.Tools 建立 DB模型cs
public class Blog { public int Id { get; set; } public string Name { get; set; } } 建立DbContext.cs
public partial class Test2021Context : DbContext { public Test2021Context() { } public Test2021Context(DbContextOptions&amp;lt;Test2021Context&amp;gt; options) : base(options) { } public virtual DbSet&amp;lt;Blog&amp;gt; Blogs { get; set; } //相依注入後此方法可註解掉  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { if (!optionsBuilder.IsConfigured) { optionsBuilder.</description>
    </item>
    
    <item>
      <title>MVC-使用AntiForgery Token防止跨網站(XSRF/CSRF)攻擊</title>
      <link>https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/</link>
      <pubDate>Mon, 29 Mar 2021 15:56:17 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/29/mvc-%E4%BD%BF%E7%94%A8antiforgery-token%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%B6%B2%E7%AB%99xsrf/csrf%E6%94%BB%E6%93%8A/</guid>
      <description>前言 MVC本身可在Form Post前使用AntiForgeryToken
在Action上掛上[ValidateAntiForgeryToken]來檢查驗證
如果要在Ajax使用可以自行建立驗證
內建的AntiForgeryToken @using (Html.BeginForm()) { @Html.AntiForgeryToken() } 後端掛在動作上驗證
[ValidateAntiForgeryToken] public ActionResult Create(){ } Ajax套用自行建立驗證 產生AntiForgeryToken
@functions{ public static string GetAntiForgery() { string cookieToken, formToken; AntiForgery.GetTokens(null, out cookieToken, out formToken); return String.Concat(cookieToken, &amp;#34;@.@&amp;#34;, formToken); } } function deleteUser() { var token = $(&amp;#39;@Html.AntiForgeryToken()&amp;#39;).val(); //防偽標記放入headers  //也可以將防偽標記放入data  $.ajax({ type: &amp;#39;POST&amp;#39;, url: &amp;#34;/User/Delete&amp;#34;, headers: { &amp;#39;__RequestVerificationToken&amp;#39;: token }, cache: false, data: { &amp;#34;id&amp;#34;: $(&amp;#34;#delid&amp;#34;).val()}, complete: function (data) { alert(data.</description>
    </item>
    
    <item>
      <title>MVC-上傳檔案轉為Base64String</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</link>
      <pubDate>Thu, 25 Mar 2021 11:15:44 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E8%BD%89%E7%82%BAbase64string/</guid>
      <description>前言 Html的Img標籤可以將src設為轉換後的Base64 String也可以顯示出圖片
若WebApi需要交流檔案也可以將檔案轉換為Base64進行溝通
Post前轉換 建立一個按鈕事件將轉換後的base64String Post至後端
$(document).on(&amp;#39;click&amp;#39;, &amp;#39;#subBtn&amp;#39;, function () { demo().then((obj) =&amp;gt; { $.ajax({ url: &amp;#34;../&amp;#34;, // url位置  type: &amp;#34;POST&amp;#34;, contentType: &amp;#34;application/json&amp;#34;, data: JSON.stringify(obj),// 輸入的資料  success: function (response) { }//  }); }); }); 使用FileReader來讀取上傳的檔案
因為readAsDataURL是非同步讀取
若不做非同步等待處理
檔案還未處理完就會被Post出去造成傳遞不到正確資料
故需將函式套上async並await等候所有檔案都處理完
const demo = async () =&amp;gt; { var obj = {}; var filearray = []; var file_name = []; let files = $(&amp;#34;input[name=upload_file]&amp;#34;)[0].files; for (let i = 0; i &amp;lt; files.</description>
    </item>
    
    <item>
      <title>MVC-檔案上傳Post</title>
      <link>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</link>
      <pubDate>Thu, 25 Mar 2021 10:44:23 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/25/mvc-%E6%AA%94%E6%A1%88%E4%B8%8A%E5%82%B3post/</guid>
      <description>FormPost 如果要用FormPost的方式上傳檔案
注意將Form的Content-Type 設定為enctype=&amp;quot;multipart/form-data&amp;quot;
&amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;.png, .jpg, .jpeg&amp;quot; name=&amp;quot;Filedata&amp;quot; class=&amp;quot;btn btn-default&amp;quot; /&amp;gt;
FormDataPost到後端後可以這樣來接收
public ActionResult Create(HttpPostedFileBase Filedata) { //可利用正則式過濾副檔名 if (Filedata != null &amp;amp;&amp;amp; Regex.IsMatch(Path.GetExtension(Filedata.FileName), &amp;#34;^[.](jpg|png|jpeg|gif|bmp)$&amp;#34;, RegexOptions.IgnoreCase)) { //存到資料夾  string tmpPath1 = Server.MapPath(&amp;#34;~/Images/&amp;#34;); if (!Directory.Exists(tmpPath1)) Directory.CreateDirectory(tmpPath1); var FileName = Path.GetFileName(Filedata.FileName); var FilePath = Path.Combine(Server.MapPath(&amp;#34;~/Images/&amp;#34;), FileName); Filedata.SaveAs(FilePath); string save_path = &amp;#34;/Images/&amp;#34; + FileName; pcm.pic_path = save_path; } } XMLHttpRequest上傳 建立FormData利用XMLHttpRequest發出請求
監聽上傳事件可顯示出上傳進度
//上傳檔案 var file = null; $(&amp;#39;#Filedata1&amp;#39;)[0].addEventListener(&amp;#39;change&amp;#39;, readFile, false); function readFile() { file = this.</description>
    </item>
    
    <item>
      <title>Linq常用的語法與基本介紹</title>
      <link>https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Tue, 16 Mar 2021 16:46:20 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/linq%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AA%9E%E6%B3%95%E8%88%87%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</guid>
      <description>前言 LINQ在資料的過濾以及查詢方面非常方便，不只可以在EF中轉為SQL語句
也能對平常的List型別進行過濾查詢。
主要內容 Linq有兩種表示式，有一種是使用Lambda表示式
var p = from t in products where t.Name == &amp;#34;牙膏&amp;#34; select t; //Lambda var p2 = products.Where(t =&amp;gt; t.Name == &amp;#34;牙膏&amp;#34;); JOIN //left join linq var q = from e in Db.Page_M orderby e.page_stack join s in ( from s in Db.Group_D where s.group_id==group_id select s) on new { page_id = e.page_id } equals new { page_id = s.page_id } into subGrp from s in subGrp.</description>
    </item>
    
    <item>
      <title>MVC-包含明細的儲存</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</link>
      <pubDate>Tue, 16 Mar 2021 15:50:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E5%8C%85%E5%90%AB%E6%98%8E%E7%B4%B0%E7%9A%84%E5%84%B2%E5%AD%98/</guid>
      <description>前言 在一對多的資料表下，一個表頭會對應好幾筆的明細
開發儲存明細時，該如何實現。
主要內容 若要新增資料要包含新增多筆明細。
可以在新增頁上建立一個Table
並進行新增一筆及刪除一筆的行為
最後儲存時在將table進行post回去的處理
一種方法是在畫面上讓使用者挑選輸入明細
輸入完畢塞一筆進html的table
&amp;lt;p&amp;gt;&amp;lt;h4&amp;gt;訂單明細&amp;lt;/h4&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;div class=&amp;#34;choseProd&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; &amp;lt;h5&amp;gt;選擇商品至明細&amp;lt;/h5&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-2&amp;#34;&amp;gt; @Html.DropDownList(&amp;#34;ChoseProd&amp;#34;, Model.AllProducts, new { @class = &amp;#34;form-control&amp;#34; }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-1&amp;#34;&amp;gt; @Html.EditorFor(m =&amp;gt; m.QtyForSel, new { htmlAttributes = new { @class = &amp;#34;form-control&amp;#34;, @Min = &amp;#34;0&amp;#34; } }) &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;button class=&amp;#34;btn btn-default&amp;#34; id=&amp;#34;addBtn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;新增&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 新增按鈕呼叫applist()AJAX POST查詢商品價格後回傳
串接HTML(顯示欄位+隱藏的Input欄位)
Append到明細Table
function applist() { var chosepod = $(&amp;#34;#ChoseProd&amp;#34;).</description>
    </item>
    
    <item>
      <title>MVC-Table排序與分頁</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</link>
      <pubDate>Tue, 16 Mar 2021 14:43:46 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-table%E6%8E%92%E5%BA%8F%E8%88%87%E5%88%86%E9%A0%81/</guid>
      <description>前言 前端有很多實用的table套件如DataTable.js可以直接實現排序換頁搜尋
本篇主要練習如何手動刻出類似的功能。
分頁 分頁的概念為設定一頁需顯示幾筆，再將資料分為幾等分來決定
要顯示第幾頁的資料，根據資料庫的種類用 Rownum Limit等
還可以用LinQ Skip() Take()
var list = query.Skip(startIndex).Take(pageSize).toList(); //舉例一頁顯示10筆，要顯示第3頁的資料  //Skip前兩頁的資料 =&amp;gt; 10*2  //Skip 20筆 Take 10筆 分頁導覽列 傳回前端的資料除了這十筆，也需要將分頁的資訊傳入進行判斷
page當前頁數 EndPage最後頁 TotalItemCount總筆數等
建立導覽列
if (page == 1) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;last_btn&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } else { int nextnum = page - 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;last_btn&amp;#34; href=&amp;#34;@url?page=@nextnum&amp;#34;&amp;gt;上頁&amp;lt;/a&amp;gt; } if (page == Endpage) { &amp;lt;a class=&amp;#34;btn-default btn-sm disabled&amp;#34; id=&amp;#34;next_btn&amp;#34;&amp;gt;下頁&amp;lt;/a&amp;gt; } else { int nextnum = page + 1; &amp;lt;a class=&amp;#34;btn-default btn-sm&amp;#34; id=&amp;#34;next_btn&amp;#34; href=&amp;#34;@url?</description>
    </item>
    
    <item>
      <title>MVC-頁面及權限管理</title>
      <link>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 16 Mar 2021 08:49:37 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/16/mvc-%E9%A0%81%E9%9D%A2%E5%8F%8A%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <description>前言 此篇根據頁面資料表間的父子關係，利用遞迴來產生Menu的選單
並透過群組來進行頁面權限的管控
主要內容 基本的頁面資料表結構，重要的是parent_id代表此頁面父階層頁面的page_id
public class PageModel { [Display(Name = &amp;#34;頁號&amp;#34;)] public string page_id { get; set; } [Display(Name = &amp;#34;頁面名稱&amp;#34;)] public string page_name { get; set; } [Display(Name = &amp;#34;Controller&amp;#34;)] public string controller { get; set; } [Display(Name = &amp;#34;Action&amp;#34;)] public string action { get; set; } [Display(Name = &amp;#34;父頁面&amp;#34;)] public string parent_id { get; set; } } 產生選單的部分使用bootstrap的navbar
並透過Partial View的方式來載入管控的頁面
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;navbar-header&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;navbar-toggle&amp;#34; data-toggle=&amp;#34;collapse&amp;#34; data-target=&amp;#34;.</description>
    </item>
    
    <item>
      <title>MVC-產出Excel</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</link>
      <pubDate>Mon, 15 Mar 2021 17:15:18 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%94%A2%E5%87%BAexcel/</guid>
      <description>前言 介紹NPOI及EPPlus套件來將資料產出成Excel。
主要內容 NPOI的方式產出報表，XSSFWorkbook為.xlsx格式HSSF則為較舊的.xls
public ActionResult getExcel() { var result = List&amp;lt;Data&amp;gt;;//資料  //建立Excel  XSSFWorkbook xssfworkbook = new XSSFWorkbook(); //建立活頁簿  ISheet sheet = xssfworkbook.CreateSheet(&amp;#34;sheet&amp;#34;); //建立sheet  //設定樣式  ICellStyle headerStyle = xssfworkbook.CreateCellStyle(); IFont headerfont = xssfworkbook.CreateFont(); headerStyle.Alignment = HorizontalAlignment.Center; //水平置中  headerStyle.VerticalAlignment = VerticalAlignment.Center; //垂直置中  headerfont.FontName = &amp;#34;微軟正黑體&amp;#34;; headerfont.FontHeightInPoints = 20; headerStyle.SetFont(headerfont); //新增標題列  sheet.CreateRow(0); //需先用CreateRow建立,才可通过GetRow取得該欄位  sheet.GetRow(0).CreateCell(0).SetCellValue(&amp;#34;商品清單&amp;#34;); sheet.AddMergedRegion(new CellRangeAddress(0, 0, 0, 2)); //合併A~C欄儲存格  sheet.GetRow(0).GetCell(0).CellStyle = headerStyle; //套用樣式  sheet.</description>
    </item>
    
    <item>
      <title>MVC-資料存取(DataAccess)</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</link>
      <pubDate>Mon, 15 Mar 2021 11:32:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96dataaccess/</guid>
      <description>前言 在開發時與資料庫間的連線橋梁，較常見的為ADO.NET或是EF的方式，此篇只介紹ADO.NET
使用ADO.NET最基本就是開啟SqlConnection連線建立SqlCommand操作
第一步 直接連線並查詢出結果的範例
string connStr = &amp;#34;連線字串&amp;#34;; string sql = &amp;#34;SELECT * FROM Product Where id=@id&amp;#34;; SqlConnection Conn = new SqlConnection(connStr); Conn.Open(); SqlCommand Cmd = new SqlCommand(sql); Cmd.Connection = Conn; Cmd.Parameters.Clear(); Cmd.Parameters.AddWithValue(&amp;#34;id&amp;#34;,&amp;#34;1&amp;#34;); using(SqlDataReader sdr = Cmd.ExecuteReader()){ while(sdr.Read()){ Console.WriteLine(sdr.GetString(0)); } } Conn.Close(); 但若是每個資料庫的操作都需要打上這一大段的Code程式碼不僅變得冗長且難以統一維護
這時候就可以利用封裝的概念將code包起來
先建立一個新類別檔DataAccess.cs
public class DataAccess { public string ConnectionString {get; set;} public SqlConnection Conn {get;set;} protected SqlCommand Cmd {get;set;} public DataAccess(SqlConnection Conn){ this.Conn = Conn; this.ConnectionString = Conn.</description>
    </item>
    
    <item>
      <title>無法轉換類型為CrystalDecisions.ReportAppServer.Controllers.ReportSourceClass</title>
      <link>https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/</link>
      <pubDate>Mon, 15 Mar 2021 10:58:27 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/%E7%84%A1%E6%B3%95%E8%BD%89%E6%8F%9B%E9%A1%9E%E5%9E%8B%E7%82%BAcrystaldecisions.reportappserver.controllers.reportsourceclass/</guid>
      <description>前言 較舊之Winfrom專案，有些報表是用SAP的CrystalReport來產生報表。
若使用VS2019的環境必須先至SAP下載安裝相關之Runtime或是專門給開發人員的CRforVisualStudio
安裝完畢後可能還會遇到套件版本不相容之問題需另解決。
主要內容 若是在產生報表時出現錯誤訊息的話，試試在Webconfig/Appconfig 下增加此段
並調整 oldVersion 和 newVersion 之版本號多嘗試幾次
&amp;lt;runtime&amp;gt; &amp;lt;assemblyBinding xmlns=&amp;#34;urn:schemas-microsoft-com:asm.v1&amp;#34;&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.CrystalReports.Engine&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.ReportSource&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Shared&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Web&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.Windows.Forms&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.ReportAppServer.ClientDoc&amp;#34; publicKeyToken=&amp;#34;692fbea5521e1304&amp;#34; culture=&amp;#34;neutral&amp;#34;/&amp;gt; &amp;lt;bindingRedirect oldVersion=&amp;#34;13.0.2000.0&amp;#34; newVersion=&amp;#34;13.0.3500.0&amp;#34;/&amp;gt; &amp;lt;/dependentAssembly&amp;gt; &amp;lt;dependentAssembly&amp;gt; &amp;lt;assemblyIdentity name=&amp;#34;CrystalDecisions.</description>
    </item>
    
    <item>
      <title>EntityFramework查詢結果回傳DataTable</title>
      <link>https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/</link>
      <pubDate>Mon, 15 Mar 2021 09:55:01 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/entityframework%E6%9F%A5%E8%A9%A2%E7%B5%90%E6%9E%9C%E5%9B%9E%E5%82%B3datatable/</guid>
      <description>前言 以DatabaseFirst來說不管是查詢還是更改的動作都是和資料庫綁定的實體資料模型Model進行交流
查詢的結果會是模型的類別，如果結果要為DataTable，EF也可以使用Command的方式。
主要內容 查詢結果回傳DataSet方法
傳入sql CommandText 以及數組KeyValuePair參數
public DataSet EF_SQL_DS(string sql,Dictionary&amp;lt;string,object&amp;gt; parameters) { XXXXEntities Db = new XXXXEntities();//更改為自己的Entities  DataSet ds = new DataSet(); DbCommand cmd = Db.Database.Connection.CreateCommand(); cmd.CommandText = sql; foreach(KeyValuePair&amp;lt;string,object&amp;gt; p in parameters) { DbParameter dbp = cmd.CreateParameter(); dbp.ParameterName = p.Key; if (p.Value != null) { dbp.Value = p.Value; } else { dbp.Value = DBNull.Value; } cmd.Parameters.Add(dbp); } Db.Database.Connection.Open(); var reader = cmd.ExecuteReader(); var tb = new DataTable(); tb.</description>
    </item>
    
    <item>
      <title>MVC 登入驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:26:53 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/mvc-%E7%99%BB%E5%85%A5%E9%A9%97%E8%AD%89/</guid>
      <description>前言 關於過濾器，可以提前了解一下Asp.net MVC的生命週期。
可透過放在不同週期階段的過濾器來達成不同的需求。
有關生命週期相關可參考此連結
本文主要介紹Action Filter
主要內容 我們可在專案底下新增一個ActionFilters的資料夾
在裡面新增一個LoginFilter.cs檔
裡面就可以寫自定義的Filter
繼承ActionFilterAttribute並複寫OnActionExecuting方法
這邊條件我拿一個登入後設定的Seesion來做判斷。
不通過則filterContext.Result設定導向回登入頁
public class LoginFilter: ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { if (HttpContext.Current.Session[&amp;#34;Login_id&amp;#34;] == null) { filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = &amp;#34;Home&amp;#34;, action = &amp;#34;Login&amp;#34; })); } } } 掛上Filter 建立好自定義的Filter後，使用的方式可根據想套用的範圍大小來掛上Filter。
可以在Action上頭掛上[LoginFilter]，或者是掛在Controller上來套用整個控制器的Action</description>
    </item>
    
    <item>
      <title>asp.net MVC 後端Model欄位驗證</title>
      <link>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</link>
      <pubDate>Mon, 15 Mar 2021 09:03:12 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/15/asp.net-mvc-%E5%BE%8C%E7%AB%AFmodel%E6%AC%84%E4%BD%8D%E9%A9%97%E8%AD%89/</guid>
      <description>前言 說明幾種Model Binding驗證欄位的方法。
包含正則式，長度限制，必填，自訂驗證。
主要內容 以下面例子 account 的欄位的驗證
StringLength() 長度限制
RegularExpression() 利用正則式
Required 必要欄位
CheckAccount 則為自訂的驗證
[Display(Name = &amp;#34;帳號&amp;#34;)] [StringLength(20)] [RegularExpression(@&amp;#34;[a-zA-Z0-9]*$&amp;#34;, ErrorMessage = &amp;#34;帳號僅能有英文或數字&amp;#34;)] [Required] [CheckAccount(ErrorMessage = &amp;#34;重複&amp;#34;)] public string account { get; set; } 自訂驗證部分可以建立一個類別繼承ValidationAttribute，再複寫 `IsValid方法
public class CheckAccountAttribute : ValidationAttribute { protected override ValidationResult IsValid(object value, ValidationContext validationContext) { //return base.IsValid(value, validationContext);  if (value != null) { if (/*條件式*/) { return new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); } else { return ValidationResult.</description>
    </item>
    
    <item>
      <title>Iphone的螢幕比安卓的容易裂開?</title>
      <link>https://hushuuu.github.io/2021/03/12/iphone%E7%9A%84%E8%9E%A2%E5%B9%95%E6%AF%94%E5%AE%89%E5%8D%93%E7%9A%84%E5%AE%B9%E6%98%93%E8%A3%82%E9%96%8B/</link>
      <pubDate>Fri, 12 Mar 2021 16:42:54 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/12/iphone%E7%9A%84%E8%9E%A2%E5%B9%95%E6%AF%94%E5%AE%89%E5%8D%93%E7%9A%84%E5%AE%B9%E6%98%93%E8%A3%82%E9%96%8B/</guid>
      <description>前言 Compare Iphone and others Andorid Mobiles,Which is more durable?
主要內容 this is A this is B
小結 A Lose
參考連結   url1 url2   </description>
    </item>
    
    <item>
      <title>One Post</title>
      <link>https://hushuuu.github.io/2021/03/12/one-post/</link>
      <pubDate>Fri, 12 Mar 2021 15:16:07 +0800</pubDate>
      
      <guid>https://hushuuu.github.io/2021/03/12/one-post/</guid>
      <description>adsasdsadasdd</description>
    </item>
    
    <item>
      <title>Chinese Test</title>
      <link>https://hushuuu.github.io/2020/09/09/test-chinese/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2020/09/09/test-chinese/</guid>
      <description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用  思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
 图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/11/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>https://hushuuu.github.io/2019/03/10/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/10/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://hushuuu.github.io/2019/03/09/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/09/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://hushuuu.github.io/2019/03/08/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/08/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://hushuuu.github.io/2019/03/05/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hushuuu.github.io/2019/03/05/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
